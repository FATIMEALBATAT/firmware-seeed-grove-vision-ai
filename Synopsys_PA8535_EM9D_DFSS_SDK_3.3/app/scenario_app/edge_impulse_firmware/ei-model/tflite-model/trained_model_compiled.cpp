/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 02.01.2023 09:22:40

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 241344;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -87, -111, -30, 
  /* [0][1][][] */ 66, -38, 16, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 106, -95, -11, 
  /* [1][1][][] */ -127, 105, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -93, -79, 
  /* [3][0][][] */ 118, 124, 58, 
  /* [3][1][][] */ 1, -22, -14, 
  /* [3][2][][] */ -102, -127, -43, 
  /* [4][0][][] */ 34, -52, 5, 
  /* [4][1][][] */ 32, -127, 6, 
  /* [4][2][][] */ 19, -96, -13, 
  /* [5][0][][] */ -55, 31, 3, 
  /* [5][1][][] */ -127, 34, 9, 
  /* [5][2][][] */ -80, 28, 3, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -52, 55, -17, 
  /* [6][2][][] */ -37, -53, -91, 
  /* [7][0][][] */ 31, 20, -23, 
  /* [7][1][][] */ 127, 64, -8, 
  /* [7][2][][] */ 31, 5, -18, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -62, 96, 
  /* [9][0][][] */ -23, 50, -11, 
  /* [9][1][][] */ -19, 127, -11, 
  /* [9][2][][] */ -12, 83, -6, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -19, 9, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 5, 
  /* [12][2][][] */ -79, 78, 4, 
  /* [13][0][][] */ 73, 31, -13, 
  /* [13][1][][] */ 127, 119, -10, 
  /* [13][2][][] */ 59, 93, 29, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -96, -33, 20, 
  /* [15][1][][] */ -123, -127, 18, 
  /* [15][2][][] */ -25, -84, -12, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.047916896641254425, 0.22105993330478668, 0.063816986978054047, 0.036941271275281906, 0.0064551373943686485, 0.0087667079642415047, 0.030335089191794395, 0.0074718175455927849, 0.033232193440198898, 0.0082294456660747528, 0.11375357210636139, 0.17300958931446075, 0.062546469271183014, 0.0040546562522649765, 0.17344152927398682, 0.0080822957679629326, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 2216, 162, -104, 1948, 58751, 45521, 6625, 5231, 6899, 11012, 1322, -57, 7421, -1107, 116, 42108, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00018790940521284938, 0.00086690176976844668, 0.0002502627030480653, 0.00014486773579847068, 2.5314266167697497e-05, 3.4379248972982168e-05, 0.00011896114301634952, 2.9301247195689939e-05, 0.00013032233982812613, 3.2272339012706652e-05, 0.00044609245378524065, 0.00067846901947632432, 0.00024528027279302478, 1.5900614016572945e-05, 0.00068016292061656713, 3.1695279176346958e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 2,-1,4,6,-19,11,2,16,-5,-11,1,-6,-4,-8,2,2, 6,-7,0,8,14,-2,10,-26,-6,9,-6,81,-7,20,1,1, 4,-3,-3,6,1,-14,-2,10,2,2,-1,-9,-1,-6,-5,1, 
  /* [0][1][][] */ 13,-5,3,0,127,-24,-127,-21,127,127,-2,-3,114,-26,2,-17, -127,127,127,-5,-88,-91,-13,-102,18,-106,127,127,127,127,127,127, 21,-5,-2,-3,-11,127,7,-11,0,-13,-8,-3,5,-5,-12,-7, 
  /* [0][2][][] */ 2,-1,2,-14,-16,16,53,7,-6,-8,1,-1,-5,-1,-6,-10, 24,-17,-3,-127,8,-15,-9,127,-4,1,-3,-14,-16,-61,-11,-36, 5,0,2,-2,2,-4,2,-3,3,1,-4,2,-7,-7,-12,-11, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0049332864582538605, 0.0081759942695498466, 0.0068872985430061817, 0.0077250031754374504, 0.040772970765829086, 0.031158247962594032, 0.007364603690803051, 0.033653412014245987, 0.011868133209645748, 0.043737292289733887, 0.009533073753118515, 0.0088441688567399979, 0.0045822472311556339, 0.01227516308426857, 0.0087108826264739037, 0.022672809660434723, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 19645, -911, -189, 3346, -1153, 289, 9380, 1461, -650, 285, -2268, 2990, 1102, -161, -374, -1182, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00011607733176788315, 0.00019237633387092501, 0.00016205408610403538, 0.00018176478624809533, 0.00095936405705288053, 0.00073313526809215546, 0.00017328480316791683, 0.00079184502828866243, 0.00027925020549446344, 0.0010291127255186439, 0.00022430761600844562, 0.0002080980921164155, 0.00010781758464872837, 0.00028882737387903035, 0.00020496195065788925, 0.00053347786888480186, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -10,-11,-13,-65,-20,-35,18,-21,37,10,-30,-6,110,127,-17,-99, 
  /* [1][0][][] */ 127,-59,-38,19,-41,71,-68,-39,-40,81,-27,-50,-9,5,-56,-13, 
  /* [2][0][][] */ -35,-94,33,49,45,-52,-74,-18,28,-88,23,-127,44,-25,-78,24, 
  /* [3][0][][] */ 34,13,14,11,-11,68,-49,-21,127,45,11,25,4,-13,13,24, 
  /* [4][0][][] */ -99,-43,-32,-127,-6,43,61,-120,34,-20,-51,-42,-127,31,-41,-22, 
  /* [5][0][][] */ 88,53,75,-33,52,-43,-127,-125,-15,-70,62,48,-58,51,65,-49, 
  /* [6][0][][] */ 105,35,-127,-77,22,-67,3,-86,-43,21,-117,84,81,-82,1,73, 
  /* [7][0][][] */ -127,-2,99,-32,-63,1,-1,-63,-48,59,78,-29,63,-26,26,31, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.006909581832587719, 0.0092722149565815926, 0.0074264123104512691, 0.01013950165361166, 0.0070901713334023952, 0.0066260187886655331, 0.0079072648659348488, 0.011563707143068314, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -7743, -3615, 11537, -9675, 23953, 7241, -8271, 10999, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00016257840616162866, 0.00021816976368427277, 0.00017473912157583982, 0.00023857651103753597, 0.00016682756540831178, 0.00015590632392559201, 0.00018605329387355596, 0.00027208722895011306, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -34,22,-3,-17,-81,-45,-127,29, 
  /* [1][0][][] */ 81,-88,-71,-51,127,-100,96,30, 
  /* [2][0][][] */ -98,115,-47,-127,53,-14,-28,42, 
  /* [3][0][][] */ 44,25,92,5,103,118,127,-10, 
  /* [4][0][][] */ -68,-127,61,14,-55,-101,-3,-27, 
  /* [5][0][][] */ 127,-26,67,63,-75,-10,-1,-18, 
  /* [6][0][][] */ 21,33,127,-27,35,-40,-43,26, 
  /* [7][0][][] */ 29,8,-127,-33,-38,96,92,-72, 
  /* [8][0][][] */ -2,127,-29,5,55,105,35,53, 
  /* [9][0][][] */ 3,113,-60,75,26,-92,38,127, 
  /* [10][0][][] */ 2,-127,-14,-30,-83,-119,-63,-74, 
  /* [11][0][][] */ -127,-85,109,47,-5,-75,110,57, 
  /* [12][0][][] */ -26,34,-127,77,22,-59,-79,92, 
  /* [13][0][][] */ 96,-127,90,71,12,32,36,-65, 
  /* [14][0][][] */ -22,78,-33,-125,-34,-127,-35,-59, 
  /* [15][0][][] */ 39,118,39,-21,35,-69,102,-127, 
  /* [16][0][][] */ -107,-127,-57,99,-57,28,-8,72, 
  /* [17][0][][] */ -26,-111,-127,91,-60,75,-48,84, 
  /* [18][0][][] */ -94,-82,-41,107,-5,91,10,127, 
  /* [19][0][][] */ 58,-113,101,-127,17,-70,36,-38, 
  /* [20][0][][] */ 2,64,32,15,39,127,72,-6, 
  /* [21][0][][] */ 25,111,45,-36,34,-71,89,-127, 
  /* [22][0][][] */ 23,16,122,19,-13,127,37,-40, 
  /* [23][0][][] */ -112,-69,38,-78,91,98,-69,-127, 
  /* [24][0][][] */ -98,-94,40,-93,112,106,-60,-127, 
  /* [25][0][][] */ 127,7,-61,-15,10,38,-70,-2, 
  /* [26][0][][] */ -125,-38,-127,-28,-49,-32,20,-7, 
  /* [27][0][][] */ 78,39,0,-62,-127,-26,89,100, 
  /* [28][0][][] */ -127,-83,18,51,-80,-101,7,5, 
  /* [29][0][][] */ 121,83,37,-127,31,15,-50,-97, 
  /* [30][0][][] */ -91,-61,43,-68,73,81,-51,-127, 
  /* [31][0][][] */ 42,38,-6,127,-4,-79,8,11, 
  /* [32][0][][] */ -27,127,-6,35,22,71,-19,46, 
  /* [33][0][][] */ -29,127,-76,20,35,-26,-27,-4, 
  /* [34][0][][] */ -127,-98,-47,82,-13,5,10,109, 
  /* [35][0][][] */ -51,127,-32,4,64,107,56,70, 
  /* [36][0][][] */ 71,35,4,-50,-127,-28,108,119, 
  /* [37][0][][] */ -61,105,20,21,-127,102,-23,-99, 
  /* [38][0][][] */ 46,19,33,20,127,69,109,44, 
  /* [39][0][][] */ -29,-78,38,-15,0,35,-94,127, 
  /* [40][0][][] */ -65,-62,-76,127,-22,1,14,75, 
  /* [41][0][][] */ 127,16,60,109,-57,-23,-4,-28, 
  /* [42][0][][] */ -42,5,-57,-127,46,-107,6,71, 
  /* [43][0][][] */ 23,-6,83,-3,35,127,92,6, 
  /* [44][0][][] */ -30,-27,-61,127,46,12,-40,-35, 
  /* [45][0][][] */ 70,127,107,-122,56,-50,38,-117, 
  /* [46][0][][] */ -27,-127,-44,28,0,41,-60,122, 
  /* [47][0][][] */ 48,50,114,13,94,118,127,-32, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0046646031551063061, 0.003935779444873333, 0.0030837699305266142, 0.0030736285261809826, 0.00070282910019159317, 0.0031460211612284184, 0.0054812468588352203, 0.0022346379701048136, 0.0029628658667206764, 0.005697969812899828, 0.0033124096225947142, 0.0025597764179110527, 0.002215543994680047, 0.003748519578948617, 0.0031034895218908787, 0.003272591158747673, 0.002498292364180088, 0.00083422265015542507, 0.0023228253703564405, 0.0036464498843997717, 0.0040404223836958408, 0.0021259835921227932, 0.0043517951853573322, 0.0034230903256684542, 0.0049514612182974815, 0.0068087824620306492, 0.0033166680950671434, 0.0095207793638110161, 0.0024782551918178797, 0.00072119914693757892, 0.0034088089596480131, 0.0077407732605934143, 0.0040444205515086651, 0.0041085723787546158, 0.0034048072993755341, 0.0034996960312128067, 0.0045373453758656979, 0.0062271645292639732, 0.003989743534475565, 0.0054547516629099846, 0.003444337984547019, 0.0029588977340608835, 0.00331532908603549, 0.0043885000050067902, 0.0043607931584119797, 0.0023813184816390276, 0.0028150011785328388, 0.0031225553248077631, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 1028, -559, -312, 1395, 14962, 2205, -426, 4086, 1637, 1254, 216, 3744, 1373, 605, -790, 426, 3109, 11732, 3478, -565, 1084, -1122, -67, 2277, -260, -836, 1559, -34, 3426, 14112, 2322, -63, 457, -34, 2229, -23, 326, -235, 1066, 1048, 1642, 2383, 362, -414, 624, 2181, 1372, -279, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00045394699554890394, 0.00038301979657262564, 0.00030010443879291415, 0.00029911749879829586, 6.8397494032979012e-05, 0.00030616257572546601, 0.00053342065075412393, 0.00021746913262177259, 0.00028833837131969631, 0.00055451155640184879, 0.00032235507387667894, 0.00024911077343858778, 0.00021561095491051674, 0.00036479614209383726, 0.00030202348716557026, 0.00031848004437051713, 0.00024312728783115745, 8.1184371083509177e-05, 0.00022605129925068468, 0.00035486297565512359, 0.00039320337236858904, 0.00020689517259597778, 0.00042350534931756556, 0.00033312622690573335, 0.00048186327330768108, 0.00066261296160519123, 0.00032276948331855237, 0.00092653738101944327, 0.00024117733119055629, 7.0185218646656722e-05, 0.00033173640258610249, 0.00075331184780225158, 0.00039359246147796512, 0.00039983555325306952, 0.00033134696423076093, 0.00034058128949254751, 0.00044156261719763279, 0.00060601142467930913, 0.00038827143725939095, 0.00053084216779097915, 0.00033519399585202336, 0.00028795219259336591, 0.00032263918546959758, 0.00042707737884484231, 0.00042438099626451731, 0.000231743702897802, 0.00027394856442697346, 0.0003038789436686784, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -60,-100,-14,-22,127,-65,70,-47,-96,-77,-18,-54,112,41,67,-127,57,-29,0,-43,-57,99,-3,23,-24,85,55,-42,79,-73,21,-56,-104,-92,46,68,21,88,118,-70,-127,-19,33,68,54,-127,89,72, -102,-109,-79,49,-82,106,55,-52,-72,38,76,-113,127,100,108,-73,-71,-77,31,-54,-65,97,-70,113,-88,111,97,-122,97,-53,4,-117,-55,-90,77,117,105,127,127,-68,-126,-73,77,76,76,110,81,53, -14,-62,-63,83,-42,-32,22,-4,81,26,53,-75,25,57,-37,-2,-70,-15,29,-44,-20,9,-60,-9,-69,61,29,-78,24,53,119,-71,-5,2,-9,51,73,70,48,-5,-24,94,65,21,37,28,20,-127, 
  /* [0][1][][] */ -106,-102,-12,-83,-80,-87,76,-93,-127,-127,88,-90,81,47,-108,-75,127,-127,-64,-76,-109,127,-30,17,-19,106,103,-63,-107,-74,7,-55,-90,-127,-127,68,51,83,12,-98,51,-15,77,115,82,112,119,-110, -127,-127,-127,-117,-31,127,127,-127,83,64,127,-127,92,127,51,-109,52,-85,-127,-127,-127,126,-127,127,-127,127,127,-127,-127,127,-16,-127,-127,-100,43,127,127,123,-10,-127,92,-106,127,127,127,3,127,113, -66,-83,-120,127,70,-49,46,-23,59,27,18,-39,14,68,49,-39,-15,6,-18,-75,-71,13,-87,-26,-105,61,33,-94,-56,37,127,-90,-54,6,58,73,84,58,-29,-34,35,127,69,18,53,-51,21,16, 
  /* [0][2][][] */ -105,-28,6,27,-41,-34,33,-35,42,-50,14,-65,3,16,-42,-20,-77,-35,94,-25,-36,65,-58,-9,-5,51,79,-25,32,58,-5,-3,-1,-73,-41,35,21,21,-54,-48,23,-13,35,31,31,53,20,-50, -110,-71,-44,-81,92,44,47,-56,101,21,-40,-85,-4,41,-127,-83,38,0,49,-69,-62,68,-72,54,-67,59,72,-30,34,3,-30,-52,-70,-27,-66,49,23,20,-101,-79,23,-52,81,69,41,-112,25,15, -56,-38,-48,-30,-21,-13,21,-22,-62,8,-21,-6,-12,22,9,-31,27,35,-5,-49,-39,2,-18,-34,-56,9,21,-26,-6,-67,54,-20,-71,24,17,36,20,23,-50,-34,-2,55,13,17,19,-10,5,42, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.002841257955878973, 0.0038421456702053547, 0.0067997537553310394, 0.0060794772580265999, 0.030253982171416283, 0.0062371557578444481, 0.0081833647564053535, 0.0047446596436202526, 0.0049429126083850861, 0.0031474768184125423, 0.0029002358205616474, 0.0021667752880603075, 0.0041855857707560062, 0.0027925015892833471, 0.008718651719391346, 0.0068277893587946892, 0.0054072043858468533, 0.015914961695671082, 0.0056471875868737698, 0.0069425720721483231, 0.0044902553781867027, 0.015933485701680183, 0.0057669719681143761, 0.009963497519493103, 0.0058273589238524437, 0.0035138882230967283, 0.0023706085048615932, 0.0045364731922745705, 0.0068021845072507858, 0.038200933486223221, 0.0094931786879897118, 0.0032735078129917383, 0.0044041243381798267, 0.0060198479332029819, 0.0072986716404557228, 0.0026748538948595524, 0.0047798878513276577, 0.0016687414608895779, 0.0048729488626122475, 0.0028451455291360617, 0.0066837924532592297, 0.0056793815456330776, 0.0035276142880320549, 0.0043237041682004929, 0.0033551552332937717, 0.013522463850677013, 0.0029987208545207977, 0.0087760128080844879, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 13729, 6269, 5771, 529, 333, 195, -1160, 27909, -97, 1428, 7303, 61993, 973, 2365, 224, 11123, -1919, 13621, 1228, 8641, 12430, -383, 4081, -9094, 11033, 1693, 2000, 12996, 1072, -699, -10155, 11865, 5544, 2743, 25, 4253, -8244, 13592, -1904, 18566, 115, 142, 2435, 1305, 8, -513, 816, -466, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 6.6853128373622894e-05, 9.04034313862212e-05, 0.00015999420429579914, 0.00014304651995189488, 0.00071185838896781206, 0.00014675660349894315, 0.00019254976359661669, 0.00011163905583089218, 0.00011630382505245507, 7.4058276368305087e-05, 6.8240842665545642e-05, 5.0982947868760675e-05, 9.8484371847007424e-05, 6.5705920860636979e-05, 0.00020514475181698799, 0.00016065387171693146, 0.00012722834071610123, 0.00037446970236487687, 0.00013287500769365579, 0.00016335463442374021, 0.00010565306729404256, 0.00037490556132979691, 0.00013569346629083157, 0.00023443523969035596, 0.00013711432984564453, 8.2679725892376155e-05, 5.5779026297386736e-05, 0.00010674054647097364, 0.00016005140787456185, 0.00089884549379348755, 0.00022336891561280936, 7.7023716585244983e-05, 0.00010362645843997598, 0.00014164348249323666, 0.0001717334525892511, 6.293773913057521e-05, 0.00011246795475017279, 3.9264505176106468e-05, 0.00011465762509033084, 6.6944601712748408e-05, 0.00015726570563856512, 0.00013363250764086843, 8.3002691098954529e-05, 0.00010173421469517052, 7.8944831329863518e-05, 0.0003181756183039397, 7.0558140578214079e-05, 0.00020649442740250379, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -47,-2,30,10,-35,-13,10,7,-42,-7,-63,-57,-26,-63,-9,-31,43,-40,37,42,-12,31,-36,13,1,-40,54,-16,-6,-18,18,11,84,32,36,-127,18,-5,-16,-33,-1,-17,44,49,35,5,24,6, 
  /* [1][0][][] */ -3,38,65,-28,-14,42,-47,-28,2,22,-13,-90,10,86,-17,58,-18,19,-25,-55,11,-82,-25,25,-67,-10,-2,-113,-22,-11,22,-50,52,79,-42,5,127,-37,-2,45,-33,39,-79,-28,111,-21,-31,-26, 
  /* [2][0][][] */ -5,-23,-63,12,-2,44,28,8,-9,37,-2,25,69,-100,15,-56,35,-93,27,37,-22,50,-4,30,-19,64,-19,-70,20,2,16,-67,-49,-97,38,-32,113,20,-15,-64,-6,27,84,29,127,16,25,21, 
  /* [3][0][][] */ 1,21,-72,42,13,-38,-74,-105,13,-21,-38,3,4,29,31,79,-13,14,-38,24,1,-102,26,-58,-82,-11,127,-13,-40,2,-63,15,-6,-80,13,-13,-28,-40,-22,104,-49,-33,2,20,40,6,-42,51, 
  /* [4][0][][] */ -23,-51,-6,6,32,-30,-14,-13,28,-31,60,-77,3,28,10,14,-21,-27,16,-12,-1,-56,2,-20,18,-11,40,49,34,23,-18,31,-13,0,-3,-2,-70,79,32,-28,25,-27,-22,-22,-79,14,127,7, 
  /* [5][0][][] */ 46,-22,2,22,32,-44,37,-127,27,-30,-10,124,-81,71,24,-68,4,-94,18,1,-40,68,-43,-52,-61,84,-26,3,-19,55,-45,-36,23,50,36,-2,-43,-3,-48,-46,17,-35,-47,-9,-36,65,95,18, 
  /* [6][0][][] */ 49,-18,23,-10,-39,-19,-34,22,-41,5,-42,127,-41,-36,-6,56,15,46,13,40,38,-84,-18,16,25,41,-67,5,5,-43,11,37,1,10,-16,0,11,1,-7,-5,-7,-12,40,60,-3,-33,75,-16, 
  /* [7][0][][] */ -26,0,-9,60,28,38,4,26,26,8,76,-2,127,108,64,52,47,48,-13,3,27,-17,-86,-26,14,-1,-24,65,37,-22,-32,-20,35,3,44,-99,-70,40,38,58,-37,34,89,126,-57,-27,-107,64, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0095692658796906471, 0.0051557258702814579, 0.0055635822936892509, 0.0057368502020835876, 0.0085138501599431038, 0.0067684445530176163, 0.0080704344436526299, 0.0055458918213844299, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 7958, 14874, -4435, 8024, 190, 2378, -11691, -20100, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00022515920863952488, 0.00012131119729019701, 0.00013090782158542424, 0.00013498471525963396, 0.00020032588508911431, 0.00015925752813927829, 0.0001898925838759169, 0.00013049157860223204, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 42,127,-79,-75,11,92,8,65, 
  /* [1][0][][] */ 52,-73,45,-127,-52,67,-80,-41, 
  /* [2][0][][] */ -31,127,120,56,119,1,69,0, 
  /* [3][0][][] */ 88,47,-67,59,-10,-100,-127,-31, 
  /* [4][0][][] */ -49,49,16,-84,-28,122,127,58, 
  /* [5][0][][] */ 24,90,-127,-71,47,88,20,-17, 
  /* [6][0][][] */ -6,127,54,48,65,17,11,-71, 
  /* [7][0][][] */ 127,-25,-37,37,24,-10,87,3, 
  /* [8][0][][] */ 69,127,51,76,110,71,84,-91, 
  /* [9][0][][] */ 51,126,-127,-92,17,110,9,82, 
  /* [10][0][][] */ -77,-50,27,-58,-1,-28,-46,127, 
  /* [11][0][][] */ 16,-109,-127,-20,13,-12,31,-11, 
  /* [12][0][][] */ -31,-106,-127,-49,-114,32,-66,45, 
  /* [13][0][][] */ -15,11,-99,105,-127,-19,3,-15, 
  /* [14][0][][] */ -64,-37,-127,-10,35,10,-9,-59, 
  /* [15][0][][] */ 26,-98,-127,12,-122,-42,-60,-2, 
  /* [16][0][][] */ 127,-58,-20,62,-82,26,20,105, 
  /* [17][0][][] */ -16,114,127,-18,-43,-14,-33,-15, 
  /* [18][0][][] */ 21,-127,45,79,9,-83,46,-86, 
  /* [19][0][][] */ 127,-45,-51,46,-99,10,48,100, 
  /* [20][0][][] */ -32,-127,84,79,-10,-86,4,-71, 
  /* [21][0][][] */ -6,-51,-20,-38,127,2,52,15, 
  /* [22][0][][] */ -127,22,-76,54,51,49,-94,-103, 
  /* [23][0][][] */ -79,-45,52,9,-111,127,121,-68, 
  /* [24][0][][] */ -42,48,-18,-47,-35,112,127,-20, 
  /* [25][0][][] */ -65,-115,-127,-60,-89,-16,-39,-43, 
  /* [26][0][][] */ -4,69,-16,127,-93,15,-68,3, 
  /* [27][0][][] */ 16,-127,28,73,15,-54,9,-119, 
  /* [28][0][][] */ 38,90,40,33,127,-31,38,-41, 
  /* [29][0][][] */ 127,30,-27,7,87,-120,-86,25, 
  /* [30][0][][] */ 33,0,29,-127,23,-32,6,-13, 
  /* [31][0][][] */ 46,-42,4,63,-14,33,12,127, 
  /* [32][0][][] */ -99,-61,31,-45,-62,127,56,105, 
  /* [33][0][][] */ -28,53,41,-43,36,127,-110,65, 
  /* [34][0][][] */ 29,127,-99,-52,34,53,-61,54, 
  /* [35][0][][] */ 28,-127,25,61,-32,-62,38,-87, 
  /* [36][0][][] */ -16,-26,-64,1,-127,-52,-20,14, 
  /* [37][0][][] */ -60,-127,76,84,-43,-91,-13,-52, 
  /* [38][0][][] */ -69,23,63,-72,-127,-95,-68,83, 
  /* [39][0][][] */ 91,-127,91,88,-7,-85,-28,-82, 
  /* [40][0][][] */ 5,64,29,54,-127,-16,-61,30, 
  /* [41][0][][] */ 120,126,-93,-127,69,23,9,9, 
  /* [42][0][][] */ -4,-45,-12,15,127,2,49,14, 
  /* [43][0][][] */ 127,16,86,21,-84,-34,60,106, 
  /* [44][0][][] */ 79,49,-28,19,104,-127,-111,21, 
  /* [45][0][][] */ 51,11,12,17,77,-127,-9,-58, 
  /* [46][0][][] */ 55,-32,-8,127,44,58,17,73, 
  /* [47][0][][] */ -47,-68,36,49,-40,17,127,-57, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0030839033424854279, 0.0026081870310008526, 0.00089896423742175102, 0.0029277971480041742, 0.0030073386151343584, 0.0035743371117860079, 0.0022369252983480692, 0.0009998824680224061, 0.0023698336444795132, 0.0029888725839555264, 0.0039831981994211674, 0.0032059014774858952, 0.00073885684832930565, 0.0035680269356817007, 0.0036934150848537683, 0.00065677613019943237, 0.0041762534528970718, 0.0031176533084362745, 0.0035609258338809013, 0.0029844057280570269, 0.002538071246817708, 0.0027566528879106045, 0.0048735607415437698, 0.00062913954025134444, 0.0020784689113497734, 0.0020510582253336906, 0.00085264776134863496, 0.003537042299285531, 0.0023446842096745968, 0.0022901315242052078, 0.0068901469931006432, 0.0050524324178695679, 0.0038555085193365812, 0.003414203180000186, 0.0035938709042966366, 0.0041215899400413036, 0.0028975741006433964, 0.0036983976606279612, 0.0032220317516475916, 0.0030035099480301142, 0.0021929896902292967, 0.0028465492650866508, 0.0029266886413097382, 0.0026695872657001019, 0.0023017122875899076, 0.0040290188044309616, 0.0044361227191984653, 0.0022030477412045002, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 2733, 4481, 15461, 1204, 2333, -1453, 5107, 14207, 3021, -925, 2795, -2179, 18900, -1895, 1736, 23610, -419, 1951, 390, 3016, 4189, 4039, 616, 24914, 5742, 3947, 17874, 1767, 4593, 4478, 623, 1356, 598, 1624, -175, 50, -2941, -574, 2667, 2217, 5447, 2444, 3804, 3895, 4405, 2273, 2196, 5252, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00021493509120773524, 0.00018177965830545872, 6.2654027715325356e-05, 0.00020405514806043357, 0.0002095988456858322, 0.00024911627406254411, 0.00015590428665746003, 6.9687601353507489e-05, 0.00016516743926331401, 0.00020831184519920498, 0.0002776121546048671, 0.00022343784803524613, 5.1495215302566066e-05, 0.00024867645697668195, 0.00025741549325175583, 4.5774533646181226e-05, 0.00029106729198247194, 0.00021728732099290937, 0.00024818154633976519, 0.0002080005215248093, 0.00017689289234112948, 0.00019212710321880877, 0.0003396666725166142, 4.3848380300914869e-05, 0.00014486053260043263, 0.00014295012806542218, 5.9425961808301508e-05, 0.00024651698186062276, 0.00016341463197022676, 0.00015961253666318953, 0.00048021425027400255, 0.00035213329829275608, 0.00026871272712014616, 0.00023795559536665678, 0.0002504776930436492, 0.00028725748416036367, 0.00020194872922729701, 0.00025776276015676558, 0.00022456205624621361, 0.00020933200721628964, 0.00015284215623978525, 0.00019839250307995826, 0.00020397789194248617, 0.00018605899822432548, 0.0001604196586413309, 0.00028080565971322358, 0.00030917910044081509, 0.00015354316565208137, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 19,-51,11,7,-14,-72,-44,68,-33,2,-7,8,44,-1,-5,6,85,1,48,-2,8,-24,-62,13,7,-12,-8,-22,-58,86,-5,-114,53,-13,-70,-63,-9,-41,-10,-5,-15,49,7,4,-13,68,127,-30, -127,-121,-21,127,-62,79,-99,127,23,20,0,-4,50,22,1,-41,-33,53,29,2,5,127,6,127,127,-27,-53,39,72,-126,-2,-93,68,-12,-46,-121,26,5,-76,-18,-127,1,-104,-126,41,58,55,127, -13,1,12,14,-23,65,38,49,5,-42,-10,2,-25,2,-4,8,-65,24,-61,-28,1,-34,127,21,-48,3,-1,24,17,50,19,0,-5,-21,-38,92,10,15,10,84,27,-27,30,-30,-5,30,-15,-7, 
  /* [0][1][][] */ -9,-23,-28,-5,30,-98,127,-81,-3,10,14,32,127,20,7,-27,-33,-40,37,45,71,-71,49,4,-60,127,-73,-23,127,-101,43,-127,-51,-2,-79,6,12,-78,-52,1,124,127,7,-127,-67,-53,1,94, 90,-127,127,-4,127,38,-70,-48,40,127,127,-127,-93,127,127,127,127,127,99,127,127,121,-3,4,108,-93,-127,108,38,127,127,-17,-127,127,127,127,-127,127,-127,-92,42,31,-127,-37,127,-127,-17,96, 16,38,-40,2,-51,127,-117,99,119,-84,12,59,-38,19,14,-58,14,13,-127,18,24,-119,-40,-2,63,-10,-30,127,-79,-39,23,-52,-33,15,96,-18,40,-9,-4,-66,113,-2,33,48,-59,92,106,-79, 
  /* [0][2][][] */ -1,22,7,-31,-14,-77,-16,-4,5,-5,0,-2,-8,-7,5,-1,-53,-3,7,-28,6,-29,89,-10,-105,9,45,-25,10,2,6,21,-24,-20,-59,29,0,-16,11,35,-24,-12,8,-8,-23,24,-4,28, 36,-18,-33,-31,20,5,117,-68,127,-28,-2,1,-66,-10,-12,-70,-15,84,-17,39,16,29,-23,-23,-69,59,74,-19,-92,14,-29,-27,-37,-13,-42,5,53,-27,-7,127,-115,-4,-13,50,32,54,17,-120, -13,35,4,-17,-22,-1,-12,-10,-24,-22,-10,4,20,-6,-2,14,50,36,-35,-14,-9,-35,-49,-9,31,-23,22,-35,-17,8,-13,-1,29,-28,-30,-50,-5,-1,31,24,-7,-10,8,12,-22,-6,74,-49, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.011159038171172142, 0.005640396848320961, 0.031322404742240906, 0.010379386134445667, 0.0095970090478658676, 0.0090262396261096001, 0.0094335209578275681, 0.012788695283234119, 0.0040322663262486458, 0.0094432532787322998, 0.011101370677351952, 0.050131920725107193, 0.018907077610492706, 0.02675468847155571, 0.013451480306684971, 0.031761500984430313, 0.0071032736450433731, 0.003247337881475687, 0.009205235168337822, 0.011803301051259041, 0.010548107326030731, 0.010014968924224377, 0.0034018086735159159, 0.020414885133504868, 0.0074322340078651905, 0.014421463012695312, 0.022942228242754936, 0.0089717423543334007, 0.010243657976388931, 0.014711537398397923, 0.0069187027402222157, 0.0045309066772460938, 0.0049624848179519176, 0.010417614132165909, 0.0062971441075205803, 0.013010384514927864, 0.083502873778343201, 0.013149772770702839, 0.0057238461449742317, 0.0094022611156105995, 0.0081069823354482651, 0.0061577265150845051, 0.011386374942958355, 0.0076673612929880619, 0.015149632468819618, 0.0036743402015417814, 0.002607707167044282, 0.0063033471815288067, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { 47, 11443, -759, -911, 1416, -1553, 2020, -5469, -4829, 143, -4681, -14, -542, -938, -3327, 3234, 7261, 3803, 286, -4460, -8045, 1080, 18974, -4846, -2464, -1438, 6546, -5738, -603, -590, -7571, 12568, 6928, 921, 4492, 23, -18, 12, 12358, -2573, 4857, -2488, 3534, 6027, -692, 9237, -2045, -1802, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00026256561977788806, 0.00013271522766444832, 0.00073699775384739041, 0.00024422086426056921, 0.00022581197845283896, 0.00021238211775198579, 0.00022196520876605064, 0.00030091046937741339, 9.4876857474446297e-05, 0.00022219419770408422, 0.00026120874099433422, 0.0011795746395364404, 0.00044487242121249437, 0.00062952208099886775, 0.00031650543678551912, 0.00074732943903654814, 0.00016713584773242474, 7.640795229235664e-05, 0.00021659377671312541, 0.00027772472822107375, 0.00024819077225401998, 0.00023564633738715202, 8.0042555055115372e-05, 0.00048035025247372687, 0.00017487609875388443, 0.00033932854421436787, 0.00053981714881956577, 0.00021109981753397733, 0.00024102725728880614, 0.00034615382901392877, 0.00016279300325550139, 0.00010660957195796072, 0.00011676434951368719, 0.00024512034724466503, 0.00014816809562034905, 0.00030612669070251286, 0.0019647735171020031, 0.00030940643046051264, 0.00013467873213812709, 0.00022122968221083283, 0.00019075252930633724, 0.00014488768647424877, 0.00026791470008902252, 0.00018040850409306586, 0.00035646194010041654, 8.6455067503266037e-05, 6.1357815866358578e-05, 0.00014831405133008957, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -31,-40,-15,-57,9,-9,79,78,-95,-76,-32,15,-49,-8,-56,38,-76,11,13,127,57,-27,14,85,70,74,24,7,-90,-46,-76,-54,-56,92,37,-58,29,-30,83,-12,32,0,5,-92,35,-33,-32,-70, 
  /* [1][0][][] */ -20,61,-15,-30,-72,67,-19,-45,-37,66,-16,10,54,41,-56,-1,-19,-116,78,-55,127,21,-56,31,71,-7,-88,56,44,-18,66,29,-34,-18,8,-18,2,106,-18,-28,70,32,-8,1,114,5,-35,64, 
  /* [2][0][][] */ -21,-36,127,2,91,-53,-7,28,-38,-6,-14,45,15,-46,-50,-126,-53,-100,-20,13,-101,27,-33,-31,-49,15,2,-53,-38,5,-30,-13,7,-10,23,-10,27,-38,-51,6,31,-38,36,-53,-48,-51,-69,-48, 
  /* [3][0][][] */ 35,15,49,6,17,-28,23,49,-48,-18,48,-25,-61,46,-19,43,55,28,-31,18,-95,-76,127,-2,-2,-6,-63,-27,-52,59,94,-60,-2,-94,-24,31,-16,-61,-19,64,-74,-52,54,-10,-83,-60,54,-9, 
  /* [4][0][][] */ 12,-17,64,-26,7,-15,-3,-8,-51,-1,-26,8,38,-69,36,-91,36,45,-13,-31,11,28,10,8,-4,-1,46,-10,20,22,-127,-12,-25,-19,-3,19,41,2,35,3,-37,-3,-63,26,-21,-87,3,13, 
  /* [5][0][][] */ 22,-48,64,23,29,15,26,-1,-78,-15,-43,27,35,5,11,-48,89,78,5,-19,94,-54,127,-83,-11,51,7,44,17,21,-32,-53,-15,-45,-41,25,43,28,72,20,-87,24,28,26,61,-13,85,2, 
  /* [6][0][][] */ -38,47,-115,84,56,10,31,21,-22,-1,56,-73,-83,-23,-27,33,-108,22,-13,85,24,39,-81,-80,-1,-24,24,76,-35,-42,-32,7,30,76,-48,-20,-14,-3,81,7,67,71,-127,-42,-31,119,-49,-24, 
  /* [7][0][][] */ 40,75,-85,23,19,58,124,69,50,72,-112,-10,-43,6,-69,-58,22,37,127,106,79,11,124,25,99,93,-49,102,-69,34,-11,-77,31,-70,-30,30,4,86,-64,81,-69,50,-3,-88,74,-11,56,-43, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0040327035821974277, 0.0046916375868022442, 0.0064682220108807087, 0.0057112621143460274, 0.0055918204598128796, 0.0053313621319830418, 0.0038049293216317892, 0.0037613613530993462, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 1267, 255, 23347, -2905, 5657, -16027, 742, -13682, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 9.4887145678512752e-05, 0.0001103914764826186, 0.00015219346096273512, 0.00013438264431897551, 0.00013157224748283625, 0.00012544381024781615, 8.9527748059481382e-05, 8.8502623839303851e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 70,33,127,-42,66,98,-78,-49, 
  /* [1][0][][] */ 11,-88,-127,3,51,32,45,6, 
  /* [2][0][][] */ -127,4,-54,-26,52,24,-75,-38, 
  /* [3][0][][] */ 54,66,127,-82,-12,-114,-3,-29, 
  /* [4][0][][] */ -127,13,-62,-38,47,8,-46,-72, 
  /* [5][0][][] */ -98,28,-56,-10,7,35,-81,-127, 
  /* [6][0][][] */ -37,-127,-123,44,101,14,11,55, 
  /* [7][0][][] */ -63,-127,-93,-83,-79,-71,19,86, 
  /* [8][0][][] */ 91,32,-5,6,108,-73,-127,16, 
  /* [9][0][][] */ -45,58,-55,96,-63,-34,127,-33, 
  /* [10][0][][] */ -29,127,36,62,117,-21,-4,51, 
  /* [11][0][][] */ -82,-29,-13,-14,-85,101,127,1, 
  /* [12][0][][] */ 66,33,-127,31,-12,-38,-66,-16, 
  /* [13][0][][] */ 70,-19,-62,12,6,-127,-39,-17, 
  /* [14][0][][] */ 14,-72,80,16,127,-114,-52,17, 
  /* [15][0][][] */ -40,-47,1,127,61,84,-72,31, 
  /* [16][0][][] */ 118,20,-42,20,68,-107,-127,-33, 
  /* [17][0][][] */ 58,127,58,74,44,63,24,-81, 
  /* [18][0][][] */ 31,-32,7,3,127,14,38,-23, 
  /* [19][0][][] */ 18,127,30,13,-110,14,19,-28, 
  /* [20][0][][] */ -38,22,69,-127,19,46,-15,101, 
  /* [21][0][][] */ -29,76,40,-127,33,41,0,121, 
  /* [22][0][][] */ -65,-72,-93,6,-127,103,99,-25, 
  /* [23][0][][] */ 92,22,-127,10,11,-36,-62,-12, 
  /* [24][0][][] */ -50,36,3,0,-19,71,-127,92, 
  /* [25][0][][] */ -97,-61,-127,7,-58,-71,66,98, 
  /* [26][0][][] */ 44,-5,-41,-37,107,-13,127,-43, 
  /* [27][0][][] */ 127,-63,25,99,-4,34,-22,101, 
  /* [28][0][][] */ 35,63,53,-17,127,-54,60,-41, 
  /* [29][0][][] */ -13,-12,-20,-36,-57,8,127,-32, 
  /* [30][0][][] */ 39,-127,-57,-70,-100,2,19,-54, 
  /* [31][0][][] */ 10,31,-8,-14,-127,2,-31,-10, 
  /* [32][0][][] */ 42,-62,-65,78,-9,-79,113,-127, 
  /* [33][0][][] */ 39,127,51,41,39,-20,-28,-13, 
  /* [34][0][][] */ -127,-43,122,-2,-14,116,98,13, 
  /* [35][0][][] */ -29,62,127,-16,-70,-75,-34,21, 
  /* [36][0][][] */ -99,4,114,-7,-12,127,95,28, 
  /* [37][0][][] */ -21,-79,-4,-127,-44,-77,69,45, 
  /* [38][0][][] */ 43,-14,87,-53,54,51,-127,10, 
  /* [39][0][][] */ -24,102,-127,-32,-12,6,14,94, 
  /* [40][0][][] */ 65,-55,21,34,7,-2,7,127, 
  /* [41][0][][] */ -27,80,127,-8,17,105,-70,9, 
  /* [42][0][][] */ 70,-123,-127,-18,-111,8,21,-96, 
  /* [43][0][][] */ 6,-108,19,-97,127,-59,11,34, 
  /* [44][0][][] */ 18,112,127,37,6,50,-67,28, 
  /* [45][0][][] */ -43,33,1,86,-124,69,-127,24, 
  /* [46][0][][] */ -45,-39,59,51,-127,-123,-36,-8, 
  /* [47][0][][] */ -14,40,41,-107,-127,29,-21,46, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0024801159743219614, 0.0031886445358395576, 0.0029533975757658482, 0.0026730387471616268, 0.0021200387272983789, 0.0022707516327500343, 0.0020398192573338747, 0.0016542827943339944, 0.0034050480462610722, 0.0036923661828041077, 0.0022443709895014763, 0.0025739774573594332, 0.0030514115933328867, 0.0029677476268261671, 0.0032851332798600197, 0.001567983883433044, 0.0028542510699480772, 0.0023927914444357157, 0.0014531856868416071, 0.0035778889432549477, 0.0037968514952808619, 0.0028712206985801458, 0.0028123215306550264, 0.0019523759838193655, 0.0028627545107156038, 0.0024013391230255365, 0.003204831387847662, 0.0028131161816418171, 0.0014163261512294412, 0.0038089666049927473, 0.0020371596328914165, 0.0018458861159160733, 0.0024790861643850803, 0.0024898194242268801, 0.0020580694545060396, 0.0031603043898940086, 0.0019580977968871593, 0.0027745466213673353, 0.0025725080631673336, 0.0019746411126106977, 0.002845188369974494, 0.0011753106955438852, 0.0014424414839595556, 0.0027501627337187529, 0.0013519363710656762, 0.002679306548088789, 0.0024543087929487228, 0.0031562538351863623, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 1796, -1262, 931, -1622, 3736, -743, 4017, -3331, 879, 612, 2146, 3004, 497, -530, 650, 5796, -1588, 3411, 7055, 707, -737, 2259, -572, 4377, 1593, 1924, 850, -744, 6719, -316, 2508, -1889, -828, 3262, -1376, 1820, 2813, 947, 695, 4452, 2145, 8194, -4392, 1725, 6919, 104, 2314, 1914, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00022749837080482394, 0.00029249093495309353, 0.00027091198717243969, 0.00024519496946595609, 0.00019446887017693371, 0.00020829361164942384, 0.0001871104323072359, 0.00015174558211583644, 0.00031234140624292195, 0.00033869678736664355, 0.00020587374456226826, 0.00023610818607266992, 0.00027990271337330341, 0.00027222829521633685, 0.00030134175904095173, 0.00014382947119884193, 0.00026181738940067589, 0.00021948818175587803, 0.00013329916691873223, 0.00032819592161104083, 0.00034828111529350281, 0.00026337397866882384, 0.00025797123089432716, 0.00017908935842569917, 0.00026259740116074681, 0.00022027225350029767, 0.00029397575417533517, 0.00025804413598962128, 0.00012991807307116687, 0.00034939241595566273, 0.00018686646944843233, 0.00016932115249801427, 0.00022740391432307661, 0.00022838846780359745, 0.00018878449918702245, 0.00028989132260903716, 0.00017961420235224068, 0.00025450618704780936, 0.00023597340623382479, 0.00018113170517608523, 0.00026098606758750975, 0.00010780998854897916, 0.00013231360935606062, 0.00025226947036571801, 0.00012401166895870119, 0.00024576991563662887, 0.0002251311088912189, 0.0002895197831094265, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -97,83,-127,91,-81,76,-62,90,-81,-70,66,-48,59,-91,-44,-52,85,71,85,-100,110,-127,65,-100,-88,-76,68,114,-103,-52,-75,42,63,-86,65,-87,-75,-98,85,-35,-10,-83,126,-101,118,62,-103,-64, -127,104,-60,108,-67,123,-44,127,-88,-83,88,-60,85,-87,-58,-79,124,108,127,-127,115,-112,90,-124,-127,-100,73,127,24,-105,-93,95,97,-127,93,-87,-81,-120,113,-71,-104,108,121,-85,-39,110,-119,-91, -65,72,-11,31,-3,56,-35,34,-51,-38,38,-27,37,-36,-19,-17,41,44,64,-53,37,-57,32,-58,-78,-43,20,40,88,-68,-31,52,38,-78,30,-13,-13,-30,41,-60,-120,-27,46,-37,-71,71,-54,-77, 
  /* [0][1][][] */ -90,114,-79,108,-68,110,-127,63,-85,-86,83,-88,93,-118,-81,-95,98,89,-51,-93,112,-120,110,-102,-113,-78,88,115,-127,-90,-102,87,98,32,87,-107,-113,-127,101,-84,-106,-127,127,-127,127,66,-115,-91, -126,127,-102,127,-127,127,-127,102,-127,-127,127,-127,127,-127,-127,-127,127,127,-50,-113,127,-93,127,-127,-115,-127,127,115,16,-127,-127,127,127,49,127,-127,-127,-109,127,-127,-127,93,122,-118,-85,127,-127,-127, -63,87,-89,46,-35,42,-64,41,-49,-53,44,-44,48,-53,-73,-21,65,53,-44,-41,24,-51,34,-47,-126,-51,50,48,95,-71,-60,58,47,13,58,-41,-27,-23,67,-79,-53,-64,37,-61,-88,86,-28,-81, 
  /* [0][2][][] */ -49,57,-17,52,-54,47,-85,37,-46,-72,36,-53,15,-61,-40,-70,48,47,-83,-20,47,-47,59,-30,-77,-56,25,25,-68,-91,-13,42,8,59,42,-50,-49,-68,31,-59,-118,-51,14,-105,78,34,-52,-58, -77,71,-98,60,-83,62,-91,31,-67,-73,57,-79,38,-70,-64,-60,77,58,-99,-26,44,-54,54,-52,-68,-64,40,36,5,-101,-41,113,31,72,62,-51,-59,-46,34,-78,-61,78,41,-121,-39,57,-41,-90, -27,65,-93,11,-20,32,-62,9,-28,-29,27,-26,17,-19,-49,-8,44,36,-82,-1,-10,-6,26,6,-57,-22,33,6,64,-38,-42,100,27,43,32,8,-2,-6,17,-56,-14,-20,-5,-20,-45,55,-24,-61, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0035790647380053997, 0.0039702244102954865, 0.0025837330613285303, 0.0054563023149967194, 0.004440362099558115, 0.0033030272461473942, 0.0018850608030334115, 0.009436778724193573, 0.0050479844212532043, 0.0025079566985368729, 0.0029104517307132483, 0.0043741203844547272, 0.0046415836550295353, 0.0043831905350089073, 0.0019856602884829044, 0.0034727191086858511, 0.0046458253636956215, 0.0027569257654249668, 0.0067393621429800987, 0.0018813603091984987, 0.003498191712424159, 0.0029889983125030994, 0.004137545358389616, 0.0049231094308197498, 0.0024834028445184231, 0.0030045462772250175, 0.002990116598084569, 0.0017411959124729037, 0.0097210230305790901, 0.0036249645054340363, 0.002997861709445715, 0.01040832232683897, 0.0057631172239780426, 0.0078571243211627007, 0.0042609418742358685, 0.003911125473678112, 0.0044850730337202549, 0.0022918719332665205, 0.0041150688193738461, 0.0040415669791400433, 0.0023097482044249773, 0.0082161147147417068, 0.0085287969559431076, 0.0032205579336732626, 0.0062182629480957985, 0.0025366051122546196, 0.0015331181930378079, 0.0022675611544400454, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 14295, -1164, 21133, -1137, 13276, -2659, 42803, -72, 10319, 36277, 949, 21733, -2129, 11897, 37127, 25194, -644, 343, 4317, 49757, -1334, 19488, 278, 17826, 19841, 35878, -450, -908, -1523, 16783, 18492, -731, -965, -689, 424, 13950, 9660, 32520, 789, 20437, 29329, 2358, 1083, 17095, 757, 680, 51773, 27881, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 8.421328675467521e-05, 9.3417045718524605e-05, 6.0793721786467358e-05, 0.00012838358816225082, 0.0001044791133608669, 7.7718286775052547e-05, 4.4354372221278027e-05, 0.00022204185370355844, 0.00011877610813826323, 5.901074837311171e-05, 6.848121847724542e-05, 0.00010292047954862937, 0.00010921373177552596, 0.0001031338979373686, 4.6721419494133443e-05, 8.1711041275411844e-05, 0.00010931354336207733, 6.4868843764998019e-05, 0.00015857322432566434, 4.4267300836509094e-05, 8.2310398283880204e-05, 7.0329369918908924e-05, 9.7354008175898343e-05, 0.00011583787272684276, 5.8433008234715089e-05, 7.0695205067750067e-05, 7.0355687057599425e-05, 4.0969316614791751e-05, 0.00022872995759826154, 8.5293286247178912e-05, 7.0537920692004263e-05, 0.00024490171927027404, 0.00013560276420321316, 0.00018487351189833134, 0.0001002574572339654, 9.2026486527174711e-05, 0.00010553112952038646, 5.3926400141790509e-05, 9.6825147920753807e-05, 9.5095696451608092e-05, 5.4347015975508839e-05, 0.00019332034571561962, 0.00020067757577635348, 7.5777832535095513e-05, 0.000146312071592547, 5.9684825828298926e-05, 3.6073368391953409e-05, 5.3354382544057444e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 25,40,21,-35,77,71,-37,58,-18,104,-1,53,-36,34,-12,45,32,79,38,-66,-69,78,-9,51,55,42,36,58,-51,-47,-13,90,-23,8,-72,50,51,-127,-36,10,9,-25,60,-1,-1,-54,-67,-17, 
  /* [1][0][][] */ -49,3,-81,-46,8,84,-58,23,-12,-33,-42,29,53,-10,-29,-31,-33,-28,-17,20,-66,43,-97,-43,-54,-40,47,62,-26,-34,41,-42,8,-56,-32,50,11,-57,127,-38,-29,23,-47,-16,33,52,30,12, 
  /* [2][0][][] */ 10,5,58,-27,-15,-73,19,32,98,73,-71,17,110,-57,127,91,-63,-29,-24,29,79,-73,-31,-98,16,-39,33,-64,36,48,-49,17,35,-26,57,42,-61,4,1,-30,37,30,65,-13,16,-87,89,-57, 
  /* [3][0][][] */ 36,8,-23,-22,36,116,18,-21,42,-50,25,-23,-51,11,10,44,-40,-66,42,-127,-1,1,-30,-17,-44,94,126,66,-12,-36,28,47,54,-31,93,35,-43,-50,8,34,32,15,-23,7,22,24,-8,-22, 
  /* [4][0][][] */ 89,-9,11,-45,88,81,46,15,68,-11,-101,28,42,-23,7,-17,-93,-123,-16,-92,-12,30,-36,-29,-74,127,-101,120,-60,-50,28,88,38,-46,22,-32,-1,14,-21,38,-47,-7,2,54,-48,109,-33,-52, 
  /* [5][0][][] */ -1,-2,-58,6,-15,53,16,-25,62,54,38,89,55,-17,31,-3,-39,127,-23,37,17,2,-66,-13,35,-2,-67,-36,-20,36,21,-18,-44,5,42,15,-45,10,-85,-1,88,-25,21,46,-17,5,-34,31, 
  /* [6][0][][] */ 57,2,17,75,4,-22,108,-52,-6,59,122,105,48,40,-50,65,45,-45,-79,91,47,-52,-42,57,-81,90,83,-2,118,58,-33,1,102,-59,-122,-9,113,37,1,-2,21,61,67,-29,65,127,25,-5, 
  /* [7][0][][] */ -103,-15,-22,23,-67,-64,29,39,84,122,-58,-67,-94,12,-24,-12,-74,95,7,123,-52,44,19,37,-16,-84,-31,-84,25,42,-7,15,-19,12,8,-19,7,-57,127,26,6,44,30,-11,53,74,-33,-1, 
  /* [8][0][][] */ -16,-96,54,-59,66,-62,77,-44,-27,-127,34,6,-44,11,34,24,-5,12,-37,101,12,42,-24,37,68,-8,-74,-37,-126,-11,-49,-118,3,-77,7,82,-18,46,116,23,21,-10,65,127,-10,-72,-46,90, 
  /* [9][0][][] */ 16,-35,15,-60,24,75,-48,54,19,-43,-30,-24,17,-39,107,-20,10,-114,40,51,-71,43,67,-48,-23,-86,-22,71,72,73,-39,-33,-57,40,-15,127,-25,-40,-53,-36,-30,-4,31,106,38,78,-61,18, 
  /* [10][0][][] */ -15,19,-24,-7,19,23,-69,-36,47,39,65,-11,-37,-3,48,-56,-62,127,-6,50,2,-11,28,32,-44,41,3,89,40,7,-33,-12,67,13,-6,24,-10,-48,-39,16,-85,-3,25,-16,12,46,28,26, 
  /* [11][0][][] */ -31,49,-20,38,34,58,0,13,19,16,-127,-70,70,23,-11,-47,1,27,-44,-47,-10,-11,112,6,43,8,-20,37,-12,19,-10,47,25,-7,-48,0,39,80,106,18,22,-40,61,-6,-56,-18,86,-4, 
  /* [12][0][][] */ -65,7,36,19,-58,-52,1,3,-38,-35,-127,18,72,-98,20,35,47,103,91,-122,-27,48,-42,-79,5,-12,34,-26,4,21,-19,80,71,75,39,-29,-52,-22,34,-1,-28,18,60,1,37,-14,-35,-30, 
  /* [13][0][][] */ -63,-119,-47,-99,2,23,57,11,-127,32,116,-57,54,44,111,6,111,24,-4,-75,71,-83,111,3,-76,4,-12,12,-46,-103,-106,11,48,-27,-69,55,34,-58,80,-76,-11,59,65,28,63,-19,105,-65, 
  /* [14][0][][] */ 64,32,-52,4,-31,23,-90,-27,-30,47,52,41,-12,-62,17,-45,47,-106,20,13,83,-52,29,-10,-6,118,-81,15,-64,-28,-92,2,127,46,84,-13,-80,15,-19,54,-12,-47,106,-21,-54,-43,-51,58, 
  /* [15][0][][] */ -67,9,40,26,91,0,2,35,18,68,-9,55,52,-12,-35,-20,15,46,-6,-34,23,-36,-45,-50,49,-62,-35,64,-23,9,19,4,-58,6,127,-7,-85,17,59,-16,-49,-10,20,-5,-36,-35,-8,14, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0055278800427913666, 0.0062468331307172775, 0.0046012992970645428, 0.0059187989681959152, 0.003636358305811882, 0.0060545369051396847, 0.0048697367310523987, 0.0067076478153467178, 0.0048226495273411274, 0.003927178680896759, 0.0063618822023272514, 0.0065919719636440277, 0.0045721661299467087, 0.004356851801276207, 0.0053658988326787949, 0.0054388917051255703, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -3243, 12330, -18978, 363, 10308, -15416, -41235, -9754, -5406, 7585, -15054, -11920, 4800, -11542, -3557, -3737, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00013006776862312108, 0.00014698431186843663, 0.00010826587094925344, 0.00013926585961598903, 8.5561376181431115e-05, 0.00014245969941839576, 0.0001145820424426347, 0.00015782701666466892, 0.00011347411054885015, 9.2404203314799815e-05, 0.00014969134645070881, 0.00015510522644035518, 0.00010758038115454838, 0.00010251416097162291, 0.00012625644740182906, 0.00012797392264474183, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 36,-3,3,62,-127,-20,93,53,63,78,-24,46,11,4,29,77, 
  /* [1][0][][] */ -14,29,-108,-19,127,119,4,17,-10,10,-52,55,-68,89,-68,-57, 
  /* [2][0][][] */ -38,56,67,-12,58,95,-7,30,46,-4,37,-13,49,-127,-15,4, 
  /* [3][0][][] */ 127,-31,17,2,36,58,3,-5,45,17,-66,-40,-46,43,-39,72, 
  /* [4][0][][] */ -89,-30,12,53,-118,-2,-118,-33,6,46,-17,-56,-33,28,-84,127, 
  /* [5][0][][] */ -124,-1,37,8,127,26,7,26,-46,8,-30,-1,-60,45,-99,-30, 
  /* [6][0][][] */ -127,4,-37,13,-6,-52,77,23,14,-29,-52,28,3,0,-56,8, 
  /* [7][0][][] */ 5,97,92,-76,74,37,121,-2,54,-4,-33,51,127,24,-10,4, 
  /* [8][0][][] */ -68,-37,-89,86,-70,88,-61,-67,47,-84,115,31,127,66,-121,22, 
  /* [9][0][][] */ -36,-127,-34,82,-48,-76,-3,81,54,46,11,84,-93,34,-6,-25, 
  /* [10][0][][] */ -54,-85,-63,58,-127,96,39,-73,22,-83,24,-71,45,93,-96,53, 
  /* [11][0][][] */ -58,-75,-21,45,6,98,48,-5,18,16,23,-58,8,127,-90,92, 
  /* [12][0][][] */ -15,-86,-89,94,-105,-127,46,57,79,60,-24,114,2,-81,-28,2, 
  /* [13][0][][] */ -64,-16,-25,-6,-16,1,27,13,-22,127,-10,-24,35,27,17,-17, 
  /* [14][0][][] */ -100,-41,-27,-50,-20,79,-43,-127,105,-40,51,-1,102,-75,-81,-92, 
  /* [15][0][][] */ 5,-127,101,-50,-55,-30,10,51,20,-50,-98,-39,89,-46,-27,-53, 
  /* [16][0][][] */ -23,-33,20,-29,40,39,-9,-26,60,-127,30,-32,-7,-4,-66,-83, 
  /* [17][0][][] */ -10,24,29,-49,17,4,-45,-13,121,-72,31,87,127,-71,-25,-111, 
  /* [18][0][][] */ 75,-8,-25,-127,-5,-33,115,-23,27,43,-24,40,0,47,20,-109, 
  /* [19][0][][] */ -57,-31,-29,-70,-85,33,-32,27,34,-29,27,-127,-28,-6,-59,-17, 
  /* [20][0][][] */ 7,61,62,-89,58,-3,-52,86,-92,-127,38,-95,-47,99,-28,-17, 
  /* [21][0][][] */ 2,-127,-94,-16,97,35,50,97,-57,-58,1,33,71,-95,-12,12, 
  /* [22][0][][] */ 50,-30,53,-29,-12,-11,42,48,44,127,40,44,-17,18,116,-26, 
  /* [23][0][][] */ -127,-84,-27,31,55,57,22,19,2,-5,9,-74,9,59,52,118, 
  /* [24][0][][] */ -21,-3,26,42,8,-74,-10,-72,42,127,-112,76,-37,-47,65,-82, 
  /* [25][0][][] */ 127,-36,95,115,38,-13,-19,38,-120,86,72,-47,-30,42,87,3, 
  /* [26][0][][] */ -20,23,10,43,-59,111,-15,32,-53,-39,-81,28,0,12,50,-127, 
  /* [27][0][][] */ 36,-5,-5,-63,-56,-2,-88,10,-114,-20,-79,-56,-83,44,-24,127, 
  /* [28][0][][] */ -85,14,11,-12,8,4,-127,9,-1,-56,10,-23,-4,-70,-80,-24, 
  /* [29][0][][] */ -39,-127,-42,91,-37,21,122,-3,69,59,-117,73,26,-44,-63,77, 
  /* [30][0][][] */ 34,-53,-52,-6,-127,30,50,-30,24,-13,7,-20,-18,42,3,81, 
  /* [31][0][][] */ -127,-16,4,86,-53,4,-49,-5,-50,-63,15,-38,-36,-73,-33,108, 
  /* [32][0][][] */ -127,-57,-101,1,-99,-34,6,-27,114,40,-44,-61,32,34,21,-7, 
  /* [33][0][][] */ -14,8,-105,49,-127,-83,64,-7,-110,10,-53,-76,-16,113,73,75, 
  /* [34][0][][] */ 45,47,11,58,-68,-59,20,21,32,-127,-15,49,-49,-23,34,72, 
  /* [35][0][][] */ 26,-10,-75,-26,-127,32,112,-31,19,51,-26,-20,26,79,42,75, 
  /* [36][0][][] */ -9,18,-36,58,127,-11,41,58,-70,25,-76,-83,14,-14,-8,15, 
  /* [37][0][][] */ -127,58,-13,-63,36,-85,-57,-39,-10,-20,-9,61,47,-84,6,-125, 
  /* [38][0][][] */ 61,89,42,-37,-77,-54,-127,-90,-42,-41,47,72,-48,-76,57,-5, 
  /* [39][0][][] */ -19,-41,6,66,25,80,75,-48,-22,61,7,-10,-14,127,20,95, 
  /* [40][0][][] */ 82,57,72,91,-63,-58,-18,38,-79,61,18,6,-56,-41,127,-3, 
  /* [41][0][][] */ -27,-20,13,57,-88,127,8,53,-52,28,-120,12,22,36,55,-114, 
  /* [42][0][][] */ 13,-88,35,-8,127,1,83,34,-24,-90,-78,-28,-13,12,-14,27, 
  /* [43][0][][] */ -57,-108,-50,16,108,-4,-2,105,-79,-87,-127,-107,103,-23,-50,59, 
  /* [44][0][][] */ -23,-36,-89,-101,23,89,52,1,-13,-127,-61,78,-54,36,38,117, 
  /* [45][0][][] */ -2,-40,-37,-8,-127,51,-51,-74,44,1,47,-17,-10,14,-52,24, 
  /* [46][0][][] */ 24,-81,-33,6,85,-86,-46,81,19,-33,42,69,-59,-72,66,-127, 
  /* [47][0][][] */ -45,-9,5,79,-19,-7,30,42,-10,127,79,96,-43,63,7,80, 
  /* [48][0][][] */ 45,-18,-79,-76,33,-70,-1,59,48,-77,-4,22,-51,3,-33,-127, 
  /* [49][0][][] */ 35,19,8,41,-3,-33,41,77,-28,127,-34,39,-32,-24,70,91, 
  /* [50][0][][] */ -2,-8,10,-1,-127,-15,-11,-41,54,14,25,46,-30,-65,4,-2, 
  /* [51][0][][] */ 11,-14,-5,-127,-11,90,27,-38,22,14,37,-23,64,76,-8,13, 
  /* [52][0][][] */ 16,-14,-2,-76,62,-107,-17,-36,30,4,127,-42,25,12,-26,88, 
  /* [53][0][][] */ -44,-57,45,-23,-34,-127,6,-80,-11,97,-83,65,-44,-18,17,-74, 
  /* [54][0][][] */ 67,63,53,-41,-127,-38,-87,-94,-2,11,46,72,-58,-54,97,0, 
  /* [55][0][][] */ 13,0,-22,55,-20,27,46,-15,6,127,8,67,16,18,-3,46, 
  /* [56][0][][] */ 17,-115,-34,54,-49,48,-10,66,127,7,22,29,-31,-36,14,56, 
  /* [57][0][][] */ 31,13,83,-74,106,22,-8,6,100,-47,4,103,55,-64,127,-39, 
  /* [58][0][][] */ 74,-42,13,-40,16,-13,-12,127,38,75,5,57,26,13,85,-13, 
  /* [59][0][][] */ -39,19,33,-44,9,-80,-2,15,10,21,-127,-105,-101,-65,76,-19, 
  /* [60][0][][] */ 43,-18,28,31,7,-22,9,-56,15,127,-12,61,-7,-29,0,-38, 
  /* [61][0][][] */ 66,66,18,-4,-78,-127,-20,-58,-67,-13,-39,0,-48,-40,67,68, 
  /* [62][0][][] */ -31,108,-54,43,-87,127,-76,35,-98,22,-46,29,-66,26,55,-108, 
  /* [63][0][][] */ 26,-1,-74,-127,-22,-64,87,19,-29,-101,-21,22,-56,75,30,-53, 
  /* [64][0][][] */ -74,36,-17,-22,41,-45,27,85,-127,-29,-51,-43,-53,90,43,73, 
  /* [65][0][][] */ -74,-6,-46,-14,55,56,-37,-64,-121,-67,23,-22,-127,98,-59,51, 
  /* [66][0][][] */ -24,55,-10,38,-41,127,-28,17,-52,17,-40,35,-38,46,36,-95, 
  /* [67][0][][] */ 8,-6,-59,-19,10,-82,81,-127,-16,17,19,108,-86,-35,-41,-110, 
  /* [68][0][][] */ 19,-127,-26,94,-8,1,43,61,25,28,31,-14,-51,21,-14,-10, 
  /* [69][0][][] */ 5,70,107,-116,56,15,-32,96,27,99,50,109,105,-92,60,-127, 
  /* [70][0][][] */ 53,38,58,-36,91,4,-84,-50,-127,-91,-6,41,-25,80,-86,5, 
  /* [71][0][][] */ -25,-83,23,-54,69,9,57,33,-93,69,-127,-47,31,87,-6,67, 
  /* [72][0][][] */ 31,9,81,-8,-90,-42,-127,-53,-23,70,-54,43,16,104,-119,-36, 
  /* [73][0][][] */ 2,-39,-25,-63,32,-127,41,-44,74,96,114,-21,8,-40,-108,116, 
  /* [74][0][][] */ 1,8,-34,85,-82,-9,93,28,71,64,30,119,127,28,-60,18, 
  /* [75][0][][] */ -24,36,-25,23,-34,127,-23,24,-20,32,-41,50,-20,42,6,-76, 
  /* [76][0][][] */ -33,76,-56,42,-96,4,9,38,55,29,-45,-35,53,-57,-127,18, 
  /* [77][0][][] */ 99,115,-127,118,76,90,74,50,56,6,112,-31,72,41,39,20, 
  /* [78][0][][] */ 8,-51,-5,-62,71,-127,27,-43,55,48,123,-26,3,-32,-58,121, 
  /* [79][0][][] */ -25,71,3,31,-5,-51,-18,-4,-127,-10,46,7,109,48,-61,-39, 
  /* [80][0][][] */ -80,19,60,4,69,52,-24,-127,-51,53,-61,-39,-23,-110,39,64, 
  /* [81][0][][] */ 80,75,-41,-18,33,-26,69,114,-103,127,-57,-42,-51,20,97,119, 
  /* [82][0][][] */ 28,124,-31,-67,-10,-37,127,-117,6,14,-50,68,108,-6,58,-23, 
  /* [83][0][][] */ -13,-39,10,27,7,37,-38,-101,72,-34,104,16,27,-79,-58,-127, 
  /* [84][0][][] */ -127,-84,-45,-50,-9,94,68,-4,77,72,88,103,43,57,-81,18, 
  /* [85][0][][] */ 127,-13,127,-71,79,-17,-42,87,45,124,-74,4,-28,61,104,1, 
  /* [86][0][][] */ -78,62,-37,-8,26,79,15,24,85,36,127,-25,-30,55,-13,-18, 
  /* [87][0][][] */ 12,-65,24,-45,47,-127,28,-38,54,-11,68,-36,37,-48,-42,72, 
  /* [88][0][][] */ -82,55,37,-5,127,-24,38,33,-74,-52,89,-56,71,119,83,-122, 
  /* [89][0][][] */ -37,41,-27,21,-36,127,-14,36,-54,11,-34,14,-15,52,12,-82, 
  /* [90][0][][] */ 50,-79,22,10,124,-6,62,21,-21,-89,-127,-32,-5,-9,-76,22, 
  /* [91][0][][] */ -13,53,-31,-36,-13,-70,-116,30,-67,23,-68,-72,-127,-75,12,11, 
  /* [92][0][][] */ 44,35,57,13,-127,-73,13,20,-33,31,-15,-23,-39,-82,31,3, 
  /* [93][0][][] */ -20,-93,-125,51,-52,-33,3,127,101,52,34,44,-88,41,-31,-20, 
  /* [94][0][][] */ 84,8,127,-25,24,-41,10,39,11,91,3,61,2,10,102,-11, 
  /* [95][0][][] */ -70,-62,-33,-12,127,-33,37,90,-68,-12,-121,-51,13,13,-53,37, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0051627340726554394, 0.0020755135919898748, 0.0066080954857170582, 0.0041088066063821316, 0.0019981723744422197, 0.0015217250911518931, 0.004755853209644556, 0.0021951748058199883, 0.00091758917551487684, 0.0028703333809971809, 0.00096282520098611712, 0.0021579479798674583, 0.0034796369727700949, 0.0067720701918005943, 0.002322689164429903, 0.0022625976707786322, 0.0039387904107570648, 0.0030197086744010448, 0.00256175990216434, 0.0013226312585175037, 0.004652736708521843, 0.0017908901209011674, 0.0030392778571695089, 0.0028957647737115622, 0.001556545146740973, 0.002526408527046442, 0.0034779869019985199, 0.0041762464679777622, 0.0019248889293521643, 0.0034594363532960415, 0.0031025316566228867, 0.0019930962007492781, 0.0034049705136567354, 0.001534966635517776, 0.002771696774289012, 0.0025427921209484339, 0.003102864371612668, 0.0039149024523794651, 0.0024260398931801319, 0.0029263508040457964, 0.00097500416450202465, 0.0034192833118140697, 0.0027257329784333706, 0.0022041439078748226, 0.002569983247667551, 0.001840749173425138, 0.0016742970328778028, 0.0019484111107885838, 0.0046922443434596062, 0.0040074898861348629, 0.0037727497983723879, 0.0029471165034919977, 0.0036842408590018749, 0.0024044392630457878, 0.0016538276104256511, 0.00625977898016572, 0.0029729327652603388, 0.0012179054319858551, 0.0026243892498314381, 0.0035695512779057026, 0.0027933630626648664, 0.001592740067280829, 0.0021587593946605921, 0.0045588486827909946, 0.0010016926098614931, 0.0011186222545802593, 0.0040095765143632889, 0.0031717561651021242, 0.0025985247921198606, 0.0016485328087583184, 0.0041950293816626072, 0.0023031672462821007, 0.0024619728792458773, 0.0026774618308991194, 0.004527741577476263, 0.0040497290901839733, 0.004031929187476635, 0.0014197739074006677, 0.0028818175196647644, 0.0027682038489729166, 0.0029519794043153524, 0.0029634975362569094, 0.0020607286132872105, 0.0012518614530563354, 0.0029062177054584026, 0.0011882220860570669, 0.0018570916727185249, 0.0039355014450848103, 0.0040183113887906075, 0.0037598249036818743, 0.0024331451859325171, 0.0018962639151141047, 0.0033003466669470072, 0.0020826912950724363, 0.0018019063863903284, 0.0022516378667205572, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1076, 5693, 148, 1760, 5699, 9349, -89, 2711, 16223, -1010, 15236, 3867, 1376, 550, 4171, 437, 2353, 3633, -490, 11376, 879, 7583, -1132, 1116, -8287, 1589, 2603, 1581, 7861, 1276, 2979, 4543, 1995, 9251, 3310, 4344, 3078, 1843, 3025, 2840, 16421, 1167, 2351, 1672, 2097, 7544, 7314, 6451, 818, -912, 2025, 4072, 2155, -2659, 7456, 39, 2073, 12251, 1456, 1081, 2854, 9381, 5105, 129, 16630, 13283, 1767, 3136, 5067, 5329, 2038, 1649, -4089, 3942, 1171, 2426, 95, 9826, 3468, 5115, 2663, 936, 4022, 12874, -186, 10099, 6241, 1768, -748, 2512, 1356, 7241, 2579, 3843, 5279, 4633, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00030992247047834098, 0.00012459450226742774, 0.00039668849785812199, 0.00024665446835570037, 0.00011995165550615638, 9.135020081885159e-05, 0.00028549710987135768, 0.00013177785149309784, 5.5083506595110521e-05, 0.00017230807861778885, 5.7799054047791287e-05, 0.00012954309931956232, 0.00020888498693238944, 0.00040653199539519846, 0.00013943262456450611, 0.00013582529209088534, 0.00023644827888347208, 0.0001812751725083217, 0.00015378420357592404, 7.9398458183277398e-05, 0.00027930695796385407, 0.00010750835645012558, 0.00018244993407279253, 0.00017383473459631205, 9.3440467026084661e-05, 0.00015166202501859516, 0.00020878593204542994, 0.00025070292758755386, 0.00011555240052985027, 0.00020767233218066394, 0.00018624709628056735, 0.00011964693112531677, 0.00020440270600374788, 9.2145099188201129e-05, 0.00016638684610370547, 0.00015264554531313479, 0.0001862670760601759, 0.0002350142749492079, 0.00014563683362212032, 0.00017567083705216646, 5.8530167734716088e-05, 0.00020526190928649157, 0.00016362761380150914, 0.00013231627235654742, 0.00015427784819621593, 0.00011050143075408414, 0.00010050919809145853, 0.00011696445289999247, 0.0002816786291077733, 0.00024057236441876739, 0.00022648075537290424, 0.00017691741231828928, 0.00022116750187706202, 0.00014434012700803578, 9.9280405265744776e-05, 0.00037577882176265121, 0.00017846719129011035, 7.3111696110572666e-05, 0.00015754388005007058, 0.0002142825978808105, 0.0001676874962868169, 9.5613278972450644e-05, 0.00012959180457983166, 0.0002736707974690944, 6.01322935835924e-05, 6.715166091453284e-05, 0.00024069762730505317, 0.00019040268671233207, 0.0001559912197990343, 9.8962555057369173e-05, 0.00025183046818710864, 0.00013826070062350482, 0.00014779392222408205, 0.00016072986181825399, 0.00027180343749932945, 0.00024310800654347986, 0.00024203945940826088, 8.5229999967850745e-05, 0.00017299747560173273, 0.00016617716755717993, 0.00017720933828968555, 0.00017790078709367663, 0.00012370695185381919, 7.5150099291931838e-05, 0.00017446224228478968, 7.1329784987028688e-05, 0.00011148248449899256, 0.0002362508384976536, 0.00024122197646647692, 0.00022570486180484295, 0.00014606336480937898, 0.00011383402306819335, 0.00019812207028735429, 0.00012502538447733968, 0.00010816967551363632, 0.00013516735634766519, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -29,-2,13,-40,86,-9,43,-20,-6,-4,-11,-47,-40,1,-7,-12,-16,2,1,-22,3,26,-6,45,-6,9,-11,1,15,-6,20,6,-5,3,-5,-35,-8,-96,-45,4,3,6,20,-18,-29,34,-64,-13,-37,6,-1,42,-58,23,18,-19,-18,-15,11,-5,-5,-12,-2,-43,-26,-26,-44,-41,-19,25,-18,-3,33,2,-8,-4,-31,11,127,-38,-78,30,-123,-30,-21,-19,15,13,-18,-12,31,-50,-2,26,-12,1, -2,47,74,-61,-43,-8,127,-60,-2,-1,-36,4,-51,4,-69,69,-13,73,120,-40,12,127,54,127,32,-3,73,91,111,37,127,-26,-113,-14,-83,-41,-8,-127,127,-42,-28,-105,-26,-35,67,-36,-35,-6,45,3,20,127,-85,52,-126,-13,-103,-13,-1,27,-14,-121,-121,-94,-78,-3,-6,-110,-17,18,-127,113,-127,-9,-3,-23,-127,-70,-4,-108,-127,5,-5,-71,127,79,-48,29,-127,-2,47,-18,5,99,-55,-83, -3,15,-3,-21,58,-5,60,-32,-24,22,-9,12,-6,6,-6,-36,-10,-3,-29,-30,-8,6,-2,38,-9,-5,-6,-8,4,8,6,12,5,3,-23,56,-5,-104,-26,9,-3,6,20,-12,-23,-37,-75,-21,-12,-1,-1,28,19,27,-4,-21,28,-23,12,-14,0,-5,-58,-62,-36,-44,127,-32,-7,17,-20,3,18,6,1,16,-19,27,-38,-31,-58,5,-127,-21,26,-24,7,-7,-71,-53,19,54,-3,25,-17,12, 
  /* [0][1][][] */ -90,-2,47,-62,35,91,-39,-8,-3,-6,-29,-17,-127,13,19,75,-20,25,120,17,32,-27,123,-15,36,51,90,26,-19,2,-8,-20,-117,-14,51,-36,-16,-98,-63,-127,-9,6,71,-11,-81,127,-95,-72,61,61,22,-39,-98,81,66,-35,33,-32,43,4,17,-3,98,-92,-47,7,-22,-43,-7,-3,-115,19,80,127,14,-63,-80,-62,-57,-50,-58,15,-45,-64,41,19,-100,58,-67,127,96,-98,127,-4,-21,-4, 60,127,127,127,-127,-127,74,-51,127,127,-80,-65,-109,127,-27,127,127,-127,127,127,127,-102,127,-89,-127,-127,127,127,-127,127,-18,127,-122,127,127,-96,127,38,0,2,127,-8,-127,-90,127,-20,127,127,127,-127,127,-100,101,127,-127,127,-127,127,-127,127,-106,127,99,-127,119,127,-13,127,-100,-127,16,-127,14,108,127,60,31,-127,93,-127,26,127,106,127,115,67,-127,127,-56,57,-14,-9,-80,-35,-127,-27, -127,-15,59,-63,17,49,-38,5,-36,-22,-3,127,-103,18,17,57,-23,40,111,7,22,-26,82,-8,43,15,31,14,-20,-1,18,-10,-89,-29,64,127,-9,-110,-67,-90,-20,-30,23,-19,-78,-74,-89,-96,64,63,-1,-16,127,22,121,-58,103,-34,54,-28,1,-28,-127,-47,-84,-29,-49,-71,-15,8,-121,-2,44,-86,10,127,-77,-56,-49,-13,-47,-4,-74,-79,11,33,-77,51,-60,-95,127,127,-50,-26,-36,-1, 
  /* [0][2][][] */ -40,-37,4,-33,22,3,-9,25,-10,20,29,-26,34,5,-1,-22,0,-18,-72,-31,0,-9,41,-20,-6,17,0,23,-8,-10,-39,1,26,0,-1,-44,-7,-33,-22,-11,-22,-11,20,32,12,2,-78,4,-29,-4,-2,-26,-13,-20,39,-12,5,-21,16,-1,9,27,12,-19,-51,-31,110,32,25,28,-29,14,-20,9,-14,-25,-35,22,-33,-31,-34,18,-86,-21,-32,-14,25,-10,-4,-11,-27,-29,-2,-22,-2,2, -34,-49,39,-81,-44,15,21,127,-49,74,127,-10,-44,4,127,125,-3,-52,99,-54,-27,-43,114,20,18,3,53,28,-21,5,-103,-43,-127,-27,-90,2,-82,-89,52,-59,-29,-127,-33,127,14,-27,-32,8,39,-12,7,-18,55,41,-62,-45,-60,-51,39,-39,127,28,99,6,-127,-60,-27,-38,127,37,-63,21,14,-33,20,-21,-12,-19,-6,-3,-89,-19,-73,-41,35,-127,-22,8,-75,3,22,-8,12,-127,-61,127, -36,20,-11,10,28,-5,-19,8,-20,4,16,50,31,-3,5,-22,0,3,2,-29,4,4,22,-10,15,5,-2,13,-14,-1,-43,1,16,3,-6,1,-10,-63,-23,14,-27,-8,16,38,4,-8,-87,17,-4,-15,3,-20,-1,-17,37,-12,66,-9,17,-14,5,19,-21,-20,-40,-38,-32,17,28,19,-62,11,-35,-44,-13,8,-25,20,88,-30,15,7,-60,1,-32,-3,34,-4,-30,-9,-34,7,-4,-23,3,8, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0050238380208611488, 0.01090725976973772, 0.0064205066300928593, 0.007967640645802021, 0.011844687163829803, 0.021502649411559105, 0.0061983983032405376, 0.0093343993648886681, 0.016289116814732552, 0.011282834224402905, 0.012342738918960094, 0.008394136093556881, 0.0043625044636428356, 0.0082834912464022636, 0.009940694086253643, 0.0056731700897216797, 0.011169219389557838, 0.011839750222861767, 0.004304863978177309, 0.018364729359745979, 0.0099642816931009293, 0.011679895222187042, 0.0034777906257659197, 0.010156854055821896, 0.095467813313007355, 0.0090683717280626297, 0.0084186326712369919, 0.0057351728901267052, 0.01597151905298233, 0.0080249207094311714, 0.0079961102455854416, 0.014534763991832733, 0.0025600849185138941, 0.019197745248675346, 0.0076860971748828888, 0.0081201866269111633, 0.015190106816589832, 0.0035000275820493698, 0.010126566514372826, 0.0066313128918409348, 0.027542624622583389, 0.0078231701627373695, 0.011857175268232822, 0.0080250976607203484, 0.0068066725507378578, 0.012866090051829815, 0.0058083715848624706, 0.013146150857210159, 0.0069974255748093128, 0.017043260857462883, 0.0105222063139081, 0.008992563933134079, 0.0066171865910291672, 0.0093040484935045242, 0.0094976043328642845, 0.010616208426654339, 0.0069303121417760849, 0.018141090869903564, 0.018005521968007088, 0.012164504267275333, 0.012207384221255779, 0.012954582460224628, 0.0070111760869622231, 0.0050154794007539749, 0.0085624167695641518, 0.016732746735215187, 0.0049867737106978893, 0.0056549953296780586, 0.0092707341536879539, 0.014800542965531349, 0.004606825765222311, 0.012535117566585541, 0.024948766455054283, 0.0080778421834111214, 0.0072560473345220089, 0.0088573116809129715, 0.0037186569534242153, 0.0075231930240988731, 0.0057196621783077717, 0.0059753106907010078, 0.0047232555225491524, 0.010472401976585388, 0.0040211486630141735, 0.014281716197729111, 0.0046529434621334076, 0.013665995560586452, 0.0058793150819838047, 0.01103924959897995, 0.0049286452122032642, 0.0082193827256560326, 0.0051993252709507942, 0.0093024484813213348, 0.0120376106351614, 0.0086696045473217964, 0.005115460604429245, 0.012515190988779068, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 9343, -2754, -7186, 7040, 680, 627, 888, -933, 1962, -4558, 284, -2132, 10729, -3053, -2871, -8225, -301, 1861, -12754, 1138, -3502, 1455, -7679, -1527, 19, 4750, -13002, -7674, 2835, -3224, 741, -953, 20547, -443, -728, 609, 282, 16161, 3005, 9326, -918, 5687, 1361, 2671, 2229, 1127, 11141, 573, -7123, 119, -5164, -390, -1076, -5280, 821, 3249, 1930, 3271, -436, -448, -729, -794, 40, 12249, 16092, 2509, 14909, 10771, -1257, -826, 13475, -1771, -35, 416, -3250, -236, 16116, 9353, 10106, 17084, 11354, -3023, 10609, 8268, -1252, -1204, 10779, -7313, 10547, 1469, -7371, 70, -272, 3001, 14448, -2273, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.0001102716923924163, 0.00023941099061630666, 0.0001409281394444406, 0.00017488726007286459, 0.00025998722412623465, 0.0004719765274785459, 0.00013605292770080268, 0.0002048871829174459, 0.00035754108102992177, 0.00024765473790466785, 0.00027091932133771479, 0.00018424869631417096, 9.5755625807214528e-05, 0.00018182008352596313, 0.00021819517132826149, 0.00012452433293219656, 0.00024516091798432171, 0.00025987887056544423, 9.4490438641514629e-05, 0.0004031001590192318, 0.00021871291392017156, 0.00025637011276558042, 7.6336429629009217e-05, 0.00022293980873655528, 0.0020954890642315149, 0.00019904796499758959, 0.00018478638958185911, 0.00012588527170009911, 0.00035056992783211172, 0.00017614453099668026, 0.00017551214841660112, 0.00031903359922580421, 5.6193075579358265e-05, 0.00042138458229601383, 0.00016870746912900358, 0.00017823559755925089, 0.00033341816742904484, 7.6824529969599098e-05, 0.00022227501904126257, 0.00014555527013726532, 0.00060455210041254759, 0.00017171617946587503, 0.00026026135310530663, 0.00017614841635804623, 0.00014940436813049018, 0.00028240671963430941, 0.00012749196321237832, 0.00028855397249571979, 0.00015359133249148726, 0.00037409432115964592, 0.00023095918004401028, 0.00019738401169888675, 0.00014524521247949451, 0.00020422099623829126, 0.00020846948609687388, 0.00023302249610424042, 0.00015211821300908923, 0.00039819136145524681, 0.00039521566941402853, 0.00026700712624005973, 0.00026794831501320004, 0.00028434908017516136, 0.00015389315376523882, 0.00011008822912117466, 0.00018794240895658731, 0.00036727864062413573, 0.00010945814574370161, 0.00012412540672812611, 0.00020348976249806583, 0.00032486734562553465, 0.00010111840674653649, 0.00027514196699485183, 0.00054761773208156228, 0.00017730615218169987, 0.00015926800551824272, 0.0001944152609212324, 8.1623373262118548e-05, 0.00016513177251908928, 0.00012554481509141624, 0.00013115622277837247, 0.00010367399954702705, 0.00022986599651630968, 8.8262975623365492e-05, 0.00031347927870228887, 0.00010213067434960976, 0.00029996439116075635, 0.00012904914910905063, 0.00024230813141912222, 0.00010818224109243602, 0.00018041291332338005, 0.000114123584353365, 0.00020418588246684521, 0.0002642218314576894, 0.00019029514805879444, 0.00011228278162889183, 0.00027470459463074803, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 20,33,37,15,-26,-75,-6,-8,-15,-73,21,1,55,-55,54,27,-82,-32,34,27,86,29,-59,22,-10,71,127,78,9,74,53,-45,7,-2,-11,-31,22,0,-23,-2,113,20,23,-4,-9,-3,-5,-44,17,-11,90,-13,-55,-4,51,26,-19,-48,28,12,-5,41,-44,2,28,11,52,34,5,-21,24,29,18,50,6,39,61,-30,37,36,-5,47,37,40,-40,9,-15,70,25,18,-92,1,26,16,108,75, 
  /* [1][0][][] */ 20,45,-68,-17,2,-52,114,-76,-76,-32,-79,-66,-19,-59,-23,-63,-23,-29,-31,-36,-15,-89,122,-35,17,17,-2,72,-60,0,-45,15,-37,15,19,5,-20,36,-71,111,21,19,-6,-61,69,-66,-25,38,-72,-9,47,-105,-46,53,64,51,20,17,-75,13,-66,-6,-19,-31,26,19,115,-14,-55,-127,-10,17,38,61,-34,25,-64,-25,115,-44,34,-22,42,-80,-31,-58,-14,10,-9,-49,31,-13,74,-53,-39,51, 
  /* [2][0][][] */ 7,-18,34,-21,53,46,-58,20,-50,33,25,-15,40,3,23,32,19,-23,-127,12,-20,-43,-9,23,-3,-9,-42,24,-40,-21,-10,70,-13,-28,-13,9,-49,4,-23,-16,67,11,6,59,5,61,-2,-18,-90,25,-22,7,-19,49,24,-54,26,11,66,34,-11,-6,-10,61,48,7,-37,-1,-5,9,-19,-39,28,49,26,68,-47,-5,-25,-22,44,41,54,-11,-8,-48,-14,-46,-10,-30,-13,80,5,-3,87,-26, 
  /* [3][0][][] */ 37,-38,-4,-127,-24,-32,120,-30,34,118,-63,-13,8,-8,-22,64,51,47,-22,38,-48,27,34,22,-51,76,59,4,-42,-7,-56,61,5,-5,27,-36,-14,-69,-38,56,18,12,-16,46,61,-46,-2,24,38,-9,28,-43,112,41,42,-3,-6,-20,13,-39,-31,44,88,8,-16,-13,120,-27,-29,-14,-45,31,21,-65,5,-69,24,-43,126,13,-4,-49,-36,-36,-23,-39,73,83,-41,52,-53,25,14,-69,-21,50, 
  /* [4][0][][] */ -30,74,42,0,-27,6,-6,-13,19,-40,2,-20,21,42,-26,24,-15,-43,-10,-66,33,-21,-60,33,-34,-31,-17,27,-41,127,-47,-11,8,-33,6,-36,50,29,-46,0,23,7,20,-26,-42,2,51,-24,19,-8,-56,-6,-68,11,59,14,-1,57,-10,21,-41,-63,-14,9,60,29,-52,-7,6,-12,16,-55,-3,59,52,64,-32,19,-51,53,25,65,29,-53,52,-63,-29,-63,-36,-48,-42,2,6,20,37,-17, 
  /* [5][0][][] */ -5,-17,59,-26,-26,-18,-11,-1,47,14,-10,-1,-21,-26,26,-19,-18,4,-50,-24,-14,22,-13,20,15,-47,78,-10,-4,42,16,82,-2,-79,25,6,-50,-40,-45,-4,-45,3,-21,27,0,24,-80,19,-22,32,58,-12,34,-75,7,13,-31,-59,23,-33,44,32,31,61,-29,24,105,-23,-3,-25,16,20,9,38,44,15,-3,-12,127,55,-20,-6,-25,35,54,70,3,106,7,-29,-10,27,8,-10,-31,32, 
  /* [6][0][][] */ 35,-68,87,6,-47,127,-84,-97,-12,-86,-81,85,24,15,-39,95,-3,36,23,-13,-117,-49,-82,-83,-1,-61,-9,68,-126,43,-25,-31,50,98,-12,-5,-22,-31,39,-35,-43,32,55,-30,9,62,-80,-20,37,12,-74,-126,80,26,-34,-7,44,-15,30,-13,-5,-38,44,17,69,-77,-79,-60,-95,37,-20,-86,-17,-100,19,-102,105,11,-78,49,-52,79,20,-84,59,-53,-15,8,-67,79,-86,100,45,-58,68,-105, 
  /* [7][0][][] */ -12,0,-64,51,-33,-2,50,-7,-95,7,65,55,4,-52,-27,-25,-14,-21,9,9,-61,-17,-27,-14,58,42,4,70,-11,39,29,28,-46,-127,35,101,-8,29,-39,-7,16,-7,11,-81,37,65,81,77,-24,56,-65,17,28,-52,55,-62,-8,42,-69,-6,48,13,20,-44,81,-43,113,6,-42,-20,82,16,6,-40,-91,-34,41,-48,102,-23,1,-4,-64,-8,46,18,-70,55,-30,26,19,46,66,-24,81,2, 
  /* [8][0][][] */ -1,-56,8,7,-20,-8,22,-17,-13,-5,48,33,7,25,-28,-11,72,2,5,-7,-11,-71,-36,-23,-19,-30,63,2,-18,42,12,-29,-17,0,-2,13,-34,-13,23,-20,-9,34,31,-41,16,-27,29,-5,35,-6,40,10,-9,5,-38,-3,-22,99,-51,-3,-3,-77,-61,-2,-80,-30,-13,11,0,8,44,-18,-22,-127,36,-95,9,10,-54,16,-22,-10,14,55,56,-64,-37,39,-38,77,14,-14,-51,-5,1,-58, 
  /* [9][0][][] */ -33,-36,-26,23,-9,19,23,28,-42,5,61,59,-37,56,16,-42,-15,29,-13,-27,5,38,-5,14,-26,27,-3,25,31,-12,25,-7,-22,-9,15,52,-36,-18,20,10,-2,-28,17,13,7,45,1,25,-31,10,-4,38,124,21,-7,-1,7,-12,37,18,-36,-12,76,-4,13,16,62,1,38,1,-17,26,10,-124,-37,-127,-33,-1,37,-2,12,19,10,-39,44,16,-49,-9,3,101,27,36,52,33,-6,36, 
  /* [10][0][][] */ 14,36,4,3,-9,18,-37,-18,58,8,-37,17,14,3,-11,-56,-31,0,15,-7,27,-17,-22,-33,12,-15,-95,42,-16,46,-3,13,15,22,-17,13,16,10,10,4,34,-8,57,-49,-28,-3,17,30,24,0,7,-20,-19,-13,-5,28,-10,4,-19,-6,-15,-39,-12,1,-10,-20,-88,-31,-54,-12,35,-14,-25,26,29,13,45,-15,-91,4,-11,25,-4,-7,1,8,-66,-127,-22,20,7,8,47,-34,19,22, 
  /* [11][0][][] */ 11,-43,-15,20,-45,25,14,5,68,-15,-33,-39,23,2,-3,-13,-21,38,23,-72,10,27,11,-38,36,16,53,-1,32,-62,-17,16,13,99,-109,13,26,8,68,7,-56,52,-26,5,-39,1,-4,2,51,-26,-26,-8,-6,14,-85,87,-32,5,-18,-22,19,-8,-14,-81,-17,-47,-127,-71,-3,-44,-94,22,47,13,-12,-11,31,55,-116,-46,-11,-8,-13,0,-33,-11,55,74,13,-44,3,-4,-36,26,86,24, 
  /* [12][0][][] */ 21,28,-21,-31,5,-26,-1,40,67,-40,21,9,4,-14,-8,8,10,-45,-26,29,12,57,11,56,-46,-36,-127,-11,76,-28,31,-1,-13,-71,68,-11,21,-22,-8,13,5,-55,19,47,47,3,34,-17,-83,13,-50,94,86,-22,36,-76,2,24,-23,-37,23,59,98,19,-5,-7,31,32,108,29,28,32,18,-9,-9,5,-31,-63,46,-61,30,-46,32,-29,12,0,-1,-105,-12,43,-44,41,15,76,11,54, 
  /* [13][0][][] */ -16,6,-63,22,24,27,-11,10,34,65,-32,60,-43,-23,48,-49,12,48,61,38,-27,-53,-6,16,29,56,-21,25,3,31,52,-13,-15,69,-6,38,0,-26,-43,-65,15,-10,29,22,43,58,-15,34,-52,44,10,-6,-2,-44,68,30,11,-47,0,-10,25,21,19,-23,17,88,127,49,21,0,-50,-15,41,50,-82,52,24,-69,124,-34,-4,-40,19,18,23,48,-37,-22,-16,-16,8,51,38,19,64,60, 
  /* [14][0][][] */ -8,57,46,20,-64,-42,11,36,-71,-30,74,24,-75,2,79,-23,-45,29,-61,41,-22,26,-90,21,-69,7,-50,-109,11,1,33,79,-55,26,3,-24,-40,-82,-19,-47,39,-29,55,-7,-20,60,-82,16,-25,-26,87,19,-7,32,-28,41,-66,32,14,34,42,72,-1,62,30,-41,-5,-62,33,59,77,29,-54,52,19,21,33,-11,34,35,-59,117,6,-127,99,-13,-11,16,-101,-7,-20,13,-27,24,47,46, 
  /* [15][0][][] */ 62,-38,3,39,44,7,-27,-18,15,40,-68,-17,64,47,9,-12,0,1,-73,45,-11,-29,18,12,63,-37,70,10,43,-27,-39,66,56,52,-2,-66,66,88,80,52,86,41,-28,7,-43,-125,46,-29,-31,-34,-10,-4,-3,-47,-46,52,-23,5,-20,22,9,-59,-42,17,30,44,-79,47,-15,-36,-6,-12,-17,-127,-36,-111,-28,14,-124,19,85,-46,50,28,-62,-15,-5,-27,30,92,8,-77,-34,-35,33,-42, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0048688659444451332, 0.0023862072266638279, 0.0031177783384919167, 0.0025714782532304525, 0.0038488886784762144, 0.0055418452247977257, 0.0024518629070371389, 0.0027240421622991562, 0.005054280161857605, 0.004274813923984766, 0.0048195021227002144, 0.0031817066483199596, 0.0031422458123415709, 0.0036948546767234802, 0.0033092433586716652, 0.0032520284876227379, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -30468, -1037, -1113, -22525, 7359, -19562, 20103, -15142, 12835, -10674, 15477, 15856, -9761, -33357, -5972, 11184, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.00011456155334599316, 5.6146054703276604e-05, 7.3359493399038911e-05, 6.0505371948238462e-05, 9.0562090917956084e-05, 0.00013039636542089283, 5.7690893299877644e-05, 6.4095111156348139e-05, 0.00011892423935933039, 0.00010058385669253767, 0.00011340004857629538, 7.4863688496407121e-05, 7.393519626930356e-05, 8.6937761807348579e-05, 7.7864548075012863e-05, 7.6518321293406188e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -34,60,-3,-23,-29,-54,-65,-45,54,-47,39,-50,65,-115,9,-127, 
  /* [1][0][][] */ -85,80,-111,-115,-89,32,20,72,-34,14,99,-38,37,127,16,58, 
  /* [2][0][][] */ -61,-17,-84,-10,-47,-80,23,-52,-85,100,117,40,31,28,-78,127, 
  /* [3][0][][] */ -58,-61,6,-46,-85,-5,-59,-127,-19,10,45,-49,-75,-43,-100,-50, 
  /* [4][0][][] */ 74,-3,-23,48,-48,-13,-127,42,25,80,-1,33,21,6,-44,-89, 
  /* [5][0][][] */ -124,69,-107,-25,54,-38,-33,-82,107,-36,0,-59,7,-127,-92,-120, 
  /* [6][0][][] */ -15,-43,-30,5,-76,45,32,-24,7,-48,107,-30,-21,-20,-127,29, 
  /* [7][0][][] */ -19,78,127,-51,21,89,-8,-83,54,43,-88,-27,26,-1,29,74, 
  /* [8][0][][] */ -59,4,85,-35,73,-5,124,127,-70,-13,-102,-109,28,89,-120,-73, 
  /* [9][0][][] */ 12,46,66,24,-86,-29,-91,-75,39,-1,127,35,-50,-73,42,-17, 
  /* [10][0][][] */ -20,-127,26,-70,-115,58,32,14,-15,-50,-6,32,-24,40,-116,46, 
  /* [11][0][][] */ 88,-47,5,74,-90,-51,38,-19,81,127,-44,61,26,-59,-37,78, 
  /* [12][0][][] */ -42,-77,127,5,56,-13,12,48,69,-21,70,48,-14,10,-71,29, 
  /* [13][0][][] */ 7,-39,23,27,15,26,127,32,-111,27,8,10,-16,115,106,-73, 
  /* [14][0][][] */ 100,-107,127,2,66,85,99,89,114,87,113,24,112,-47,43,-60, 
  /* [15][0][][] */ -13,116,44,-62,47,115,-95,91,-77,-5,-75,6,-56,127,-42,-91, 
  /* [16][0][][] */ -26,66,98,-33,19,86,-13,-8,-9,11,-12,33,86,10,95,127, 
  /* [17][0][][] */ 3,60,44,-127,5,-46,14,-51,-36,28,3,45,-56,-16,58,-29, 
  /* [18][0][][] */ -60,10,-105,-101,87,72,-32,-54,39,93,127,68,-27,119,-35,6, 
  /* [19][0][][] */ 65,127,49,93,28,-31,2,-1,-7,114,36,99,66,75,-55,40, 
  /* [20][0][][] */ 91,-1,-3,67,-71,11,-26,61,-45,-46,-127,-73,105,-27,38,-8, 
  /* [21][0][][] */ -77,-74,-27,127,-10,17,-113,81,14,-10,10,11,-32,29,-57,3, 
  /* [22][0][][] */ -9,15,-90,-55,127,30,-40,82,97,89,32,34,-16,38,-16,42, 
  /* [23][0][][] */ -55,37,-49,3,0,65,95,73,-25,127,-34,-15,10,32,-36,-43, 
  /* [24][0][][] */ 24,-72,38,8,127,45,56,-25,36,5,39,24,-55,40,0,-28, 
  /* [25][0][][] */ 127,-50,72,18,10,-12,-44,89,106,-34,-53,1,120,-49,91,54, 
  /* [26][0][][] */ 70,48,83,95,65,9,-58,-25,18,71,-10,127,28,-42,43,-65, 
  /* [27][0][][] */ -30,27,-53,34,0,127,-10,-78,22,-60,86,26,44,-29,124,89, 
  /* [28][0][][] */ -36,39,-71,-127,21,-60,19,-56,-106,89,-70,13,-7,32,-27,69, 
  /* [29][0][][] */ 91,99,-85,31,44,96,-49,-16,59,51,12,53,-127,0,-13,66, 
  /* [30][0][][] */ -32,119,-120,-100,94,-60,5,9,-71,56,-88,-26,27,62,4,127, 
  /* [31][0][][] */ 18,-91,36,34,19,-46,-35,-8,-21,-16,39,-32,-68,49,33,127, 
  /* [32][0][][] */ -63,65,-2,38,-127,40,2,70,19,-113,38,-78,15,34,37,39, 
  /* [33][0][][] */ -55,2,52,84,-14,19,-45,8,-45,-45,16,-16,-14,-6,22,127, 
  /* [34][0][][] */ -20,4,-84,-77,70,-22,-10,80,36,-4,-19,-19,-41,-31,-42,127, 
  /* [35][0][][] */ 61,15,15,-20,-8,7,-79,-14,-33,-127,-33,2,-10,-28,47,-30, 
  /* [36][0][][] */ -9,26,-127,-19,37,87,-10,70,-39,10,65,52,17,49,-97,56, 
  /* [37][0][][] */ 56,44,57,-39,59,-127,27,-8,-119,70,-77,-11,-2,26,88,24, 
  /* [38][0][][] */ -30,127,32,-58,30,9,79,-111,7,-14,-92,39,-61,-120,-94,30, 
  /* [39][0][][] */ 89,35,-127,-91,-11,-7,12,-57,27,4,-6,-38,81,-4,-126,-77, 
  /* [40][0][][] */ -34,8,-42,-93,-33,-29,17,-127,-3,-4,8,-23,34,60,28,64, 
  /* [41][0][][] */ -52,-98,3,127,-5,-34,-80,-15,-8,-53,97,-47,-78,-15,8,37, 
  /* [42][0][][] */ -19,50,-12,-127,5,16,-1,-18,50,-14,-20,40,59,-26,-17,0, 
  /* [43][0][][] */ -8,47,-3,9,117,34,9,25,10,38,2,-95,-127,-47,-4,-48, 
  /* [44][0][][] */ 91,-4,42,42,-22,-10,-7,14,-4,-24,18,-6,127,3,-31,-42, 
  /* [45][0][][] */ -4,-84,-62,26,-38,-95,10,47,18,-15,23,37,-91,127,29,-21, 
  /* [46][0][][] */ -38,-85,59,93,5,14,-127,88,41,-55,46,-52,49,73,68,126, 
  /* [47][0][][] */ -37,-56,15,88,4,9,57,25,18,-57,-127,-45,58,-23,-55,17, 
  /* [48][0][][] */ -83,91,-21,-28,-3,58,-40,-127,21,-27,63,-9,22,-111,-35,-10, 
  /* [49][0][][] */ -49,8,38,-25,7,13,127,122,-32,-32,-10,20,-40,39,-46,40, 
  /* [50][0][][] */ 64,28,-76,26,31,-127,-50,-6,-88,58,-57,-6,9,-77,-111,-41, 
  /* [51][0][][] */ -38,56,-23,127,-39,57,-81,-105,-59,-89,-4,-56,-5,35,9,123, 
  /* [52][0][][] */ -127,-16,37,15,30,62,60,5,28,-93,-62,-68,-106,-62,-116,0, 
  /* [53][0][][] */ -32,-82,-34,-127,-20,-30,22,57,48,-66,-51,15,-22,22,52,120, 
  /* [54][0][][] */ 10,-60,21,-8,-39,56,31,-15,-9,-80,41,14,-22,-17,-127,37, 
  /* [55][0][][] */ -1,-22,-30,31,61,-18,53,69,-61,-51,-127,-30,62,-22,-12,31, 
  /* [56][0][][] */ 31,-22,-67,-32,-127,-7,-82,11,2,-13,0,26,64,-55,41,24, 
  /* [57][0][][] */ -60,1,24,-23,127,44,50,41,-19,55,1,-31,-58,57,-89,-17, 
  /* [58][0][][] */ 41,4,7,-11,53,0,-54,-56,48,-127,-85,-13,-64,-48,-22,48, 
  /* [59][0][][] */ -63,-19,-22,23,-5,60,-94,-42,82,127,-63,13,-10,-5,10,-1, 
  /* [60][0][][] */ 4,-105,11,6,-127,-85,47,7,33,55,-17,48,7,-31,8,71, 
  /* [61][0][][] */ 10,39,-91,-5,-51,-13,-127,-71,-11,7,57,77,63,-50,104,56, 
  /* [62][0][][] */ 48,-12,43,-18,-18,49,31,115,-42,127,33,79,22,16,68,108, 
  /* [63][0][][] */ 22,-123,-6,-19,-78,8,44,-37,-14,-28,4,-10,-37,127,120,36, 
  /* [64][0][][] */ -13,-3,-127,-22,28,63,30,-26,-21,-96,59,31,81,-27,-56,121, 
  /* [65][0][][] */ -15,-9,53,74,82,0,66,78,-23,-9,-127,-76,33,93,-58,-22, 
  /* [66][0][][] */ -53,-101,-14,-127,-55,-120,44,-52,36,-47,27,56,-48,-60,-50,105, 
  /* [67][0][][] */ -48,-71,-98,0,-72,127,-12,-107,-70,-17,-41,-107,11,-7,-62,23, 
  /* [68][0][][] */ 116,56,15,-34,-65,17,-53,-59,-102,-127,-25,3,25,-48,43,-86, 
  /* [69][0][][] */ 42,10,20,-16,-15,-48,-42,43,-7,127,-18,-5,5,39,65,-5, 
  /* [70][0][][] */ 51,-24,-25,67,-127,22,-6,-125,74,101,49,89,40,-56,-6,30, 
  /* [71][0][][] */ 127,-45,65,69,-67,-35,14,-25,99,7,-76,21,64,-48,45,-17, 
  /* [72][0][][] */ 0,-36,42,117,51,11,-127,74,84,0,39,12,-55,-66,-53,70, 
  /* [73][0][][] */ 67,17,70,-127,87,-66,-75,43,-18,109,-52,24,24,-62,22,-63, 
  /* [74][0][][] */ 73,11,16,31,-127,-29,29,-1,-58,-48,24,-33,18,-63,-1,26, 
  /* [75][0][][] */ 63,127,-112,18,51,47,-26,-12,-11,-28,58,80,-114,48,38,82, 
  /* [76][0][][] */ -83,-37,8,-63,-52,-26,85,-6,-62,30,94,53,-62,-127,-27,80, 
  /* [77][0][][] */ -88,127,-20,24,-46,-94,37,116,65,-77,13,73,-52,51,-33,90, 
  /* [78][0][][] */ 127,31,-51,46,-52,51,-125,-8,2,-6,-87,-17,48,-92,47,50, 
  /* [79][0][][] */ -57,-24,127,21,-3,-98,-40,-43,-50,8,2,-15,-58,88,-50,40, 
  /* [80][0][][] */ 63,85,26,-127,-19,34,84,-51,19,18,-30,27,66,-54,11,-1, 
  /* [81][0][][] */ 35,-52,13,-112,92,39,-12,127,111,1,-7,-37,-35,11,-75,-61, 
  /* [82][0][][] */ 73,56,52,0,127,-82,31,59,2,99,-36,15,-11,-32,26,-99, 
  /* [83][0][][] */ -57,90,22,2,101,50,125,127,10,75,-54,-94,-112,93,-87,-118, 
  /* [84][0][][] */ 29,-71,-21,101,-5,-92,-81,23,-115,55,-84,-24,-127,64,-4,-74, 
  /* [85][0][][] */ -91,60,-60,2,-41,-56,-28,-36,-27,43,-2,-98,-127,-102,-41,41, 
  /* [86][0][][] */ -13,72,114,116,26,-51,41,13,-6,52,-71,-80,29,71,-127,-90, 
  /* [87][0][][] */ -29,45,127,-38,-102,-37,19,15,43,-25,15,55,-61,12,-11,-9, 
  /* [88][0][][] */ -22,-77,-88,8,16,31,8,0,-9,-89,-109,-106,127,-33,9,41, 
  /* [89][0][][] */ 42,38,20,-106,21,-47,-64,58,127,-18,28,-120,10,-23,70,-89, 
  /* [90][0][][] */ -12,80,11,3,-50,30,64,110,12,-68,-6,127,43,12,-48,98, 
  /* [91][0][][] */ -53,-10,-27,70,91,70,-53,-116,-37,50,-31,-5,-106,-127,-71,-19, 
  /* [92][0][][] */ -32,66,-9,-50,-127,-23,-75,31,-52,51,115,96,-25,-21,53,21, 
  /* [93][0][][] */ 101,30,103,34,-127,-99,33,15,-14,-79,-24,-58,21,-50,-24,7, 
  /* [94][0][][] */ -39,-127,24,-119,13,14,-10,15,96,-27,8,48,13,53,-62,57, 
  /* [95][0][][] */ -32,-66,-15,-27,93,97,-23,46,82,17,-81,28,-14,127,-78,65, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0018704587128013372, 0.0013686768943443894, 0.0019939327612519264, 0.002666206331923604, 0.0020262140315026045, 0.0011725281365215778, 0.0016455145087093115, 0.002648121677339077, 0.0018341770628467202, 0.0014837232884019613, 0.0032413972076028585, 0.0017458336660638452, 0.002315169433131814, 0.002183007076382637, 0.0020985770970582962, 0.0017409952124580741, 0.0023688504006713629, 0.0014709710376337171, 0.0019013873534277081, 0.0025574136525392532, 0.0021332970354706049, 0.0010427813977003098, 0.0012330779572948813, 0.0022887443192303181, 0.0026345117948949337, 0.0019369287183508277, 0.0011687354417517781, 0.0019417128060013056, 0.002014227444306016, 0.0021534392144531012, 0.0013203456765040755, 0.003206535940989852, 0.00108130625449121, 0.0026169347111135721, 0.0023122674319893122, 0.0022033683490008116, 0.0019400137243792415, 0.0014210572699084878, 0.0017858033534139395, 0.0023775708395987749, 0.0028663824778050184, 0.0019439393654465675, 0.0038099887315183878, 0.0032629258930683136, 0.0038823678623884916, 0.0027329293079674244, 0.0012202397920191288, 0.0019998932257294655, 0.00246997713111341, 0.0030168779194355011, 0.0015293707838281989, 0.0018392783822491765, 0.002036114688962698, 0.0029235081747174263, 0.0034030573442578316, 0.0024506249465048313, 0.0028909237589687109, 0.0024698234628885984, 0.0014255351852625608, 0.0028243234846740961, 0.0023563820868730545, 0.0018175236182287335, 0.002329372800886631, 0.0021716936025768518, 0.0019346300978213549, 0.0014513295609503984, 0.0014781022910028696, 0.002050990704447031, 0.001691550831310451, 0.0029892493039369583, 0.0015745711280032992, 0.0021071215160191059, 0.001779182581230998, 0.0014380610082298517, 0.0025509418919682503, 0.0018088408978655934, 0.0023387456312775612, 0.0018096249550580978, 0.0022571098525077105, 0.0026298100128769875, 0.0021570711396634579, 0.0021511295344680548, 0.0011671284446492791, 0.0018183820648118854, 0.0021620211191475391, 0.0018248799024149776, 0.0024184675421565771, 0.0031743403524160385, 0.00066496949875727296, 0.0028500612825155258, 0.0029151393100619316, 0.0023479762021452188, 0.00095821014838293195, 0.0020365372765809298, 0.002695638919249177, 0.0020618659909814596, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 5716, 3691, 1617, -1006, 4861, 10324, 7005, 1671, -332, 6872, 717, -4280, 3292, 2960, 707, -639, 3887, 7600, -155, -164, 3723, 11474, 9719, -1878, -3173, -1115, 10860, 14, 1956, 1585, 8694, -1495, 10608, 2628, 4219, -4048, 1714, -6294, 77, 2006, 2206, 2307, 1292, -198, 990, 1833, 7331, 4262, 3445, 2193, 6094, 3146, -2708, 1537, 885, 2125, 1734, 1844, 8005, 987, -1023, 5510, 3090, 4159, 4249, 7437, -5466, 3426, 4359, -665, 6579, 1361, 3684, 4299, 3081, 2449, -563, 3064, 2364, 2753, 2735, 2708, 10103, 742, 2442, 5582, 807, -694, 21415, -381, 986, -1644, 12315, 2890, 82, -1024, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00013002486957702786, 9.5143521321006119e-05, 0.00013860815670341253, 0.00018534122500568628, 0.00014085219299886376, 8.1508245784789324e-05, 0.0001143878762377426, 0.00018408407049719244, 0.00012750274618156254, 0.00010314096289221197, 0.00022532559523824602, 0.00012136155419284478, 0.00016093891463242471, 0.00015175165026448667, 0.00014588249905500561, 0.00012102521577617154, 0.00016467053501401097, 0.00010225448932033032, 0.00013217487139627337, 0.00017777850735001266, 0.00014829606516286731, 7.2488910518586636e-05, 8.5717365436721593e-05, 0.00015910196816548705, 0.00018313797772862017, 0.00013464552466757596, 8.1244594184681773e-05, 0.00013497809413820505, 0.00014001893578097224, 0.00014969623589422554, 9.1783775133080781e-05, 0.00022290222113952041, 7.5166957685723901e-05, 0.00018191611161455512, 0.00016073718143161386, 0.000153167056851089, 0.0001348599762422964, 9.8784737929236144e-05, 0.00012414004595484585, 0.00016527673869859427, 0.00019925646483898163, 0.00013513286830857396, 0.00026485120179131627, 0.00022682215785607696, 0.00026988264289684594, 0.00018997947336174548, 8.4824918303638697e-05, 0.00013902249338570982, 0.00017170036153402179, 0.00020971814228687435, 0.00010631414625095204, 0.00012785736180376261, 0.00014154042582958937, 0.00020322755153756589, 0.0002365633990848437, 0.00017035509517882019, 0.00020096244406886399, 0.00017168968042824417, 9.9096017947886139e-05, 0.00019633273768704385, 0.00016380380839109421, 0.00012634508311748505, 0.0001619262620806694, 0.00015096519200596958, 0.00013448573008645326, 0.00010088911949424073, 0.00010275022214045748, 0.00014257454313337803, 0.00011758808977901936, 0.00020779755141120404, 0.00010945624671876431, 0.00014647646457888186, 0.00012367981253191829, 9.9966753623448312e-05, 0.00017732862033881247, 0.00012574149877764285, 0.0001625778095331043, 0.00012579601025208831, 0.00015690289728809148, 0.00018281114171259105, 0.0001499487116234377, 0.00014953568461351097, 8.1132886407431215e-05, 0.00012640476052183658, 0.00015029280621092767, 0.00012685645197052509, 0.00016811967361718416, 0.00022066413657739758, 4.6225326514104381e-05, 0.00019812189566437155, 0.00020264579507056624, 0.00016321947623509914, 6.6609936766326427e-05, 0.00014156980614643544, 0.00018738723883870989, 0.00014333052968140692, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 28,126,7,59,-27,-9,33,55,61,-99,-53,69,-8,-10,55,-71,-114,20,31,46,52,48,86,127,12,-16,-41,4,-22,33,33,-24,-58,6,-29,61,-35,52,-4,10,31,-42,-1,38,-94,-66,12,-28,-27,-70,-26,-2,3,70,-13,-10,-71,-43,-56,-127,-89,-4,-118,14,-49,42,81,-15,-14,41,34,0,-45,4,40,3,43,-51,-89,29,-10,-96,56,-28,-54,-61,-21,49,-127,19,-61,45,66,7,97,-7, -51,-35,23,112,-15,71,-32,-4,79,23,-107,88,-32,-52,-88,118,-122,60,48,70,127,0,121,123,34,2,13,42,3,127,-3,-109,51,72,17,35,81,70,-42,-127,127,-25,68,127,-70,-73,127,-73,-1,-123,-68,-23,26,127,-19,-127,13,30,-115,-63,-70,-127,-35,107,-49,86,127,-48,13,127,127,6,-60,33,-40,-123,54,-60,8,127,-9,-127,127,-66,-83,-56,88,80,52,127,-88,-3,127,-15,127,28, 15,-127,22,51,-7,-22,-7,57,21,63,-47,66,-13,53,13,-90,-30,5,23,49,43,36,73,111,22,-44,15,28,15,28,-7,-67,-40,-92,-25,57,-11,11,4,3,-5,15,-12,46,-62,-46,3,-4,27,-54,13,-4,-9,14,22,3,64,-42,-19,-67,-127,24,-94,7,15,23,-18,-6,-15,8,13,15,-16,-38,-5,-1,47,-30,-69,-1,20,-92,41,-18,-42,-36,23,8,-95,19,-37,46,28,35,52,-25, 
  /* [0][1][][] */ 97,3,53,127,5,-58,108,58,-17,-127,-127,127,7,-127,-37,16,-97,-52,73,38,-90,-5,-127,-64,-14,66,-127,127,-85,85,127,104,15,77,13,127,-127,83,-13,-35,56,-127,8,52,-127,-75,3,-119,-118,-124,-76,26,125,-44,80,-19,-127,4,-73,12,-26,-75,-51,53,-97,-23,103,-102,-52,26,-59,-127,-108,52,127,-64,127,57,-114,-46,127,-122,-18,127,-4,-3,-5,127,6,25,-54,35,0,-77,75,-16, -127,2,-66,79,-91,-127,-127,-127,76,19,-67,81,-84,-109,-32,127,-127,-127,127,127,30,-127,-119,106,-127,127,17,88,-99,5,-117,127,-127,82,127,-16,26,127,127,-100,-61,14,14,77,-9,-127,-73,-127,11,-127,-127,127,13,53,47,-63,31,28,82,-5,-63,-57,-127,127,2,-127,72,127,12,46,-103,-70,-4,65,-120,-127,103,127,59,-64,-82,-34,-84,90,-127,-83,127,110,111,104,-127,-127,-102,-61,47,127, 59,-20,81,121,2,-37,9,64,-46,99,-76,99,2,-14,-127,61,-45,-42,34,27,-90,-4,-58,-67,-8,13,124,-5,127,109,9,-116,-17,-127,-11,105,-117,28,-23,-38,-35,96,7,72,-42,-35,-7,-76,127,-75,-49,3,66,-81,-127,32,86,20,-127,77,-11,-56,-14,46,127,-40,-18,-16,-62,-4,-43,-59,-127,-127,3,-42,20,-43,-127,-35,-69,-114,-14,120,-95,27,19,25,-15,-25,-10,58,-10,127,23,-37, 
  /* [0][2][][] */ 29,-120,34,17,22,7,36,66,-42,-47,-8,-20,22,-12,5,32,-44,22,-6,39,14,36,14,-4,28,78,-26,7,-32,39,2,31,-28,-19,-19,66,37,14,2,-18,12,19,-26,-19,-83,-60,-13,3,-27,51,4,44,-3,6,-34,-22,-18,-6,-5,19,-58,3,48,-15,-36,46,-30,-41,11,16,11,77,5,19,9,1,-17,-50,-64,4,12,-50,-20,-37,-67,36,-23,27,-78,44,-24,32,5,15,-11,-28, -63,2,127,51,127,53,-24,27,-127,-2,-48,-32,127,-28,-63,11,-8,63,16,-58,38,6,25,-8,75,-62,-3,36,-19,111,-14,19,-64,12,18,18,60,20,12,-85,-9,-11,-127,58,-55,-49,-46,-68,-20,-19,-25,74,127,-62,-35,-86,-3,127,-23,9,22,-67,100,38,-46,35,-26,6,127,17,25,116,-76,22,-22,-68,16,-89,-43,-34,-11,-111,-25,-77,-86,127,68,25,66,75,8,24,-18,-2,-19,18, 3,77,23,-2,5,-15,-26,56,12,88,17,21,14,12,-17,54,-31,-7,-11,37,34,29,14,-7,13,86,20,16,15,28,-24,-65,-33,-27,-14,53,18,-3,7,-19,-9,11,-13,-1,-65,4,-17,-1,12,37,-4,19,-1,-16,-1,13,42,15,-12,48,-26,-1,27,-25,13,12,-75,6,7,4,0,85,29,-22,-7,0,-15,-21,-44,14,-1,-115,-22,-14,-76,57,20,1,-72,51,-4,32,-7,3,-33,-43, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.010311177000403404, 0.0079793082550168037, 0.0057087261229753494, 0.0049020536243915558, 0.0099725546315312386, 0.012401033192873001, 0.014167173765599728, 0.007973693311214447, 0.011228081770241261, 0.0059870355762541294, 0.0058923624455928802, 0.012580306269228458, 0.0097043206915259361, 0.0055941306054592133, 0.0066450918093323708, 0.0066773416474461555, 0.004083873238414526, 0.011667986400425434, 0.0063710385002195835, 0.0050117322243750095, 0.0071022403426468372, 0.01336459256708622, 0.010880219750106335, 0.0086557865142822266, 0.031499318778514862, 0.0070959664881229401, 0.011583589948713779, 0.005346318706870079, 0.0086847851052880287, 0.0035973913036286831, 0.012971382588148117, 0.010060994885861874, 0.0072677899152040482, 0.007733022328466177, 0.011016733013093472, 0.01704542338848114, 0.0092025334015488625, 0.015616186894476414, 0.014483505859971046, 0.006132559385150671, 0.0084909917786717415, 0.010330405086278915, 0.010708989575505257, 0.004447136539965868, 0.0043266033753752708, 0.0037930014077574015, 0.011660476215183735, 0.0043795681558549404, 0.0077886586077511311, 0.0044281315058469772, 0.005684342235326767, 0.0059875315055251122, 0.0083271246403455734, 0.0074966698884963989, 0.010103163309395313, 0.0063213370740413666, 0.00765229482203722, 0.009376993402838707, 0.0056730704382061958, 0.0063928635790944099, 0.0078048049472272396, 0.0064688548445701599, 0.005919833667576313, 0.0054855863563716412, 0.0076843854039907455, 0.01278362050652504, 0.011413720436394215, 0.0089120958000421524, 0.012299030087888241, 0.0085238562896847725, 0.012205732055008411, 0.0062597128562629223, 0.0061328494921326637, 0.010307038202881813, 0.011405938304960728, 0.0049795373342931271, 0.0052631599828600883, 0.0083693899214267731, 0.005675771739333868, 0.01128899771720171, 0.011124748736619949, 0.0033593066036701202, 0.010362758301198483, 0.0084621831774711609, 0.0036909421905875206, 0.0084970602765679359, 0.0058604567311704159, 0.0058608814142644405, 0.009623037651181221, 0.0067443698644638062, 0.0046908482909202576, 0.013357416726648808, 0.011173360049724579, 0.012447262182831764, 0.0063501088880002499, 0.012756249867379665, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 455, 724, -2669, -8427, -1090, 5642, 925, -2993, -919, -1200, 8837, -2960, -1301, 9568, 6901, -4145, 19302, 2452, -6408, -1719, -4734, 1509, -907, -2894, 288, -4415, -115, -4760, 732, -10789, -436, -1329, 10488, 488, -2713, -364, 1036, -1552, -446, 7042, -51, 404, 3017, -7200, 14997, 16328, 395, 14035, -220, 10926, 8015, -4166, -1257, -715, -193, 10267, -2049, -2393, 15765, 4974, 9015, 12073, 8549, -7667, 2656, 490, -2602, 3894, -1312, -2413, 1771, 1779, 10359, 10, -316, 11906, -2478, 2568, 12420, -318, -489, 21726, -2210, 1013, 16638, -3, -6069, -6689, 2854, -6759, 12972, -298, -2555, -1048, -3313, -2640, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00023584312293678522, 0.00018250729772262275, 0.00013057324395049363, 0.00011212257231818512, 0.00022809796791989356, 0.00028364351601339877, 0.00032403969089500606, 0.00018237886251881719, 0.00025681511033326387, 0.00013693889195565134, 0.00013477347965817899, 0.00028774395468644798, 0.00022196276404429227, 0.0001279521529795602, 0.00015199033077806234, 0.00015272796736098826, 9.3408678367268294e-05, 0.00026687685749493539, 0.00014572203508578241, 0.00011463119881227612, 0.00016244649305008352, 0.00030568259535357356, 0.00024885858874768019, 0.00019798008725047112, 0.0007204703870229423, 0.00016230299661401659, 0.00026494648773223162, 0.00012228405103087425, 0.00019864336354658008, 8.2281585491728038e-05, 0.0002966888714581728, 0.00023012081510387361, 0.00016623304691165686, 0.00017687410581856966, 0.00025198099319823086, 0.00038987264269962907, 0.00021048559574410319, 0.00035718234721571207, 0.00033127501956187189, 0.00014026739518158138, 0.00019421080651227385, 0.00023628292547073215, 0.00024494211538694799, 0.00010171744361286983, 9.8960539617110044e-05, 8.6755695519968867e-05, 0.00026670505758374929, 0.00010017198655987158, 0.00017814664170145988, 0.00010128274880116805, 0.00013001552724745125, 0.00013695024244952947, 0.00019046274246647954, 0.00017146811296697706, 0.00023108531604520977, 0.00014458522491622716, 0.00017502765695098788, 0.00021447594917844981, 0.00012975771096535027, 0.00014622122398577631, 0.00017851595475804061, 0.0001479593338444829, 0.00013540181680582464, 0.00012546946527436376, 0.0001757616555551067, 0.00029239425202831626, 0.00026106112636625767, 0.00020384254457894713, 0.00028131043654866517, 0.00019496250024531037, 0.00027917648549191654, 0.00014317572640720755, 0.00014027403085492551, 0.00023574846272822469, 0.00026088312733918428, 0.00011389482097001746, 0.00012038199929520488, 0.00019142946985084563, 0.00012981949839740992, 0.00025820839800871909, 0.00025445161736570299, 7.6835975050926208e-05, 0.00023702291946392506, 0.00019355188123881817, 8.442133548669517e-05, 0.00019434961723163724, 0.00013404371566139162, 0.00013405342178884894, 0.00022010361135471612, 0.00015426108438987285, 0.00010729175846790895, 0.00030551844974979758, 0.00025556347100064158, 0.00028470088727772236, 0.00014524332073051482, 0.00029176822863519192, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -100,35,52,-32,-62,-22,-75,13,-67,33,6,-12,21,42,30,-33,10,-10,92,18,26,-43,127,75,54,16,-14,30,-69,-114,-96,12,-45,-50,28,53,-13,27,5,32,-22,-9,-67,18,-83,-9,-9,83,-9,27,-31,-25,-6,-7,29,-45,-82,5,-4,63,70,31,-19,9,-34,-45,-47,23,-59,-52,5,6,33,-11,-61,-39,-50,23,-53,-9,-58,74,74,-73,14,52,9,48,19,-16,7,-13,-33,-37,-69,2, 
  /* [1][0][][] */ 31,19,31,-38,-64,-24,4,6,-7,-6,35,-82,10,-6,-54,-45,-3,9,-74,14,-29,-76,4,31,-26,-78,8,-53,78,-117,117,-90,50,25,-17,29,55,65,-18,-55,43,19,-18,-32,28,44,-127,-49,-68,-65,-25,-24,44,-44,-44,44,-11,-7,-50,27,11,46,12,-117,-15,-29,-58,-10,10,-25,-76,-32,-68,-16,11,-81,15,5,46,-50,-20,-39,-89,-28,32,-50,-29,24,-78,-13,-71,34,28,60,-43,66, 
  /* [2][0][][] */ 87,-37,16,14,28,-87,47,10,-22,17,5,23,-84,-21,-1,-29,-94,-63,-35,39,29,-49,-37,39,11,-64,-5,-19,-41,53,-65,127,-51,106,-26,50,-35,-18,-5,-1,-118,74,95,30,-86,31,-23,-18,47,19,-18,-61,54,-23,-17,72,64,-2,62,-22,32,44,-41,20,63,21,-10,-5,18,61,-54,26,82,37,84,53,26,-51,49,31,75,-3,-46,24,-57,37,17,66,10,19,-11,40,-52,56,-32,22, 
  /* [3][0][][] */ -3,-13,-26,-2,16,-6,-4,-48,-32,91,58,79,20,-12,-66,46,2,-47,30,21,28,127,41,-40,24,28,-29,4,69,-35,60,-8,-20,39,-23,-8,11,56,37,21,-92,-35,-29,31,-51,49,16,0,-9,-40,3,-30,47,-91,-29,-44,35,89,-10,-10,8,-3,-54,16,24,60,-46,3,-33,8,6,-58,-15,-55,41,-7,9,11,-47,-49,-28,7,-58,7,-9,-30,32,-29,7,21,38,-11,38,27,-49,58, 
  /* [4][0][][] */ 37,3,-37,23,31,20,-42,15,-43,86,87,4,-17,3,5,-54,18,-22,-35,42,28,-39,57,83,-59,-15,-127,10,-42,-69,3,19,-60,-45,11,58,8,39,20,27,-37,-49,47,-24,-9,10,-27,49,-38,53,5,13,46,-16,-66,23,50,-9,9,-18,45,-4,20,13,-53,20,-32,6,-53,37,-41,54,53,-68,-26,-40,30,-47,-11,6,-45,90,-75,-4,-37,20,30,-37,40,-1,27,23,-56,-20,30,26, 
  /* [5][0][][] */ -81,38,44,-26,59,-21,44,-26,-30,63,14,-8,20,-30,-37,-23,-19,-51,64,47,-111,-20,-72,60,-35,-9,37,20,42,-71,-20,60,55,123,-9,70,-29,26,56,-10,-48,102,94,-17,-20,92,48,-1,16,29,-13,31,16,-50,46,-88,60,-59,-46,-87,95,100,-77,-3,85,-25,-83,-64,-60,-8,-71,19,4,2,-22,-50,14,-23,-55,-44,127,-15,25,-82,-94,50,26,-16,-65,37,29,5,-26,31,-1,77, 
  /* [6][0][][] */ 56,-8,-82,24,-39,-126,93,109,-69,91,3,92,-127,-82,53,67,-8,-61,3,8,-3,-16,-71,-53,-51,48,79,35,24,42,89,-53,28,1,9,-57,2,13,39,80,-4,26,-48,-9,-12,-48,-89,26,48,-98,-15,77,33,2,-17,-63,95,54,22,-13,-99,56,-98,3,34,8,-6,61,33,31,-12,-33,-21,21,107,30,56,-16,18,-83,-6,-46,-82,64,9,-49,52,9,-47,62,58,51,-31,16,-58,115, 
  /* [7][0][][] */ 25,83,-47,-79,-20,-5,28,-1,-78,49,-38,-48,-40,17,-2,1,-58,-63,-19,70,7,127,30,44,-4,20,5,37,45,55,80,-12,80,33,-20,30,-11,-6,6,53,-82,-7,27,-47,2,-38,78,-22,43,-74,-80,-33,-60,11,7,-4,40,15,-89,-1,14,114,14,-6,-22,3,-49,19,-37,-18,-110,43,31,75,-35,48,-61,70,5,-105,-27,-50,55,-75,45,-12,-9,-9,-2,75,-89,42,49,-46,-47,3, 
  /* [8][0][][] */ -10,71,-38,46,-28,-34,-88,43,-101,-34,4,14,-49,42,34,78,10,-46,-4,4,39,0,-6,-15,-36,63,-5,25,-5,-25,-44,-41,-25,-55,-22,-75,-34,27,46,2,-1,-42,24,8,-33,-38,17,-18,-25,-19,38,69,6,-19,-67,99,-38,29,-2,-32,-41,6,26,51,-45,-59,-35,-13,-44,14,10,7,-14,-60,-117,-12,-43,30,-70,-36,-34,14,-49,-29,-4,-6,18,30,1,60,-55,-7,-86,-127,9,-50, 
  /* [9][0][][] */ -14,26,-77,59,-33,-37,75,44,-8,33,-35,89,-30,-16,30,127,20,19,67,5,21,13,39,-98,-42,-5,22,-13,8,-24,37,51,-30,-7,-5,-123,20,-27,-30,-25,-9,23,39,-32,3,-1,12,22,31,75,22,-11,-52,-71,-2,2,-16,-12,50,-22,-71,50,-61,-33,89,-16,-22,5,-60,23,40,27,-16,95,-18,-20,-22,9,-38,-6,49,-31,70,-7,20,-22,-18,-27,-58,26,0,-4,64,37,-31,-9, 
  /* [10][0][][] */ 65,0,-38,5,-32,-30,87,-9,23,-40,-31,-23,-86,-16,11,-14,-66,-27,14,16,35,40,17,-9,-55,82,47,-19,-49,-86,-23,-19,76,-34,53,3,91,-95,80,127,27,-61,2,-7,-12,-106,-10,67,27,81,-84,-45,-19,37,9,51,10,-71,68,66,-21,44,-52,-30,-6,-70,27,54,27,-26,-7,29,115,45,20,-89,36,-66,70,2,-46,33,37,29,-48,-18,3,49,-42,-18,18,47,57,77,-31,12, 
  /* [11][0][][] */ -54,-38,51,-54,0,-6,-16,-57,62,-68,-14,-24,-7,1,19,-2,-55,0,47,2,-64,18,-81,-104,-2,9,-31,30,39,-67,39,-30,18,3,19,-46,-54,8,-112,7,-60,66,-53,34,32,-7,-12,-31,14,-54,-79,-51,20,42,63,-66,-39,-76,-2,-35,-41,-61,-7,-127,9,-76,69,72,124,14,73,-40,-47,-5,64,-34,105,13,38,65,36,-6,-21,91,75,-13,-10,-17,-76,-69,-15,4,63,51,58,78, 
  /* [12][0][][] */ 46,-29,-2,-49,34,92,-27,53,31,85,18,71,-5,48,6,6,-67,40,22,57,127,-4,72,-59,40,16,-76,-71,-22,84,1,13,32,-11,12,-11,35,-1,-24,-27,9,-23,48,69,-41,50,-3,-12,-54,38,11,18,-25,-32,21,26,-13,68,33,38,41,-85,16,-93,-11,99,-18,-26,-11,-43,56,35,14,2,1,51,-18,60,-88,-27,-21,36,104,21,-2,80,-25,-76,69,7,-71,61,63,9,-33,-94, 
  /* [13][0][][] */ -8,24,-8,-47,-31,-14,-11,-13,1,-10,-11,-49,40,-82,-39,-52,-21,-23,-61,-13,-68,-37,13,88,-25,6,84,17,13,-23,43,40,10,-2,-93,127,-36,-49,26,-38,84,11,3,28,-19,-64,39,-21,68,6,-20,24,15,-7,8,69,74,-43,-21,-13,53,40,3,-70,0,29,-36,36,-62,-31,-76,22,-39,11,-33,-68,-93,29,12,54,-14,59,29,-70,52,46,22,-25,-12,-5,2,24,-50,12,-27,-5, 
  /* [14][0][][] */ -4,18,-72,-39,74,67,-95,7,16,-19,88,9,-2,-23,-45,-53,-71,7,37,127,20,-26,3,19,13,27,-41,67,3,0,-26,14,56,-6,-28,29,-31,42,70,16,43,3,39,16,-25,-24,51,-35,32,-1,-2,-26,39,6,-23,35,27,56,-66,-26,0,-57,-50,-85,4,-28,-50,-3,-73,47,-21,51,29,-42,-14,-31,28,3,-56,-48,25,8,-10,-9,-6,48,-13,-22,-39,63,67,21,1,-38,-48,-68, 
  /* [15][0][][] */ -77,-39,45,-46,11,-24,-19,-96,3,-10,-31,45,10,-18,50,84,-103,-7,17,-81,11,-28,-17,-98,40,-9,68,-55,-60,-110,-56,22,-34,55,82,-121,2,-40,16,-35,-2,5,19,-33,21,-21,66,113,-59,-29,12,-42,-45,71,6,-55,-118,-15,80,33,-55,8,-77,17,-56,-19,14,22,57,-75,98,-44,38,-20,-43,-52,27,9,66,33,-11,65,66,34,-5,-27,-127,17,-6,-53,-91,23,56,-34,-6,67, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.002468982245773077, 0.0030231676064431667, 0.0030351586174219847, 0.0025638644583523273, 0.0032586683519184589, 0.0029648130293935537, 0.0021704644896090031, 0.0021831993944942951, 0.0039180894382297993, 0.00314125488512218, 0.0021985310595482588, 0.0023740748874843121, 0.0037178155034780502, 0.0030442762654274702, 0.0040352605283260345, 0.0027286093682050705, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 7740, 20009, -9538, 425, -2257, 2787, -2586, 2280, 18257, -286, -7996, 12597, -17700, 5229, 2057, 12484, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 5.8093701227335259e-05, 7.1133355959318578e-05, 7.1415495767723769e-05, 6.0326223319862038e-05, 7.6674550655297935e-05, 6.9760309997946024e-05, 5.1069753681076691e-05, 5.1369399443501607e-05, 9.2190341092646122e-05, 7.3911884101107717e-05, 5.1730145059991628e-05, 5.5860586144262925e-05, 8.7478016212116927e-05, 7.1630034653935581e-05, 9.4947310572024435e-05, 6.4202577050309628e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -10,108,-90,41,46,-22,94,70,-58,-8,24,-91,75,127,-75,20, 
  /* [1][0][][] */ -34,7,-77,-35,-20,39,32,-127,39,-48,-20,-51,-20,-48,-68,10, 
  /* [2][0][][] */ -23,-28,39,78,27,45,-103,127,-26,-1,78,-58,-16,-67,-40,64, 
  /* [3][0][][] */ 72,-82,63,-8,-6,-32,-30,127,-22,48,62,48,-8,48,6,11, 
  /* [4][0][][] */ -54,-17,-26,45,-103,10,-23,-127,4,-16,40,-7,31,51,109,122, 
  /* [5][0][][] */ 124,21,-45,-23,-88,20,26,77,15,-20,63,88,127,33,-106,5, 
  /* [6][0][][] */ 23,-31,-49,-41,-60,12,-11,-31,-28,-46,-30,19,92,51,127,-11, 
  /* [7][0][][] */ -62,26,-38,-78,-3,-59,-66,15,-85,48,-63,-54,-127,-39,8,83, 
  /* [8][0][][] */ 50,34,71,-2,48,18,70,3,61,-26,35,9,-127,-31,-74,8, 
  /* [9][0][][] */ -31,62,28,-35,-21,-11,28,-6,-25,52,-37,10,52,127,31,23, 
  /* [10][0][][] */ 94,61,-39,66,-20,-10,49,-65,-74,-30,-73,-123,-127,-80,23,95, 
  /* [11][0][][] */ 44,4,58,3,-19,-34,16,100,-89,20,-22,2,-17,-6,63,127, 
  /* [12][0][][] */ -64,-17,-14,-15,6,-13,127,32,-67,9,9,-8,-19,88,-66,113, 
  /* [13][0][][] */ 8,25,6,35,87,34,96,105,-47,65,-79,-44,7,78,-127,-13, 
  /* [14][0][][] */ -127,119,-5,-25,-9,-3,54,1,-42,31,105,3,-103,15,-53,45, 
  /* [15][0][][] */ -7,-24,-127,-46,91,-42,-94,-49,-19,-24,-22,-76,-2,-89,-53,51, 
  /* [16][0][][] */ 114,-13,17,-11,30,-29,38,-22,-29,16,127,48,48,5,-34,17, 
  /* [17][0][][] */ 0,25,-42,-105,-24,-61,117,-127,14,-22,-45,33,30,73,1,46, 
  /* [18][0][][] */ 16,118,-19,-66,50,-77,-26,-53,-51,127,-24,3,-42,52,-24,-30, 
  /* [19][0][][] */ -77,-99,108,-100,35,-127,31,-31,42,36,89,106,16,-18,62,-27, 
  /* [20][0][][] */ -23,85,46,-2,4,-3,19,-19,50,-9,89,-18,-127,-27,-79,-4, 
  /* [21][0][][] */ -76,31,16,6,45,32,53,49,-127,56,-40,29,-38,13,-72,-25, 
  /* [22][0][][] */ 26,-94,62,21,30,-127,119,-2,23,-54,-54,-90,54,-89,-51,-69, 
  /* [23][0][][] */ -46,-116,55,65,33,-17,23,-42,17,-26,77,0,16,73,84,127, 
  /* [24][0][][] */ -3,1,23,73,55,13,-43,-127,72,12,-37,11,-2,-11,-28,-25, 
  /* [25][0][][] */ -10,39,32,-44,-18,-5,17,-25,-22,60,-40,-8,54,127,26,6, 
  /* [26][0][][] */ -67,79,1,15,23,-89,1,-34,6,20,11,73,-3,4,-89,127, 
  /* [27][0][][] */ -10,-127,-32,11,-50,91,-2,-63,18,-32,53,-32,34,-41,-81,-23, 
  /* [28][0][][] */ -41,4,33,78,24,8,-39,-127,-125,46,105,-8,68,10,-48,-27, 
  /* [29][0][][] */ -127,103,-30,-33,-32,18,-114,-60,-37,-33,-8,3,2,-60,-113,54, 
  /* [30][0][][] */ 47,93,-76,83,-122,-108,-73,-7,-48,-13,8,-122,127,37,-22,105, 
  /* [31][0][][] */ 127,27,-45,-29,-53,22,90,37,-50,-12,55,43,48,20,-10,1, 
  /* [32][0][][] */ -39,-24,127,-3,-19,71,73,26,-21,-6,0,20,6,73,59,43, 
  /* [33][0][][] */ 5,42,-63,-44,-20,38,113,33,3,-16,25,-76,103,127,-49,50, 
  /* [34][0][][] */ -96,-22,114,29,37,-53,112,-4,-127,45,36,-56,65,69,-48,-39, 
  /* [35][0][][] */ -8,24,-43,7,-59,108,-32,-7,-15,127,-14,75,-61,52,15,14, 
  /* [36][0][][] */ -8,-68,127,-45,-47,19,-42,-12,25,24,-44,78,7,-78,-33,51, 
  /* [37][0][][] */ 85,2,72,-15,117,-64,-38,33,-38,127,-65,-10,-77,-35,114,-26, 
  /* [38][0][][] */ 65,57,29,-114,-4,-53,-123,48,-107,68,-120,-68,-73,-127,-111,65, 
  /* [39][0][][] */ -62,18,-45,-31,-78,-78,76,15,-127,-29,17,76,41,2,0,61, 
  /* [40][0][][] */ 127,39,19,-71,-51,25,-2,-21,-27,-19,-45,-74,23,43,46,32, 
  /* [41][0][][] */ 87,-86,-72,-54,-7,-9,-57,-25,69,-28,6,-51,127,-81,50,-31, 
  /* [42][0][][] */ -18,-85,-55,127,0,-103,-106,26,12,9,-6,49,-87,71,-76,0, 
  /* [43][0][][] */ -84,-49,-47,-115,-48,1,5,72,40,-127,-30,36,-15,-48,-28,99, 
  /* [44][0][][] */ -59,56,21,-48,-34,-31,48,127,126,-95,81,116,126,47,-41,10, 
  /* [45][0][][] */ 19,85,-102,102,127,-107,-42,-54,116,-77,77,-65,-41,8,-95,75, 
  /* [46][0][][] */ -18,-37,12,-1,83,-18,30,2,-1,127,-15,-89,31,51,-27,54, 
  /* [47][0][][] */ 71,-42,-31,-21,71,-21,-43,-51,-10,127,-26,36,-13,-103,-80,11, 
  /* [48][0][][] */ 6,25,-16,-127,-9,-49,112,-112,-3,-1,-35,49,44,60,2,37, 
  /* [49][0][][] */ -33,127,-54,27,52,-58,62,73,-31,35,35,-77,-27,62,118,-107, 
  /* [50][0][][] */ 16,43,-14,6,-127,2,-69,-56,57,72,34,29,-31,-39,4,44, 
  /* [51][0][][] */ 127,-39,-50,-13,-38,93,-101,-43,48,-19,-33,68,-36,-72,4,40, 
  /* [52][0][][] */ -9,-49,61,73,-36,-94,-127,-24,-48,-46,-39,-75,26,-58,24,72, 
  /* [53][0][][] */ 26,110,35,-107,20,127,79,-6,-8,-25,0,-46,91,-110,0,41, 
  /* [54][0][][] */ 15,117,-5,-25,-13,-92,-102,54,4,-21,-33,127,66,77,6,61, 
  /* [55][0][][] */ -32,-9,53,28,52,-27,103,78,-65,10,19,10,127,48,11,-11, 
  /* [56][0][][] */ 127,33,10,6,-73,114,-60,-93,-44,67,-93,22,-84,122,-25,42, 
  /* [57][0][][] */ -65,-29,-64,-40,-83,-104,56,-23,-127,-27,52,62,5,37,-20,42, 
  /* [58][0][][] */ 48,-48,64,22,8,-58,-14,0,26,-11,-127,-29,26,-31,-32,42, 
  /* [59][0][][] */ 68,26,-127,86,13,31,77,-20,-70,-43,27,-96,-107,-51,27,98, 
  /* [60][0][][] */ -11,41,-21,16,-23,-35,-20,10,-41,-65,61,127,-56,-118,-45,-2, 
  /* [61][0][][] */ -45,13,74,-103,-85,44,16,116,-20,-103,61,79,82,-10,7,127, 
  /* [62][0][][] */ 72,50,-12,-127,-21,9,5,-42,-11,38,-36,42,18,-13,-80,-73, 
  /* [63][0][][] */ 0,-32,-4,-4,-64,-72,-55,12,-68,-26,-37,-20,127,-2,50,-11, 
  /* [64][0][][] */ 16,7,-31,52,-127,-53,-30,-74,56,127,33,4,31,-61,-55,109, 
  /* [65][0][][] */ -23,10,-15,-11,-79,86,19,-24,50,-119,103,-75,83,75,-127,61, 
  /* [66][0][][] */ -120,108,-92,-85,49,-30,-127,-86,-109,127,95,-3,-117,-54,52,60, 
  /* [67][0][][] */ -4,-32,-127,-109,57,67,15,-30,-31,-8,49,-12,20,34,11,50, 
  /* [68][0][][] */ 45,20,-26,-51,-73,33,15,35,-62,61,116,-7,-19,-45,-127,1, 
  /* [69][0][][] */ 66,-92,44,-45,22,-103,-42,127,-9,64,67,65,-25,59,-35,-10, 
  /* [70][0][][] */ 53,9,127,52,108,-20,120,8,47,31,-60,28,-61,66,-67,32, 
  /* [71][0][][] */ 2,27,84,-77,-127,-80,17,13,-22,-12,21,-92,-79,-1,4,31, 
  /* [72][0][][] */ -52,-94,27,-112,78,-9,7,40,-55,18,-127,-23,62,115,-49,108, 
  /* [73][0][][] */ 19,13,47,-17,127,-103,-55,17,-46,101,-97,40,-100,-62,120,-22, 
  /* [74][0][][] */ -110,2,-127,-64,50,-48,-40,23,-75,3,-109,-25,-43,-56,-46,77, 
  /* [75][0][][] */ 99,-18,50,-41,21,8,-127,-17,-13,-105,65,-2,5,-9,-5,-10, 
  /* [76][0][][] */ 13,-62,-34,113,53,98,104,-70,79,-127,66,115,47,-79,-76,39, 
  /* [77][0][][] */ -35,-40,127,-18,31,-33,-3,-114,16,21,45,80,45,40,9,6, 
  /* [78][0][][] */ -63,17,2,-32,-7,-62,40,-8,28,-15,24,-82,-102,-69,-127,-47, 
  /* [79][0][][] */ -122,-68,-35,14,127,24,-21,40,3,25,-11,74,-65,-81,-96,-6, 
  /* [80][0][][] */ 14,-112,62,127,-23,-19,-101,83,-13,29,65,-9,-60,-2,-8,58, 
  /* [81][0][][] */ 95,73,-10,61,1,23,30,127,15,28,111,64,108,27,72,-27, 
  /* [82][0][][] */ -63,7,0,-36,19,-127,-104,-75,4,70,-36,-30,-34,97,-80,-17, 
  /* [83][0][][] */ 93,-14,75,-27,-43,-13,-108,-15,19,-127,17,-45,-25,-16,8,-20, 
  /* [84][0][][] */ 7,-80,-114,27,122,32,42,40,-127,16,-116,-20,46,-44,-94,25, 
  /* [85][0][][] */ 26,118,63,-33,127,14,40,-114,105,-30,39,-18,108,-79,16,-23, 
  /* [86][0][][] */ 119,-32,127,50,4,-52,74,34,-57,-51,-95,-50,38,21,-58,8, 
  /* [87][0][][] */ -12,2,12,-81,63,-32,-38,18,29,-37,69,-26,-83,-127,-7,23, 
  /* [88][0][][] */ -54,-30,40,6,26,33,-66,-34,0,11,-71,-127,-39,-35,-11,-18, 
  /* [89][0][][] */ -92,15,14,-78,20,1,-127,38,87,25,-72,-3,-24,-91,-54,-19, 
  /* [90][0][][] */ -7,-13,-23,-69,127,25,-56,33,47,57,25,-17,38,16,-50,-31, 
  /* [91][0][][] */ -33,-71,33,52,-44,-2,-11,79,-40,-44,31,-51,4,66,36,127, 
  /* [92][0][][] */ -8,73,12,-7,-13,69,-103,54,-32,-12,62,-8,-24,127,61,24, 
  /* [93][0][][] */ -18,80,-49,-73,52,76,-82,6,49,80,56,59,-127,21,-45,58, 
  /* [94][0][][] */ 17,55,82,4,-127,-40,14,-4,25,-20,27,-12,-57,-25,9,-20, 
  /* [95][0][][] */ -19,30,42,-15,127,-29,-97,70,21,14,-91,98,-14,-3,103,-48, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0016181253595277667, 0.0023292596451938152, 0.001711058896034956, 0.0017607186455279589, 0.0013790525263175368, 0.0026933299377560616, 0.0019546879921108484, 0.0024130395613610744, 0.0022687152959406376, 0.0025411758106201887, 0.0016812829999253154, 0.0026902426034212112, 0.0015932566020637751, 0.0013514242600649595, 0.0015508399810642004, 0.0019289861666038632, 0.0037217671051621437, 0.0020725878421217203, 0.0018095395062118769, 0.0012604426592588425, 0.0020060497336089611, 0.002105561550706625, 0.0013597889337688684, 0.0019972063601016998, 0.0035789990797638893, 0.0021247300319373608, 0.0017769874539226294, 0.002439672127366066, 0.0016139145009219646, 0.0020428963471204042, 0.0015812409110367298, 0.0031679524108767509, 0.0025245363358408213, 0.0015260619111359119, 0.0013750871876254678, 0.0020329002290964127, 0.0021501239389181137, 0.0015076647978276014, 0.0013455178122967482, 0.001574588124640286, 0.0024328646250069141, 0.0018645928939804435, 0.0022551983129233122, 0.0015405337326228619, 0.0019457392627373338, 0.0017252101097255945, 0.0027842393610626459, 0.0019136237679049373, 0.0010853451676666737, 0.001601970405317843, 0.0021378083620220423, 0.001857408438809216, 0.0014695891877636313, 0.0023535604123026133, 0.0022593506146222353, 0.0020769236143678427, 0.0018302351236343384, 0.0017146033933386207, 0.0021480959840118885, 0.0020618634298443794, 0.002123920014128089, 0.0019246632000431418, 0.0023620226420462132, 0.0020370546262711287, 0.0012978230370208621, 0.0014166105538606644, 0.0012757594231516123, 0.0019583743996918201, 0.0020299174357205629, 0.0022477288730442524, 0.0020651873201131821, 0.0015930517110973597, 0.0016721936408430338, 0.0015976033173501492, 0.0016435896977782249, 0.0013634337810799479, 0.0015969137893989682, 0.0022217016667127609, 0.001774710020981729, 0.0019361366285011172, 0.0010242959251627326, 0.0017745334189385176, 0.0021869421470910311, 0.0019959427881985903, 0.0016601373208686709, 0.0022888560779392719, 0.0017508147284388542, 0.0018263189122080803, 0.0026076247449964285, 0.002228856785222888, 0.0026177216786891222, 0.0019689348991960287, 0.0015669525600969791, 0.0017147406470030546, 0.0028294969815760851, 0.0020455506164580584, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1380, 34, 3795, 5061, 5300, -1731, 3468, -1064, -2068, -685, 4286, -1850, 3930, 4948, 2487, 2308, -484, -408, -1752, 5819, 2533, -449, 2936, -655, -477, 3496, 1764, 1531, 5178, 2447, 3908, 809, 1609, 4716, 5303, 2960, -506, 3515, 3119, -3924, -274, 1522, -31, 1892, -1258, 600, -986, 866, -7297, 1868, 1237, -2791, 5673, -597, 1890, 1292, 1280, 2783, -837, -1616, 395, 1723, 409, 3731, 6124, 3696, 3470, 4298, 3831, -695, 2648, 5101, 3127, -1734, 5069, 6772, 518, -3097, 793, 1249, 9450, 2016, -323, -2411, 1526, 758, 1778, -2467, 2764, -354, 2626, 1253, -104, -2812, -109, 1592, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.0001404072972945869, 0.00020211352966725826, 0.00014847128477413207, 0.00015278033970389515, 0.00011966255988227203, 0.00023370448616333306, 0.00016961136134341359, 0.00020938324450980872, 0.00019686001178342849, 0.00022050183906685561, 0.00014588757767342031, 0.00023343659995589405, 0.00013824939378537238, 0.00011726521188393235, 0.00013456883607432246, 0.00016738117847125977, 0.00032294361153617501, 0.0001798417215468362, 0.00015701659140177071, 0.00010937060142168775, 0.00017406810366082937, 0.00018270290456712246, 0.00011799103231169283, 0.00017330075206700712, 0.00031055539147928357, 0.00018436617392580956, 0.00015419200644828379, 0.0002116942050633952, 0.00014004191325511783, 0.0001772653340594843, 0.00013720676361117512, 0.00027488823980093002, 0.00021905799803789705, 0.00013241880515124649, 0.00011931848712265491, 0.0001763979671522975, 0.0001865696394816041, 0.00013082246005069464, 0.00011675270070554689, 0.00013662948913406581, 0.00021110349916853011, 0.00016179366502910852, 0.00019568711286410689, 0.00013367454812396318, 0.00016883487114682794, 0.00014969920448493212, 0.00024159284657798707, 0.00016604815027676523, 9.4177114078775048e-05, 0.00013900549674872309, 0.00018550100503489375, 0.00016117026098072529, 0.00012751857866533101, 0.0002042221458395943, 0.00019604741828516126, 0.00018021793221123517, 0.00015881238505244255, 0.00014877883950248361, 0.00018639367772266269, 0.00017891114111989737, 0.00018429588817525655, 0.00016700605920050293, 0.0002049564354820177, 0.0001767584471963346, 0.00011261415056651458, 0.00012292152678128332, 0.00011069965694332495, 0.00016993124154396355, 0.00017613913223613054, 0.00019503898511175066, 0.0001791995600797236, 0.00013823161134496331, 0.00014509887841995806, 0.00013862656487617642, 0.00014261687465477735, 0.00011830730363726616, 0.00013856672740075737, 0.00019278055697213858, 0.00015399439143948257, 0.00016800162848085165, 8.8879773102235049e-05, 0.0001539790682727471, 0.00018976442515850067, 0.00017319110338576138, 0.00014405274123419076, 0.00019860765314660966, 0.00015192096179816872, 0.00015847256872802973, 0.00022626771533396095, 0.00019340141443535686, 0.00022714384249411523, 0.00017084759019780904, 0.00013596694043371826, 0.00014879075752105564, 0.00024551991373300552, 0.00017749564722180367, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 15,53,23,-86,-89,2,-17,74,-20,-47,-122,-99,-114,104,-59,61,28,84,18,0,-39,-103,-40,7,75,-117,0,98,45,-87,63,-7,-91,80,23,-75,-28,11,-91,-22,-122,-59,105,-72,64,-25,-93,100,-126,90,-92,4,-28,59,-1,48,-95,-90,-4,22,-13,82,36,-127,66,-127,-103,39,46,-84,-18,117,-66,36,-46,106,-62,-77,-28,-18,-116,38,67,22,-56,-86,-61,-50,23,41,22,51,-106,-104,-52,47, 
  /* [1][0][][] */ 87,11,76,41,31,-69,0,126,30,63,-71,50,-102,-96,36,-68,-67,-28,19,-23,106,101,-79,-74,-2,-2,-23,-64,89,54,-18,-62,-90,-76,-84,-65,41,-62,-38,20,-2,99,2,39,48,11,-42,43,-2,-114,7,-69,-6,-125,-47,-93,41,52,97,11,71,-77,-29,-30,125,-7,8,93,82,92,48,119,6,36,63,36,71,-92,127,-4,-75,79,-59,64,39,0,-106,38,-56,-53,62,-25,-43,30,47,14, 
  /* [2][0][][] */ 9,-59,-70,-89,-31,10,68,0,24,-32,-56,-27,50,80,-63,-99,-75,32,-35,31,-81,-42,29,28,-20,76,-40,-40,-5,-33,-67,30,57,-52,53,21,-69,39,-64,56,54,-18,98,64,-57,-15,63,36,-5,-34,3,97,-74,-65,7,-56,-25,20,77,98,81,72,-53,93,99,80,-65,-57,3,21,74,-18,38,24,-14,-56,81,117,-90,-63,-71,127,78,37,-53,57,47,25,77,78,95,102,-25,1,70,92, 
  /* [3][0][][] */ -75,83,52,-71,91,91,67,60,95,16,34,-45,88,37,90,97,-107,62,-46,92,-67,61,-68,8,127,65,-95,15,46,27,-41,95,-92,23,21,-83,-82,-29,-74,-55,-84,-35,-65,18,-61,-97,-23,-25,-46,101,-32,-85,8,48,89,-60,-80,-95,65,-84,-78,27,-80,-26,9,75,-54,-34,-36,-33,76,2,73,82,-50,-68,-106,-31,69,-56,50,110,-74,-76,65,-77,90,-81,-29,-92,89,83,-79,-46,27,-28, 
  /* [4][0][][] */ -70,28,92,-7,55,21,-25,-48,27,44,-93,-57,-58,114,28,-89,75,35,-48,-81,-88,87,-104,-37,-35,-127,92,41,7,-104,119,31,-108,55,-49,-66,85,-13,-108,-97,108,91,-86,-95,-10,100,-30,-43,108,-42,103,106,86,-115,-2,51,-105,-24,103,-44,88,-26,-28,77,-54,38,-121,-75,27,96,47,-12,-48,4,32,-66,-20,71,-32,55,34,-106,39,0,76,107,26,-69,-29,-22,97,69,95,-26,-108,-93, 
  /* [5][0][][] */ -68,96,-33,-44,25,-18,-38,60,-14,-74,49,21,-59,28,97,92,-100,101,86,-2,96,16,-38,85,-127,40,-21,-47,-21,37,56,0,-61,61,59,54,91,-48,-44,-28,56,-10,-3,-39,92,101,2,-2,9,79,87,19,-66,-48,42,-30,84,-29,-55,59,54,59,2,55,65,-41,46,44,86,-50,32,10,-78,74,24,-70,-41,32,34,7,66,68,-68,-49,45,-41,-75,-5,65,96,-28,94,-21,92,5,81, 
  /* [6][0][][] */ 117,-21,4,-96,-107,-24,65,-102,3,85,33,95,56,-64,-25,117,-91,97,21,89,-115,119,95,20,-102,51,-111,-105,-47,-93,7,54,-84,24,75,87,-109,-52,10,58,-84,50,84,2,-110,83,-107,-30,43,99,-3,-33,-77,-104,-65,-89,-62,-6,7,79,54,-53,94,14,127,95,-24,52,0,-101,-43,-18,74,-49,98,109,-47,27,-50,-83,28,-31,-42,-106,85,-16,-2,112,-7,-100,-101,-34,-73,-18,100,-110, 
  /* [7][0][][] */ 97,41,-36,-86,95,-9,-13,-60,27,76,-4,0,-48,127,83,56,71,-7,-2,48,68,-73,-10,-58,119,-43,43,97,-71,-24,-5,10,-86,-25,60,-6,99,7,1,-96,-82,49,-53,69,12,-48,-60,-43,55,-8,-28,125,-38,53,77,51,81,-109,-2,-93,15,-69,-29,-43,-3,-44,-95,-61,45,-90,-99,9,-89,69,-27,71,-60,-29,-65,-3,-89,79,5,76,-42,-50,-16,-71,51,108,120,-76,77,-60,80,-89, 
  /* [8][0][][] */ -64,-53,-103,-1,55,-10,-24,-83,82,-111,118,-114,-32,-95,-107,-1,0,72,99,-61,101,80,99,-57,-101,-99,20,-97,-79,-76,-100,-11,-56,-13,-86,127,-104,-88,-39,-69,-40,20,47,-15,-5,-57,-37,99,51,84,-25,-48,114,-2,-12,-102,-8,3,-13,14,-86,-17,-91,94,-11,-44,18,-72,-68,41,-109,60,33,98,123,84,88,-29,-5,-15,41,81,3,47,65,-71,-26,76,60,69,-54,69,-115,116,118,-45, 
  /* [9][0][][] */ -45,-28,14,67,32,49,83,25,19,39,66,52,97,46,-42,-24,-8,-65,-80,-86,-97,69,20,-21,-46,-70,-55,57,58,-126,-42,47,-103,-72,103,-26,-33,-8,-79,-79,109,112,-19,4,30,53,23,-16,-34,-46,-98,21,-114,35,10,65,0,-86,13,13,-4,-76,27,75,-127,71,67,69,93,-75,-119,6,41,13,62,-108,119,-62,7,-48,-122,-40,72,-57,56,-31,-99,27,-74,98,37,-1,-92,42,19,52, 
  /* [10][0][][] */ -104,36,-82,-92,-48,81,-118,-106,77,-101,77,84,-15,24,60,-13,119,7,-76,31,-17,-68,-47,83,64,100,-39,-32,-105,-84,-18,-105,62,26,100,-120,105,-80,36,105,86,30,22,48,-25,19,-1,-9,-71,118,81,127,92,-85,89,56,19,-20,73,-14,63,57,87,52,-45,95,-9,49,-1,-12,70,20,-101,-103,15,52,63,113,67,-5,-7,59,2,37,8,86,-83,21,-14,24,-58,82,53,61,17,-18, 
  /* [11][0][][] */ 90,71,-61,-84,93,-6,-41,-71,-84,44,49,-35,31,-68,64,-67,-127,78,-4,-43,-31,-26,70,-82,-122,99,79,88,9,57,6,42,52,88,-107,-56,19,123,-43,-65,42,-114,115,-93,94,38,-120,-13,36,75,-49,66,63,-82,-40,-95,-20,88,-106,76,-24,8,127,-52,70,-19,104,4,98,90,-46,30,-79,-23,33,-93,-3,44,-62,4,-83,-47,-101,75,7,-91,-50,-18,-78,62,-31,-51,71,45,119,12, 
  /* [12][0][][] */ -41,-30,-20,126,43,-19,-12,-81,12,26,-6,80,-32,-40,-13,56,59,-25,36,123,-49,-24,81,108,63,102,-46,43,109,-60,92,79,63,-1,27,-39,24,-39,60,42,92,105,42,-69,48,-2,-6,81,-32,127,-23,101,-11,-54,93,61,18,-67,-42,-57,34,0,91,21,-26,18,16,-28,-81,-72,69,0,-71,-35,-13,19,-40,29,64,-34,60,115,85,39,65,24,16,-59,-10,-65,35,45,-50,-37,-61,105, 
  /* [13][0][][] */ 53,39,69,-58,82,15,15,-23,13,-100,28,11,-7,59,45,68,40,41,29,69,99,-10,-14,-65,18,-70,13,-68,22,-65,-36,-20,-37,-85,17,7,54,-83,69,30,-39,-73,71,78,53,5,44,58,-93,49,-28,-39,-28,-116,9,65,17,-37,50,-48,-77,-10,69,-49,-66,31,-12,-88,-67,-49,-96,78,-34,1,95,-27,-29,43,-1,-36,64,7,15,60,75,-67,-104,70,-56,-30,25,-27,37,127,-19,-74, 
  /* [14][0][][] */ -26,-44,94,58,55,-71,16,-5,1,66,-23,-81,16,121,-15,48,-99,-11,-26,-94,3,49,-41,-57,-62,-24,84,31,76,-69,81,-31,-41,111,125,26,36,76,-83,-77,102,110,127,41,97,-56,-3,-43,-113,1,-27,-91,-11,-123,90,-99,26,-75,-41,-84,-73,-86,27,14,-2,80,12,-4,-96,-8,46,-54,-92,-65,68,-14,-71,-26,86,22,124,-47,119,21,-57,-84,-57,79,55,-1,-69,-24,-23,-108,-69,-52, 
  /* [15][0][][] */ 27,41,-16,-49,-42,71,15,-33,-127,-29,70,-95,-24,-56,-44,-9,-30,60,-83,-22,-20,-74,-38,-41,-2,7,54,73,-11,-36,-49,25,-30,72,-80,0,-40,13,-37,-114,-22,79,69,-31,31,48,-55,-80,-12,-54,0,-44,-35,-23,30,-32,42,-8,50,-22,-105,-73,-57,-24,-8,30,-23,-36,5,-98,-95,22,12,6,2,53,-29,13,-62,-94,-5,-44,-7,-26,-92,-22,37,-78,39,-100,-61,61,-17,-47,81,-74, 
  /* [16][0][][] */ -12,14,-92,107,74,-64,88,89,-30,36,71,-56,-56,78,-123,-32,30,62,-60,-33,-119,-34,-99,13,127,-66,-79,18,-53,82,99,24,-82,-48,9,4,-15,83,-113,49,46,32,66,-57,-92,-19,-86,-57,-31,39,80,74,-41,-114,50,4,40,76,-38,-63,27,-25,-9,57,-17,23,55,-48,-8,-55,67,7,68,-2,38,-78,73,-47,-97,-50,-31,36,-16,-91,86,-47,1,-107,100,-86,94,-100,44,18,58,-81, 
  /* [17][0][][] */ 4,85,-92,-31,-20,34,-39,102,23,-18,91,-37,-23,101,40,-48,6,74,-11,64,24,8,-47,-16,-127,16,-22,-66,-31,49,61,-85,62,-23,-23,63,38,-43,-15,40,-41,94,-13,-64,102,28,-73,-74,15,-91,0,-124,-61,-2,42,24,-39,79,-51,-51,95,88,69,71,-40,37,-71,69,-52,-60,13,-13,-27,-18,6,40,-95,-70,104,-75,-47,-23,91,-57,76,14,-45,92,11,116,-26,58,-81,-34,68,-29, 
  /* [18][0][][] */ 87,-92,-85,-16,48,39,-105,-77,-44,41,-70,-78,7,99,34,46,11,82,-85,-55,-66,61,7,15,-8,-20,47,-90,-14,-85,34,-95,-23,90,107,-51,5,-44,-47,-67,-87,17,127,-43,-14,63,92,-66,77,2,-56,-93,-47,-2,-26,36,75,31,-121,67,-75,-12,60,92,-20,42,-81,-86,106,-39,-65,81,-78,103,16,108,31,55,0,-3,-51,-46,-91,77,23,-93,91,0,63,24,-34,116,-79,16,-7,-104, 
  /* [19][0][][] */ 79,70,-97,80,110,78,-61,20,93,-39,10,-55,76,80,125,-37,25,-89,-28,119,-79,-68,33,115,24,-10,41,-24,81,51,114,-111,66,-16,-83,92,-98,-23,-58,25,57,30,60,56,-26,56,-110,107,106,20,93,-52,68,-96,87,106,53,21,-97,-43,-28,67,116,-41,103,-3,-62,92,118,-5,-95,16,22,88,27,95,12,62,-69,127,-99,-78,114,-110,47,-7,84,-72,-77,3,-19,18,-30,-31,89,-111, 
  /* [20][0][][] */ 5,-84,-9,62,90,34,81,29,-47,-55,19,33,-22,-64,-6,-83,2,-55,85,35,50,-118,90,-11,-53,104,-78,18,11,-71,-34,13,51,101,76,-55,91,19,-99,12,103,-86,-86,-25,46,22,-11,-41,71,2,99,-41,5,106,33,-67,-38,-113,78,18,-36,90,60,77,30,96,22,-60,29,69,-51,19,-79,-83,-37,111,-3,-63,31,-71,16,127,70,-30,63,56,-52,-103,109,11,-87,-66,80,-60,21,72, 
  /* [21][0][][] */ 93,106,100,-76,-23,-16,-74,-41,-54,96,22,-95,-43,-74,-92,-85,-24,-9,-86,-96,-40,45,101,-49,69,39,85,-14,-65,-93,114,13,-107,43,87,101,-107,-89,-109,28,17,56,-26,19,-56,102,-112,58,59,-127,1,-78,62,-53,-83,-53,-22,-54,77,83,12,-36,-13,68,-31,55,-61,11,1,-46,-27,12,-33,-103,-45,3,-90,107,105,82,-41,94,15,-20,-122,-74,11,29,-53,35,-73,86,-47,-93,95,-37, 
  /* [22][0][][] */ -10,-13,53,1,-20,-48,93,-3,22,2,5,33,-27,34,-20,-46,-36,-8,-47,52,26,57,27,72,28,40,-53,64,-1,-51,-12,-23,-27,78,34,42,9,-32,-44,-45,3,46,-54,-4,33,-23,75,-37,-25,25,-47,94,-19,101,-3,40,74,45,-27,69,-55,-9,-8,47,58,-46,-52,11,35,46,-30,-21,9,52,-46,24,-24,-20,18,-19,73,1,-58,19,34,127,5,41,61,53,87,26,-29,40,47,65, 
  /* [23][0][][] */ -36,-1,10,-28,-72,-8,42,23,4,-73,43,-92,-87,60,54,-31,2,27,45,15,41,81,40,-20,4,-38,-52,-54,-78,67,-11,82,64,-54,78,-5,0,84,67,-67,73,21,83,-70,-90,-6,-84,86,-4,60,-31,-30,-66,69,51,2,27,3,36,-27,-34,39,71,-91,81,-78,16,-10,76,84,-65,88,84,34,25,-35,-105,-12,-67,-7,-82,-13,-65,-77,-40,-127,79,-86,-29,-45,-27,-61,1,-29,-56,86, 
  /* [24][0][][] */ 9,97,117,103,69,-16,-103,120,-1,-95,-74,76,32,5,7,-51,-31,48,-49,92,127,-9,-15,32,-68,66,-54,-52,91,126,103,-22,111,-37,-5,-12,25,-40,-72,-78,-2,101,-65,56,-34,86,46,-56,-103,-61,41,-45,-50,65,120,-40,61,-32,-13,-22,118,47,64,-16,-105,2,-50,116,78,-77,-12,41,5,-94,-1,-34,31,-75,-17,82,73,-72,68,-60,-71,-86,-15,-51,-82,91,-51,-20,-72,-54,80,106, 
  /* [25][0][][] */ -8,15,24,82,24,32,-5,-13,11,56,70,73,-42,73,43,-44,17,2,-74,33,39,66,47,96,98,-25,-51,7,65,32,-41,66,-24,-22,81,73,-32,74,-49,78,-21,127,32,13,5,-52,-34,-38,3,52,-65,41,36,55,-56,-32,40,-25,118,28,-49,87,-48,67,-40,-37,-73,81,9,18,57,44,29,63,-12,48,48,41,13,-39,-22,45,-53,93,85,88,28,20,4,68,0,16,16,18,67,79, 
  /* [26][0][][] */ 70,-91,-3,6,84,-106,105,-46,42,-16,-94,22,-46,-62,29,-30,109,1,-55,-78,41,-52,67,96,37,-20,37,44,27,-16,-52,-39,-13,48,46,127,-2,119,-118,99,98,16,-39,-108,-15,41,125,24,23,71,87,2,99,111,65,38,104,-5,-60,-18,7,114,-69,-112,51,-36,-114,-33,-4,-43,34,39,-114,-36,-95,-75,-25,55,-32,51,108,47,-46,-12,-18,-23,-8,-97,35,22,105,107,-36,57,43,-18, 
  /* [27][0][][] */ 63,26,-99,121,-33,-22,2,-11,-95,95,-37,2,-108,82,74,-52,46,-127,-4,-105,-28,64,77,-81,-83,73,-42,44,92,-62,63,-114,107,-81,38,105,100,54,-75,-41,28,51,-24,51,66,-95,113,-64,-30,-44,53,97,103,52,-97,-73,87,-35,-28,2,29,-74,-109,-89,27,99,21,-95,38,3,35,-106,22,-74,-2,-80,-84,26,61,23,-56,-44,82,2,-98,-81,55,-36,103,18,61,102,101,36,53,-90, 
  /* [28][0][][] */ -96,122,-39,78,18,95,-103,9,55,-63,-91,67,72,-69,34,-90,-79,80,50,97,107,87,15,-85,19,-60,88,114,-48,32,-13,41,-26,25,-29,-42,44,98,-29,122,-99,-35,7,73,115,117,-18,11,97,-6,-99,-25,64,-59,30,64,95,54,45,87,54,-22,13,-111,-67,2,101,-40,-73,63,66,118,-100,60,127,32,64,-66,1,87,-63,38,70,-43,59,-9,-75,-53,-93,29,82,-79,44,74,-7,96, 
  /* [29][0][][] */ 41,-9,46,21,-21,11,23,-92,-55,-29,-41,-96,78,-9,-62,-12,75,98,-64,104,41,-47,-76,-90,51,-57,-81,-43,-39,101,-48,27,-96,126,113,9,-19,-83,34,-24,102,-56,-4,45,-67,76,-111,12,-50,62,37,15,-71,-32,95,95,34,-8,-58,13,124,106,-62,42,86,-70,-97,44,79,-11,-25,-38,-13,-96,-9,-88,-50,10,14,75,4,-64,38,-51,35,-127,-59,95,-15,50,-62,-48,-103,7,-61,-55, 
  /* [30][0][][] */ -67,-90,-88,-59,63,96,50,18,-99,37,30,41,100,59,-99,-110,78,115,86,5,-7,-68,120,-97,-22,58,-21,11,84,-35,11,43,-6,-28,27,37,-91,-37,90,-23,-21,-112,-59,-82,84,127,-46,-31,-87,99,-90,-68,-115,-51,97,-106,99,63,-8,-10,-44,-112,55,80,120,104,37,68,100,78,110,-78,38,-109,-80,20,54,-53,1,-34,51,27,112,24,87,-100,60,36,106,47,53,-118,6,89,-77,-75, 
  /* [31][0][][] */ 41,112,72,-35,-67,-11,98,-87,-75,-51,57,-53,-83,-70,85,18,-6,40,-19,27,-25,-42,91,6,120,91,-46,-61,-14,74,54,62,75,33,54,105,42,119,-18,-90,7,108,-96,29,24,96,64,-4,-104,-8,-58,80,22,-63,-14,0,21,24,29,110,-9,-127,112,-103,20,-93,72,-63,-112,28,118,-35,70,-51,-40,58,-6,94,49,-79,-5,22,-110,-73,-23,104,118,-104,-60,86,51,-27,-33,-31,-110,84, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0018136228900402784, 0.0018748415168374777, 0.0020603272132575512, 0.0020617716945707798, 0.0018524685874581337, 0.0022781109437346458, 0.0017936386866495013, 0.0020576757378876209, 0.0018684183014556766, 0.0017502869013696909, 0.001839154283516109, 0.0018543537007644773, 0.0023608424235135317, 0.0023479873780161142, 0.0017882887041196227, 0.0032451278530061245, 0.001957685686647892, 0.0020825648680329323, 0.0019701779820024967, 0.001771906390786171, 0.0020264319609850645, 0.0019081326900050044, 0.0036390346940606833, 0.0023691703099757433, 0.0018596791196614504, 0.0030435251537710428, 0.0018027477199211717, 0.0019220849499106407, 0.0018778335070237517, 0.0018719992367550731, 0.0017687376821413636, 0.001816396601498127, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -306, 329, 171, -188, 201, 232, 439, 251, 174, -230, -320, 361, 1696, 9, 368, 393, -313, 385, 143, 296, 82, -152, 1254, 54, 278, 1488, -73, -39, 282, 419, 153, -106, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.2673480493249372e-05, 4.41139200120233e-05, 4.8478286771569401e-05, 4.8512276407564059e-05, 4.3587497202679515e-05, 5.3602612752001733e-05, 4.2203264456475154e-05, 4.8415899073006585e-05, 4.3962783820461482e-05, 4.1183222492691129e-05, 4.3274219933664426e-05, 4.3631851440295577e-05, 5.5549233366036788e-05, 5.5246764532057568e-05, 4.2077383113792166e-05, 7.6355951023288071e-05, 4.6063192712608725e-05, 4.9001526349456981e-05, 4.6357130486285314e-05, 4.1691917431307957e-05, 4.7680754505563527e-05, 4.4897242332808673e-05, 8.5624349594581872e-05, 5.5745185818523169e-05, 4.3757157982327044e-05, 7.161236135289073e-05, 4.2417595977894962e-05, 4.5225529902381822e-05, 4.4184318539919332e-05, 4.4047043047612533e-05, 4.1617357055656612e-05, 4.2738745833048597e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -25,-30,-22,-30,80,-6,74,41,19,-57,-51,-50,84,-35,83,-19,-57,-8,60,12,68,-24,127,-39,-28,99,16,-66,-55,-55,25,25, 
  /* [1][0][][] */ 86,127,-90,-72,15,104,22,-64,72,-99,-87,64,-101,7,29,101,-84,101,101,77,-73,4,-59,53,107,-28,-84,-93,66,92,110,-111, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0052551231347024441, 0.0034656657371670008, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 23216, -34477, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00020393055456224829, 0.00013448878598865122, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.097317390143871307, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.069695793092250824, } };
const TfArray<1, int> quant50_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.061520807445049286, } };
const TfArray<1, int> quant53_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.091728925704956055, } };
const TfArray<1, int> quant54_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.060030683875083923, } };
const TfArray<1, int> quant58_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.021949691697955132, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.055155884474515915, } };
const TfArray<1, int> quant61_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.069514960050582886, } };
const TfArray<1, int> quant62_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.022872570902109146, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.040362533181905746, } };
const TfArray<1, int> quant65_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.086771577596664429, } };
const TfArray<1, int> quant66_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.038806047290563583, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12088481336832047, } };
const TfArray<1, int> quant69_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
