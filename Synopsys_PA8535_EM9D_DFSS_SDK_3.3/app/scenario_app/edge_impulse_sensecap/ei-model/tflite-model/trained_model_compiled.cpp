/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 25.01.2023 08:32:25

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 241344;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -29, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 120, 125, 58, 
  /* [3][1][][] */ 1, -22, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 29, -55, 2, 
  /* [4][1][][] */ 28, -127, 7, 
  /* [4][2][][] */ 20, -89, -7, 
  /* [5][0][][] */ -60, 30, -1, 
  /* [5][1][][] */ -127, 34, 4, 
  /* [5][2][][] */ -81, 26, 0, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -52, 56, -17, 
  /* [6][2][][] */ -37, -53, -90, 
  /* [7][0][][] */ 37, 23, -20, 
  /* [7][1][][] */ 127, 65, -10, 
  /* [7][2][][] */ 26, 2, -22, 
  /* [8][0][][] */ -22, -31, 52, 
  /* [8][1][][] */ -55, -88, 127, 
  /* [8][2][][] */ -27, -62, 96, 
  /* [9][0][][] */ -21, 53, -12, 
  /* [9][1][][] */ -16, 127, -15, 
  /* [9][2][][] */ -10, 85, -8, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -79, 79, 5, 
  /* [13][0][][] */ 79, 25, -14, 
  /* [13][1][][] */ 127, 111, -8, 
  /* [13][2][][] */ 48, 83, 32, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -82, -26, 14, 
  /* [15][1][][] */ -122, -127, 10, 
  /* [15][2][][] */ -33, -87, -16, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.047968395054340363, 0.21663233637809753, 0.06099846214056015, 0.036214642226696014, 0.0064064390026032925, 0.0074254651553928852, 0.032030805945396423, 0.0073423674330115318, 0.032798655331134796, 0.0078887082636356354, 0.1128401979804039, 0.17660927772521973, 0.063421547412872314, 0.0040626884438097477, 0.1722661554813385, 0.0080303065478801727, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 1214, 298, -60, 1676, 59547, 53758, 5630, 5341, 7424, 12073, 1372, 22, 7074, 1561, 88, 43890, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00018811137124430388, 0.0008495385991409421, 0.00023920966486912221, 0.00014201820886228234, 2.5123292289208621e-05, 2.9119473765604198e-05, 0.00012561101175379008, 2.8793599994969554e-05, 0.00012862218136433512, 3.0936113034840673e-05, 0.00044251061626709998, 0.00069258542498573661, 0.00024871196364983916, 1.5932111637084745e-05, 0.00067555357236415148, 3.1491399568039924e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 1,-5,5,1,-18,11,3,17,-7,-11,-1,-8,-1,-8,3,1, 7,-6,1,1,14,-1,11,-26,-6,9,-6,86,-7,20,4,1, 5,-5,-4,2,1,-13,-1,10,4,3,-2,-10,-5,-5,-5,1, 
  /* [0][1][][] */ 13,-11,3,1,127,-23,-127,-20,127,127,0,-4,114,-25,1,-17, -127,127,127,-4,-88,-90,-13,-101,19,-106,127,127,127,127,127,127, 24,-4,-3,-3,-11,127,9,-10,1,-12,-7,-7,4,-4,-13,-6, 
  /* [0][2][][] */ 4,0,4,-13,-16,16,56,8,-6,-8,0,0,-3,0,-5,-10, 26,-20,0,-127,8,-15,-8,127,-3,1,-1,-14,-15,-58,-11,-35, 6,-5,0,-5,2,-4,3,-3,4,2,-4,-2,-5,-5,-6,-10, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0047556273639202118, 0.0081650270149111748, 0.0070476587861776352, 0.0076233665458858013, 0.041859012097120285, 0.032649360597133636, 0.0071290913037955761, 0.032814200967550278, 0.011362225748598576, 0.043773766607046127, 0.009725489653646946, 0.0082765426486730576, 0.0044355182908475399, 0.011683515273034573, 0.0086471792310476303, 0.021135136485099792, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 20188, -647, -208, 3534, -1077, 118, 9341, 1378, -555, 260, -2148, 3015, 1140, -581, -437, -1291, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00011189711949555203, 0.00019211828475818038, 0.00016582726675551385, 0.00017937333905138075, 0.00098491797689348459, 0.00076822028495371342, 0.00016774333198554814, 0.00077209883602336049, 0.00026734650600701571, 0.0010299710556864738, 0.0002288350515300408, 0.00019474218424875289, 0.00010436513548484072, 0.00027490625507198274, 0.00020346304518170655, 0.00049729732563719153, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -11,-12,-13,-64,-22,-37,17,-17,38,6,-33,-6,110,127,-17,-100, 
  /* [1][0][][] */ 127,-57,-38,17,-44,69,-69,-42,-39,81,-31,-53,-8,3,-60,-15, 
  /* [2][0][][] */ -33,-96,35,44,42,-51,-76,-20,29,-85,23,-127,44,-24,-75,24, 
  /* [3][0][][] */ 39,13,12,9,-13,71,-52,-22,127,46,10,24,4,-14,12,25, 
  /* [4][0][][] */ -99,-40,-30,-127,-6,42,57,-118,34,-19,-49,-36,-122,31,-39,-23, 
  /* [5][0][][] */ 86,51,72,-28,49,-42,-127,-118,-15,-72,65,50,-56,50,65,-47, 
  /* [6][0][][] */ 111,36,-127,-83,26,-74,1,-92,-44,21,-122,88,87,-86,2,75, 
  /* [7][0][][] */ -127,-5,103,-32,-64,2,-4,-65,-47,59,82,-30,66,-26,28,29, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0070227859541773796, 0.0093173850327730179, 0.0076353051699697971, 0.010117692872881889, 0.0078848553821444511, 0.0067041441798210144, 0.0073861195705831051, 0.011251404881477356, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -7308, -3163, 11582, -9957, 23053, 7223, -8418, 11015, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00016524203238077462, 0.000219232591916807, 0.00017965424922294915, 0.00023806336685083807, 0.00018552601977717131, 0.00015774456551298499, 0.00017379104974679649, 0.00026473894831724465, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -37,26,1,-14,-85,-43,-127,31, 
  /* [1][0][][] */ 85,-84,-60,-47,127,-92,94,31, 
  /* [2][0][][] */ -95,115,-49,-127,51,-12,-31,38, 
  /* [3][0][][] */ 48,28,96,9,97,118,127,-10, 
  /* [4][0][][] */ -70,-127,55,18,-53,-97,-6,-22, 
  /* [5][0][][] */ 127,-18,75,63,-68,-13,-4,-21, 
  /* [6][0][][] */ 23,33,127,-24,36,-35,-40,28, 
  /* [7][0][][] */ 29,7,-127,-36,-40,95,91,-72, 
  /* [8][0][][] */ 5,126,-32,12,67,127,48,57, 
  /* [9][0][][] */ 10,127,-53,95,24,-106,45,123, 
  /* [10][0][][] */ 1,-127,-13,-30,-84,-123,-65,-78, 
  /* [11][0][][] */ -127,-80,109,50,-3,-69,109,62, 
  /* [12][0][][] */ -23,38,-127,79,27,-54,-74,92, 
  /* [13][0][][] */ 96,-127,90,73,8,33,37,-63, 
  /* [14][0][][] */ -21,91,-46,-127,-29,-111,-28,-58, 
  /* [15][0][][] */ 39,119,36,-23,35,-70,100,-127, 
  /* [16][0][][] */ -121,-127,-60,100,-52,28,-16,89, 
  /* [17][0][][] */ -23,-110,-127,89,-60,76,-42,81, 
  /* [18][0][][] */ -94,-62,-38,97,-4,81,2,127, 
  /* [19][0][][] */ 63,-113,97,-127,16,-64,24,-39, 
  /* [20][0][][] */ -3,65,26,18,34,127,69,-4, 
  /* [21][0][][] */ 26,112,45,-33,36,-67,94,-127, 
  /* [22][0][][] */ 19,13,109,22,-12,127,33,-37, 
  /* [23][0][][] */ -109,-65,34,-68,90,97,-62,-127, 
  /* [24][0][][] */ -100,-97,44,-96,110,109,-58,-127, 
  /* [25][0][][] */ 127,6,-61,-14,11,36,-66,-6, 
  /* [26][0][][] */ -124,-36,-127,-26,-48,-30,19,-2, 
  /* [27][0][][] */ 77,31,4,-55,-127,-20,85,92, 
  /* [28][0][][] */ -127,-81,8,48,-75,-102,7,-2, 
  /* [29][0][][] */ 127,97,40,-118,37,9,-62,-97, 
  /* [30][0][][] */ -91,-63,41,-61,72,83,-49,-127, 
  /* [31][0][][] */ 48,40,-5,127,3,-75,13,11, 
  /* [32][0][][] */ -27,127,-7,39,21,73,-16,50, 
  /* [33][0][][] */ -34,127,-77,15,30,-27,-25,0, 
  /* [34][0][][] */ -127,-101,-49,97,-21,7,11,97, 
  /* [35][0][][] */ -49,127,-31,5,65,111,53,71, 
  /* [36][0][][] */ 69,37,3,-49,-127,-30,104,120, 
  /* [37][0][][] */ -61,108,22,17,-127,101,-21,-98, 
  /* [38][0][][] */ 44,33,33,21,127,67,107,48, 
  /* [39][0][][] */ -25,-75,36,-12,5,36,-95,127, 
  /* [40][0][][] */ -69,-56,-78,127,-26,0,14,70, 
  /* [41][0][][] */ 127,9,57,101,-50,-10,-2,-30, 
  /* [42][0][][] */ -40,4,-62,-127,51,-104,7,78, 
  /* [43][0][][] */ 23,-4,83,-5,39,127,88,8, 
  /* [44][0][][] */ -31,-27,-66,127,47,14,-41,-36, 
  /* [45][0][][] */ 70,123,106,-113,46,-60,33,-127, 
  /* [46][0][][] */ -29,-127,-44,34,-5,41,-60,119, 
  /* [47][0][][] */ 49,43,123,10,95,117,127,-29, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0045766299590468407, 0.0040015731938183308, 0.0030744557734578848, 0.0031091228593140841, 0.00079776335041970015, 0.0032239363063126802, 0.0053719459101557732, 0.0020659435540437698, 0.0028032963164150715, 0.0055880676954984665, 0.0032217700500041246, 0.002926284447312355, 0.002288770629093051, 0.0038705638144165277, 0.0030875159427523613, 0.0032789187971502542, 0.0023711088579148054, 0.00089173304149881005, 0.0025093303993344307, 0.0037166320253163576, 0.0042026112787425518, 0.0020538487005978823, 0.0045210616663098335, 0.0036642719060182571, 0.0048090545460581779, 0.0073577845469117165, 0.0032492086756974459, 0.0097935330122709274, 0.0025965620297938585, 0.00070431741187348962, 0.0036364770494401455, 0.0078852390870451927, 0.0039973622187972069, 0.0040861843153834343, 0.0032921349629759789, 0.0032556105870753527, 0.0046424665488302708, 0.0062918942421674728, 0.0038941195234656334, 0.0054040644317865372, 0.0034877650905400515, 0.003154743229970336, 0.0034001953899860382, 0.0044052917510271072, 0.004396114032715559, 0.0023433610331267118, 0.002797640860080719, 0.0029923575930297375, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 1049, -586, -422, 1290, 13055, 2111, -449, 4566, 1676, 1271, 190, 3266, 1300, 528, -882, 414, 3234, 10758, 3109, -635, 982, -1251, -87, 2105, -285, -788, 1604, -41, 3227, 14238, 2117, -56, 461, -50, 2244, -135, 362, -186, 1066, 1090, 1578, 2137, 295, -408, 643, 2261, 1396, -347, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00044728344073519111, 0.00039108196506276727, 0.00030047286418266594, 0.00030386095750145614, 7.7967051765881479e-05, 0.00031508191023021936, 0.00052501127356663346, 0.00020190890063531697, 0.00027397190569899976, 0.00054613332031294703, 0.00031487020896747708, 0.00028599178767763078, 0.00022368624922819436, 0.00037827814230695367, 0.00030174927087500691, 0.00032045546686276793, 0.0002317333419341594, 8.7150903709698468e-05, 0.00024524200125597417, 0.00036323408130556345, 0.00041072981548495591, 0.00020072684856131673, 0.00044185263686813414, 0.00035811681300401688, 0.00046999877667985857, 0.00071909138932824135, 0.00031755183590576053, 0.00095714209601283073, 0.00025376732810400426, 6.883438618388027e-05, 0.00035540037788450718, 0.00077064061770215631, 0.0003906704077962786, 0.0003993511782027781, 0.00032174709485843778, 0.00031817751005291939, 0.00045371777378022671, 0.00061491975793614984, 0.00038058028439991176, 0.00052815029630437493, 0.00034086644882336259, 0.00030831951880827546, 0.00033230806002393365, 0.00043053820263594389, 0.00042964125168509781, 0.00022902147611603141, 0.00027341919485479593, 0.00029244925826787949, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -46,-95,-25,-21,127,-64,63,-52,-87,-81,-16,-60,101,39,59,-127,54,-26,2,-35,-89,109,10,20,-25,98,60,-31,74,-70,19,-52,-108,-89,49,72,15,86,125,-74,-122,-20,34,63,51,-127,86,84, -91,-127,-72,46,-82,107,59,-63,-70,41,77,-110,127,94,95,-77,-73,-79,33,-49,-89,90,-76,120,-97,114,90,-120,86,-49,4,-121,-43,-78,80,127,101,118,127,-65,-127,-73,67,80,81,106,83,76, -15,-51,-67,83,-46,-33,23,-8,84,20,54,-72,17,61,-40,0,-78,-14,32,-40,-34,11,-76,-6,-84,62,29,-83,29,55,123,-68,20,18,-12,52,71,66,56,2,-20,91,61,24,39,31,14,-121, 
  /* [0][1][][] */ -104,-86,-31,-71,-78,-83,95,-110,-127,-127,97,-99,76,41,-118,-85,127,-127,-59,-61,-97,127,-32,16,-21,108,97,-48,-107,-77,7,-62,-96,-127,-127,67,43,86,10,-91,53,-16,79,114,89,109,121,-117, -122,-117,-127,-98,-28,127,127,-127,81,65,127,-127,96,127,50,-111,55,-89,-127,-127,-127,124,-127,127,-125,127,127,-127,-127,127,-21,-127,-127,-95,47,124,127,127,-15,-127,87,-97,127,127,127,-2,127,127, -54,-45,-119,127,66,-51,44,-24,55,23,17,-50,5,64,55,-41,-19,6,-11,-59,-74,6,-87,-18,-127,51,37,-87,-54,39,127,-94,-46,22,59,73,74,72,-28,-31,37,127,70,19,53,-47,18,31, 
  /* [0][2][][] */ -123,-25,10,29,-38,-34,34,-53,36,-48,16,-62,4,15,-51,-21,-81,-29,101,-35,-28,64,-59,-8,-5,42,67,-16,31,59,-6,-12,4,-82,-43,30,10,17,-59,-52,21,-10,34,44,28,52,19,-52, -127,-46,-42,-71,92,40,51,-65,96,24,-41,-80,-5,48,-127,-77,33,2,57,-68,-60,27,-66,53,-66,57,65,-31,31,3,-34,-39,-69,-17,-70,51,25,24,-109,-93,22,-44,72,64,40,-108,30,10, -47,-27,-60,-22,-24,-18,9,-19,-74,10,-17,-22,-11,20,21,-29,25,33,7,-48,-39,3,-25,-30,-59,14,21,-20,4,-64,51,-18,-61,28,20,37,14,24,-53,-38,3,51,13,19,16,-8,8,44, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0029327848460525274, 0.0041226167231798172, 0.006784078199416399, 0.0065085981041193008, 0.029770545661449432, 0.0062469514086842537, 0.0076378886587917805, 0.0045409328304231167, 0.0053425277583301067, 0.0032098283991217613, 0.002823962364345789, 0.0020638867281377316, 0.0041784779168665409, 0.0027037509717047215, 0.0093554062768816948, 0.0068760793656110764, 0.0053463741205632687, 0.01498662494122982, 0.0056894919835031033, 0.0070001566782593727, 0.0041195214726030827, 0.017781838774681091, 0.0055623906664550304, 0.0094714947044849396, 0.0052957469597458839, 0.0039435788057744503, 0.0025178389623761177, 0.0044082887470722198, 0.0070812352932989597, 0.035203602164983749, 0.0093496404588222504, 0.0033863019198179245, 0.0046148938126862049, 0.0062254536896944046, 0.0071285548619925976, 0.002840038388967514, 0.0047579961828887463, 0.0017530318582430482, 0.004737114068120718, 0.0028675990179181099, 0.0068391701206564903, 0.0058818324469029903, 0.0034653758630156517, 0.0041567725129425526, 0.0034169517457485199, 0.013974369503557682, 0.0031257399823516607, 0.0077363592572510242, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 13416, 5099, 5427, -388, 518, 326, -1012, 31484, 76, 1812, 7746, 64744, 1288, 3481, 551, 11445, -1207, 13357, -161, 8082, 13187, 80, 4117, -9714, 11836, 1204, 1677, 12984, 751, -1149, -9679, 11959, 4703, 1848, -190, 4478, -8088, 12031, -1459, 18723, -59, -166, 3060, 1288, 235, -540, 999, -1136, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 6.9006702688056976e-05, 9.700274677015841e-05, 0.00015962537145242095, 0.00015314348274841905, 0.00070048344787210226, 0.00014698709128424525, 0.00017971503257285804, 0.00010684548033168539, 0.00012570654507726431, 7.5525378633756191e-05, 6.6446176788304001e-05, 4.8562040319666266e-05, 9.8317126685287803e-05, 6.3617670093663037e-05, 0.00022012721456121653, 0.00016179009980987757, 0.00012579704343806952, 0.00035262646269984543, 0.00013387040235102177, 0.00016470957780256867, 9.6929921710398048e-05, 0.00041839620098471642, 0.00013087978004477918, 0.00022285869636107236, 0.00012460580910556018, 9.2790091002825648e-05, 5.9243269788566977e-05, 0.00010372444376116619, 0.00016661730478517711, 0.000828320044092834, 0.00021999154705554247, 7.967769488459453e-05, 0.00010858573659788817, 0.00014648126671090722, 0.00016773070092312992, 6.6824431996792555e-05, 0.00011195285333087668, 4.1247807530453429e-05, 0.00011146150791319087, 6.7472916271071881e-05, 0.00016092165606096387, 0.00013839606253895909, 8.153825910994783e-05, 9.780641266843304e-05, 8.0398865975439548e-05, 0.00032880870276130736, 7.3546827479731292e-05, 0.00018203198851551861, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -47,-3,30,10,-36,-16,10,9,-41,-5,-66,-59,-25,-67,-9,-30,43,-41,39,46,-15,30,-38,12,3,-41,56,-17,-5,-18,15,11,82,35,38,-127,16,-4,-17,-36,2,-19,46,51,36,5,26,5, 
  /* [1][0][][] */ 1,35,65,-26,-13,41,-47,-28,5,23,-14,-88,11,85,-17,57,-13,17,-25,-52,9,-78,-28,23,-71,-7,-3,-111,-25,-14,33,-50,48,79,-41,7,127,-32,-1,46,-28,39,-78,-23,111,-19,-29,-28, 
  /* [2][0][][] */ -5,-22,-58,14,-1,43,29,7,-10,38,-2,25,63,-96,15,-58,41,-89,27,37,-25,53,-4,29,-18,66,-21,-69,16,6,18,-67,-49,-92,35,-32,107,24,-12,-61,0,23,78,30,127,18,25,23, 
  /* [3][0][][] */ -4,23,-70,40,14,-34,-75,-102,15,-22,-35,4,5,28,31,78,-15,14,-39,22,6,-100,29,-57,-75,-11,127,-11,-41,0,-65,17,-1,-79,12,-12,-24,-42,-23,102,-48,-33,2,17,38,6,-40,47, 
  /* [4][0][][] */ -24,-47,-7,6,33,-29,-14,-12,30,-30,59,-78,3,28,11,12,-17,-24,15,-11,-2,-55,3,-21,18,-9,40,49,33,21,-16,27,-12,-1,1,-3,-67,81,34,-26,28,-26,-21,-24,-76,13,127,7, 
  /* [5][0][][] */ 45,-22,2,26,29,-42,34,-127,24,-33,-10,122,-79,71,23,-67,4,-92,16,1,-38,65,-42,-48,-64,80,-24,3,-22,53,-43,-35,28,46,33,-3,-43,-4,-43,-44,17,-35,-47,-7,-35,58,93,21, 
  /* [6][0][][] */ 46,-19,21,-9,-35,-19,-33,22,-42,6,-43,127,-41,-37,-4,58,15,44,17,37,39,-83,-18,15,26,41,-64,3,7,-42,11,37,6,12,-17,-1,10,1,-5,-6,-4,-13,41,59,-1,-37,77,-15, 
  /* [7][0][][] */ -27,3,-10,63,33,35,5,29,20,7,70,-3,123,105,62,49,45,51,-13,6,23,-16,-87,-26,17,0,-28,65,36,-22,-34,-18,35,2,42,-100,-74,37,37,59,-36,32,86,127,-60,-31,-107,62, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.010311371646821499, 0.005175507627427578, 0.0058567612431943417, 0.0060283439233899117, 0.0084604350849986076, 0.0067111761309206486, 0.0083460202440619469, 0.0059520695358514786, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 8102, 14240, -4865, 6914, -519, 3020, -11919, -19038, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00024262051738332957, 0.00012177665485069156, 0.00013780614244751632, 0.00014184338215272874, 0.00019906906527467072, 0.00015791003534104675, 0.00019637694640550762, 0.00014004869444761425, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 56,127,-86,-78,2,86,2,75, 
  /* [1][0][][] */ 55,-84,47,-127,-60,76,-88,-40, 
  /* [2][0][][] */ -28,127,119,50,111,7,60,3, 
  /* [3][0][][] */ 104,53,-74,66,-3,-113,-127,-39, 
  /* [4][0][][] */ -32,38,18,-74,-25,103,127,55, 
  /* [5][0][][] */ 19,84,-127,-75,47,90,29,-18, 
  /* [6][0][][] */ -7,127,50,47,74,19,16,-71, 
  /* [7][0][][] */ 127,-33,-40,40,20,-4,105,6, 
  /* [8][0][][] */ 68,127,56,86,108,78,90,-92, 
  /* [9][0][][] */ 63,120,-127,-99,8,104,16,74, 
  /* [10][0][][] */ -65,-42,28,-51,0,-31,-45,127, 
  /* [11][0][][] */ 12,-112,-127,-16,16,-13,33,-11, 
  /* [12][0][][] */ -34,-109,-127,-45,-115,36,-74,54, 
  /* [13][0][][] */ -14,12,-97,102,-127,-21,0,-10, 
  /* [14][0][][] */ -67,-36,-127,-6,32,2,-15,-56, 
  /* [15][0][][] */ 20,-99,-127,16,-109,-34,-44,-1, 
  /* [16][0][][] */ 127,-65,-19,67,-85,25,26,105, 
  /* [17][0][][] */ -21,121,127,-18,-43,-16,-34,-17, 
  /* [18][0][][] */ 12,-127,44,70,0,-72,50,-90, 
  /* [19][0][][] */ 127,-43,-53,44,-96,5,43,104, 
  /* [20][0][][] */ -32,-127,84,77,-13,-90,-6,-73, 
  /* [21][0][][] */ -5,-53,-20,-37,127,3,54,19, 
  /* [22][0][][] */ -127,25,-75,54,51,50,-90,-103, 
  /* [23][0][][] */ -82,-55,54,6,-104,123,127,-51, 
  /* [24][0][][] */ -39,43,-18,-55,-34,118,127,-12, 
  /* [25][0][][] */ -59,-121,-127,-66,-89,-23,-37,-41, 
  /* [26][0][][] */ -11,76,-19,127,-96,28,-69,-1, 
  /* [27][0][][] */ 15,-127,30,75,16,-52,11,-122, 
  /* [28][0][][] */ 50,117,50,41,127,-34,38,-53, 
  /* [29][0][][] */ 115,22,-33,-4,91,-127,-92,30, 
  /* [30][0][][] */ 37,-2,35,-127,22,-31,9,-16, 
  /* [31][0][][] */ 46,-48,3,64,-15,29,15,127, 
  /* [32][0][][] */ -94,-46,32,-45,-54,127,54,94, 
  /* [33][0][][] */ -31,48,42,-46,35,127,-113,68, 
  /* [34][0][][] */ 31,127,-85,-53,31,53,-57,55, 
  /* [35][0][][] */ 24,-127,37,70,-27,-68,45,-83, 
  /* [36][0][][] */ -19,-32,-75,-7,-127,-48,-9,5, 
  /* [37][0][][] */ -60,-127,71,76,-51,-87,-19,-57, 
  /* [38][0][][] */ -67,20,59,-72,-127,-81,-60,78, 
  /* [39][0][][] */ 82,-127,67,67,-15,-79,-32,-58, 
  /* [40][0][][] */ 2,64,26,49,-127,-17,-70,27, 
  /* [41][0][][] */ 121,127,-84,-118,60,30,8,6, 
  /* [42][0][][] */ -7,-43,-18,12,127,6,47,16, 
  /* [43][0][][] */ 127,19,81,19,-77,-29,61,103, 
  /* [44][0][][] */ 79,45,-27,12,92,-127,-127,19, 
  /* [45][0][][] */ 52,11,13,17,78,-127,-7,-55, 
  /* [46][0][][] */ 57,-38,-12,127,43,59,19,75, 
  /* [47][0][][] */ -61,-79,38,54,-39,20,127,-64, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.003186878515407443, 0.002547271316871047, 0.00093561329413205385, 0.0027201580815017223, 0.0032542471308261156, 0.0037243759725242853, 0.0021141720935702324, 0.00086224102415144444, 0.0020292727276682854, 0.0033291010186076164, 0.0040484811179339886, 0.0031321651767939329, 0.00069845549296587706, 0.003422475652769208, 0.0036456170491874218, 0.0006653422606177628, 0.0040031746029853821, 0.0029465733096003532, 0.0036359452642500401, 0.0030018542893230915, 0.0028409527149051428, 0.0028450398240238428, 0.0047430647537112236, 0.0005571268848143518, 0.0020693959668278694, 0.0019379863515496254, 0.00087409757543355227, 0.0034916333388537169, 0.0019102790392935276, 0.0023239131551235914, 0.0069325254298746586, 0.0051685976795852184, 0.0039151939563453197, 0.0032987161539494991, 0.0039472761563956738, 0.0039728078991174698, 0.00277480180375278, 0.0038750828243792057, 0.0033672389108687639, 0.0032195693347603083, 0.0021527009084820747, 0.0032102558761835098, 0.0028806207701563835, 0.0026629690546542406, 0.002194427652284503, 0.0038742197211831808, 0.0045463512651622295, 0.0020621242001652718, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 2476, 4458, 14103, 1374, 2030, -1452, 5124, 15926, 3578, -677, 2602, -2139, 19193, -1917, 1664, 22493, -406, 1999, 328, 2769, 3349, 3699, 590, 27914, 5515, 3933, 16534, 1719, 5520, 4292, 531, 1234, 615, 1642, -149, 123, -2774, -526, 2411, 2116, 5389, 2218, 3892, 3831, 4710, 2307, 2066, 5622, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00023085153952706605, 0.00018451958021614701, 6.7774082708638161e-05, 0.00019704317674040794, 0.00023573159705847502, 0.00026978686219081283, 0.00015314668416976929, 6.2459133914671838e-05, 0.00014699673920404166, 0.00024115387350320816, 0.00029326442745514214, 0.00022688820899929851, 5.0594815547810867e-05, 0.00024791774922050536, 0.00026408169651404023, 4.8196154239121825e-05, 0.00028998250490985811, 0.00021344427659641951, 0.00026338110910728574, 0.00021744873083662242, 0.00020579331612680107, 0.0002060893748421222, 0.00034357878030277789, 4.0357233956456184e-05, 0.00014990317868068814, 0.00014038411609362811, 6.3317995227407664e-05, 0.00025292742066085339, 0.00013837705773767084, 0.00016833993140608072, 0.00050217920215800405, 0.00037440357846207917, 0.00028360934811644256, 0.00023895285266917199, 0.0002859333180822432, 0.00028778280830010772, 0.00020100147230550647, 0.00028070376720279455, 0.00024391651095356792, 0.00023321960179600865, 0.00015593763964716345, 0.0002325449459021911, 0.00020866679551545531, 0.00019290050840936601, 0.00015896024706307799, 0.00028064125217497349, 0.00032932919566519558, 0.00014937642845325172, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 14,-50,10,0,-12,-70,-40,75,-35,5,-3,4,44,-2,-7,7,90,1,41,-2,7,-27,-66,17,-3,-12,-6,-21,-60,78,-13,-100,44,-10,-67,-67,-10,-36,-12,1,-12,48,8,5,-14,70,127,-37, -127,-105,-21,127,-59,72,-95,127,33,17,11,-6,52,18,-1,-41,-35,50,30,1,3,127,12,127,127,-26,-49,40,69,-127,-11,-82,61,-15,-48,-122,25,12,-74,-33,-127,-1,-107,-121,39,64,49,127, -15,1,12,8,-21,62,39,55,12,-43,3,4,-23,-2,-3,7,-67,25,-59,-29,-8,-32,127,25,-59,3,4,23,13,42,6,-1,-9,-23,-46,83,7,12,7,83,31,-33,28,-35,-8,36,-13,-18, 
  /* [0][1][][] */ -9,-18,-28,-6,34,-90,127,-84,-5,13,18,32,127,19,5,-26,-30,-36,28,50,70,-76,44,7,-71,127,-77,-27,127,-99,44,-127,-46,3,-83,8,9,-67,-59,7,125,127,9,-127,-63,-53,-3,90, 94,-127,127,-1,127,40,-69,-57,39,127,127,-127,-94,127,127,127,127,127,101,127,127,120,2,5,109,-92,-127,109,34,121,127,-9,-127,127,127,127,-127,127,-127,-112,42,29,-127,-28,127,-127,-17,94, 18,42,-40,-8,-50,127,-115,121,123,-89,22,61,-40,14,15,-57,12,10,-127,18,17,-121,-39,-3,65,-12,-21,127,-86,-41,27,-50,-30,13,99,-26,36,-3,-3,-76,116,-8,31,49,-56,92,108,-98, 
  /* [0][2][][] */ 1,20,6,-34,-12,-69,-13,-10,4,0,-7,3,-3,-9,3,-1,-51,3,10,-25,4,-32,88,-8,-112,8,43,-30,12,3,-2,19,-16,-16,-64,25,-3,-13,4,46,-24,-10,9,-1,-24,21,-8,32, 37,-11,-33,-35,23,3,118,-88,127,-33,-4,4,-65,-14,-14,-69,-17,83,-10,37,15,27,-22,-27,-78,59,77,-13,-99,13,-36,-30,-29,-11,-44,6,49,-21,-5,127,-116,-15,-13,55,30,53,12,-121, -10,38,5,-26,-19,9,-7,-15,-30,-27,-6,5,18,-8,-4,16,46,32,-36,-10,-10,-32,-48,-11,24,-25,29,-23,-24,3,-13,-2,27,-25,-25,-52,-10,9,33,12,-7,-19,6,16,-21,3,69,-60, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.011393572203814983, 0.0064607430249452591, 0.030421571806073189, 0.010802005417644978, 0.00972032081335783, 0.010138390585780144, 0.0096667930483818054, 0.011801664717495441, 0.0036957196425646544, 0.0092460531741380692, 0.010288060642778873, 0.051151871681213379, 0.018578751012682915, 0.029550021514296532, 0.01407089177519083, 0.033855535089969635, 0.0076505965553224087, 0.0032104882411658764, 0.0098024848848581314, 0.011869858019053936, 0.010968195274472237, 0.0099632972851395607, 0.003225845517590642, 0.020462458953261375, 0.0070253275334835052, 0.014918252825737, 0.02255791611969471, 0.0086618922650814056, 0.010212991386651993, 0.016936207190155983, 0.0059631704352796078, 0.0051245344802737236, 0.0053002955392003059, 0.010696831159293652, 0.0057933847419917583, 0.012270774692296982, 0.069059602916240692, 0.014230838976800442, 0.0057238489389419556, 0.0085608493536710739, 0.0079266168177127838, 0.0062926863320171833, 0.011298022232949734, 0.0085512660443782806, 0.016664257273077965, 0.0036258951295167208, 0.0026802124921232462, 0.0065498393960297108, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -132, 9737, -739, 104, 794, -1528, 1396, -5018, -4846, 299, -6017, -4, -641, -797, -3041, 3004, 6712, 2703, 328, -4521, -7211, 1633, 19714, -5134, -587, -1308, 5495, -6333, 248, 321, -7377, 11566, 6638, 641, 4522, 350, 83, -558, 12846, -1598, 4598, -1632, 3821, 5229, -599, 9579, -1043, -517, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00026808405527845025, 0.00015201748465187848, 0.00071580172516405582, 0.00025416482822038233, 0.00022871344117447734, 0.00023855037579778582, 0.00022745395835954696, 0.00027768622385337949, 8.695811266079545e-05, 0.00021755420311819762, 0.00024207202659454197, 0.0012035734253004193, 0.00043714710045605898, 0.00069529464235529304, 0.00033107982017099857, 0.00079660082701593637, 0.00018001404532697052, 7.5540898251347244e-05, 0.00023064670676831156, 0.00027929077623412013, 0.00025807518977671862, 0.00023443052486982197, 7.5902251410298049e-05, 0.00048146964400075376, 0.00016530182620044798, 0.00035101771936751902, 0.0005307745304889977, 0.0002038092352449894, 0.00024030568602029234, 0.00039849898894317448, 0.00014030990132596344, 0.00012057728599756956, 0.00012471283844206482, 0.00025169015862047672, 0.00013631493493448943, 0.00028872411348856986, 0.0016249318141490221, 0.00033484326559118927, 0.00013467880489770323, 0.00020143175788689405, 0.00018650863785296679, 0.00014806320541538298, 0.00026583581347949803, 0.00020120626140851527, 0.00039210019167512655, 8.531517960363999e-05, 6.3063824200071394e-05, 0.00015411387721542269, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -33,-40,-19,-60,4,-11,86,84,-95,-77,-31,11,-47,-6,-57,39,-78,11,15,127,59,-30,11,88,70,74,22,2,-94,-55,-68,-54,-52,95,35,-48,34,-32,88,-6,36,-1,0,-102,31,-25,-32,-73, 
  /* [1][0][][] */ -20,54,-18,-30,-69,61,-13,-46,-35,65,-13,13,57,41,-54,0,-17,-109,75,-55,127,18,-53,31,63,-5,-81,58,43,-16,66,32,-37,-17,2,-15,5,106,-20,-27,65,38,-4,3,107,4,-36,61, 
  /* [2][0][][] */ -23,-39,125,-5,93,-52,-10,24,-34,-2,-15,49,15,-50,-49,-127,-51,-100,-26,16,-99,26,-36,-28,-46,15,2,-50,-39,5,-29,-13,0,-6,24,-9,23,-37,-50,4,32,-35,33,-52,-48,-51,-66,-48, 
  /* [3][0][][] */ 44,16,53,6,16,-35,24,54,-52,-18,49,-24,-61,52,-23,46,59,28,-31,24,-99,-77,127,0,-4,-1,-67,-29,-56,62,103,-64,2,-102,-24,39,-15,-62,-20,66,-79,-57,58,-9,-89,-62,57,-8, 
  /* [4][0][][] */ 16,-17,64,-27,7,-13,-3,-7,-52,-4,-24,6,39,-67,35,-93,39,44,-13,-30,10,33,13,8,-4,-1,50,-11,20,22,-127,-14,-23,-19,-1,18,42,2,34,3,-34,-6,-66,25,-21,-88,3,15, 
  /* [5][0][][] */ 25,-48,62,23,25,16,22,-3,-74,-13,-45,27,35,5,11,-45,86,77,1,-19,88,-57,127,-81,-13,50,6,45,13,19,-33,-52,-16,-42,-33,13,36,24,68,12,-85,22,33,28,61,-19,81,-1, 
  /* [6][0][][] */ -36,52,-120,91,59,9,40,24,-20,-3,60,-74,-86,-24,-32,38,-117,28,-14,93,24,40,-83,-89,-3,-24,29,89,-32,-39,-34,12,38,79,-45,-18,-19,-4,88,7,69,74,-124,-50,-30,127,-53,-31, 
  /* [7][0][][] */ 35,69,-89,20,19,59,122,70,47,76,-118,-5,-48,6,-69,-56,22,37,123,114,81,19,127,25,103,100,-52,100,-71,34,-14,-80,23,-74,-31,23,-3,92,-70,81,-70,49,-2,-89,82,-16,55,-41, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0039303330704569817, 0.0046319742687046528, 0.0062528382986783981, 0.0052122236229479313, 0.0054378029890358448, 0.0055400924757122993, 0.0036062945146113634, 0.0036423106212168932, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 914, -241, 23339, -2889, 5205, -14561, -707, -12667, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 9.2478425358422101e-05, 0.00010898763139266521, 0.00014712561096530408, 0.00012264055840205401, 0.00012794831127393991, 0.00013035512529313564, 8.4853993030264974e-05, 8.5701431089546531e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 70,29,127,-41,65,104,-76,-54, 
  /* [1][0][][] */ 12,-80,-127,7,43,25,35,5, 
  /* [2][0][][] */ -127,-1,-52,-23,52,26,-74,-34, 
  /* [3][0][][] */ 42,68,127,-84,-10,-110,-4,-20, 
  /* [4][0][][] */ -127,17,-60,-31,40,13,-40,-65, 
  /* [5][0][][] */ -107,28,-61,-13,4,37,-84,-127, 
  /* [6][0][][] */ -40,-127,-116,40,100,12,12,48, 
  /* [7][0][][] */ -59,-127,-92,-74,-69,-65,16,81, 
  /* [8][0][][] */ 85,32,-9,-1,101,-75,-127,15, 
  /* [9][0][][] */ -42,54,-49,91,-62,-35,127,-29, 
  /* [10][0][][] */ -29,127,37,60,121,-23,-6,50, 
  /* [11][0][][] */ -87,-28,-18,-9,-85,107,127,-3, 
  /* [12][0][][] */ 66,37,-127,36,-12,-36,-66,-12, 
  /* [13][0][][] */ 65,-25,-71,12,8,-127,-30,-20, 
  /* [14][0][][] */ 11,-78,83,11,127,-109,-53,19, 
  /* [15][0][][] */ -43,-46,-4,127,62,80,-73,33, 
  /* [16][0][][] */ 115,26,-36,21,71,-112,-127,-31, 
  /* [17][0][][] */ 55,127,56,74,43,65,22,-80, 
  /* [18][0][][] */ 33,-22,3,5,127,11,35,-12, 
  /* [19][0][][] */ 14,127,29,12,-116,20,22,-29, 
  /* [20][0][][] */ -36,22,69,-127,25,44,-16,101, 
  /* [21][0][][] */ -30,81,43,-127,26,48,-7,121, 
  /* [22][0][][] */ -74,-77,-100,18,-127,115,100,-23, 
  /* [23][0][][] */ 96,28,-127,12,10,-40,-61,-18, 
  /* [24][0][][] */ -50,23,5,0,-16,74,-127,97, 
  /* [25][0][][] */ -100,-61,-127,7,-62,-70,67,99, 
  /* [26][0][][] */ 46,-6,-37,-37,106,-11,127,-39, 
  /* [27][0][][] */ 127,-62,28,99,-6,30,-17,102, 
  /* [28][0][][] */ 42,58,58,-7,127,-51,62,-33, 
  /* [29][0][][] */ -12,-10,-23,-43,-60,6,127,-29, 
  /* [30][0][][] */ 46,-127,-66,-65,-118,-10,13,-57, 
  /* [31][0][][] */ 8,30,-11,-15,-127,7,-28,-9, 
  /* [32][0][][] */ 46,-62,-68,87,-10,-84,117,-127, 
  /* [33][0][][] */ 48,127,60,38,54,-22,-35,-17, 
  /* [34][0][][] */ -116,-33,127,-1,-18,111,94,13, 
  /* [35][0][][] */ -31,64,127,-17,-73,-70,-35,25, 
  /* [36][0][][] */ -94,10,103,-12,-14,127,83,25, 
  /* [37][0][][] */ -23,-77,-9,-127,-41,-76,73,43, 
  /* [38][0][][] */ 44,-14,88,-50,57,56,-127,13, 
  /* [39][0][][] */ -19,101,-127,-39,-22,-3,6,91, 
  /* [40][0][][] */ 63,-54,18,33,6,-2,9,127, 
  /* [41][0][][] */ -31,82,127,-7,17,84,-67,12, 
  /* [42][0][][] */ 62,-112,-127,-23,-102,3,17,-109, 
  /* [43][0][][] */ 0,-112,33,-100,127,-60,19,48, 
  /* [44][0][][] */ 12,124,127,33,-2,47,-75,15, 
  /* [45][0][][] */ -39,43,11,80,-123,66,-127,24, 
  /* [46][0][][] */ -43,-42,58,49,-127,-126,-34,-8, 
  /* [47][0][][] */ -13,44,42,-104,-127,31,-21,47, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0023355246521532536, 0.0034335530363023281, 0.0029649997595697641, 0.0028849863447248936, 0.0019909783732146025, 0.0021581405308097601, 0.0020500554237514734, 0.0015328058507293463, 0.0035717491991817951, 0.0040227225981652737, 0.0022870949469506741, 0.0025641045067459345, 0.0030278395861387253, 0.0029481556266546249, 0.0032108926679939032, 0.0016411711694672704, 0.0029460666701197624, 0.0021724083926528692, 0.0014773864531889558, 0.0035606329329311848, 0.003915905486792326, 0.0029174189548939466, 0.0028793183155357838, 0.0019086127867922187, 0.0027527748607099056, 0.0021981063764542341, 0.0032178664114326239, 0.0027979649603366852, 0.0012587152887135744, 0.0037649173755198717, 0.0018980553140863776, 0.0018571644322946668, 0.0024223120417445898, 0.0021340067032724619, 0.00216645747423172, 0.0032588650938123465, 0.0022805624175816774, 0.0026716594584286213, 0.0025564769748598337, 0.0018279283540323377, 0.0029365965165197849, 0.0011278600431978703, 0.0015131555264815688, 0.0027039051055908203, 0.0012619576882570982, 0.0026209698989987373, 0.0024157727602869272, 0.0030999844893813133, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 1779, -1150, 896, -1513, 4362, -684, 4124, -3838, 873, 491, 2118, 3134, 508, -485, 664, 5567, -1587, 3790, 6960, 678, -632, 2152, -498, 4504, 1779, 2003, 889, -892, 7858, -342, 2653, -1928, -788, 4016, -1317, 1753, 2127, 975, 545, 4801, 2051, 8844, -4199, 1695, 7640, 106, 2409, 1911, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00021341470710467547, 0.00031374994432553649, 0.00027093465905636549, 0.00026362322387285531, 0.00018193088180851191, 0.00019720576528925449, 0.00018732920580077916, 0.00014006416313350201, 0.00032637797994539142, 0.00036758685018867254, 0.00020898932416457683, 0.00023430179862771183, 0.00027667681570164859, 0.00026939547387883067, 0.00029340377659536898, 0.00014996633399277925, 0.00026920458185486495, 0.00019850952958222479, 0.00013500006753019989, 0.0003253621980547905, 0.00035782615304924548, 0.00026658683782443404, 0.00026310529210604727, 0.00017440451483707875, 0.0002515420492272824, 0.00020085775759071112, 0.00029404100496321917, 0.00025567141710780561, 0.00011501841800054535, 0.00034402922028675675, 0.00017343979561701417, 0.00016970328579191118, 0.0002213451371062547, 0.0001950004807440564, 0.00019796575361397117, 0.00029778736643493176, 0.00020839239004999399, 0.00024412991479039192, 0.00023360480554401875, 0.00016703175788279623, 0.00026833923766389489, 0.00010306118201697245, 0.00013826857320964336, 0.00024707644479349256, 0.00011531470227055252, 0.00023949802562128752, 0.00022074759181123227, 0.00028326924075372517, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -77,86,-127,98,-93,65,-65,105,-91,-73,69,-51,69,-79,-38,-60,83,73,82,-102,109,-117,61,-107,-84,-60,55,125,-88,-74,-97,57,72,-85,56,-112,-67,-104,87,-25,-7,-91,119,-89,118,62,-72,-65, -103,127,-45,114,-62,113,-51,92,-116,-77,100,-68,108,-97,-66,-73,115,107,127,-127,112,-113,75,-127,-103,-93,66,125,26,-91,-100,127,104,-127,89,-127,-80,-117,105,-80,-100,121,127,-107,-34,115,-101,-88, -52,95,3,28,1,56,-49,16,-54,-31,36,-21,51,-45,-29,-20,45,38,63,-48,31,-52,18,-55,-80,-30,24,37,87,-46,-47,79,43,-81,34,-18,-20,-49,36,-39,-127,-38,67,-44,-78,79,-33,-58, 
  /* [0][1][][] */ -99,92,-61,117,-85,102,-127,110,-86,-83,87,-93,97,-127,-77,-95,99,94,-45,-87,104,-127,105,-92,-126,-84,94,127,-127,-98,-127,82,115,31,95,-120,-106,-127,103,-84,-102,-110,113,-113,127,69,-110,-89, -127,115,-85,127,-127,127,-123,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-43,-100,127,-115,127,-119,-113,-127,127,121,12,-127,-119,117,127,42,127,-117,-127,-106,127,-127,-117,127,110,-127,-75,127,-127,-127, -58,93,-82,39,-35,45,-70,41,-51,-37,51,-53,51,-52,-54,-33,67,52,-37,-35,42,-58,40,-51,-127,-49,48,47,98,-70,-56,114,45,10,56,-26,-41,-26,59,-69,-55,-71,40,-58,-105,80,-41,-74, 
  /* [0][2][][] */ -46,44,-7,48,-46,33,-97,48,-51,-48,35,-61,22,-71,-35,-73,54,47,-84,-24,32,-45,56,-24,-62,-52,30,19,-68,-81,-43,95,29,52,44,-60,-43,-73,19,-74,-120,-56,30,-89,80,32,-44,-73, -63,60,-76,60,-71,50,-93,67,-67,-63,57,-79,43,-70,-80,-66,66,63,-100,-32,35,-50,54,-46,-58,-66,38,35,-2,-100,-49,121,28,64,54,-51,-51,-56,28,-76,-74,78,33,-117,-37,62,-48,-75, -14,50,-79,6,-21,27,-58,30,-23,-20,32,-36,27,-20,-39,-6,44,28,-73,-3,17,-15,24,-3,-65,-21,14,4,60,-32,-20,66,13,36,28,13,-10,-5,7,-52,-9,-28,4,-22,-58,52,-5,-64, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.003698423970490694, 0.0042686141096055508, 0.003193689975887537, 0.0050324117764830589, 0.0047354153357446194, 0.0035069466102868319, 0.0018952569225803018, 0.0096729183569550514, 0.0044660796411335468, 0.0031683002598583698, 0.0028647212311625481, 0.0039388234727084637, 0.0039077168330550194, 0.0038242856971919537, 0.0021253484301269054, 0.0033659795299172401, 0.0041422001086175442, 0.0026694841217249632, 0.006701786071062088, 0.0019090058049187064, 0.0030733903404325247, 0.0027496288530528545, 0.0040710144676268101, 0.0047576893121004105, 0.0027474353555589914, 0.0030076040420681238, 0.0030399616807699203, 0.0017151845386251807, 0.010276611894369125, 0.0037579974159598351, 0.0025739271659404039, 0.0088913412764668465, 0.0047344528138637543, 0.008127107284963131, 0.0040435399860143661, 0.0034306512679904699, 0.0042046126909554005, 0.002353467745706439, 0.0041099884547293186, 0.0042576799169182777, 0.0023193091619759798, 0.0079404367133975029, 0.0088546639308333397, 0.0032302988693118095, 0.0060799936763942242, 0.0023878819774836302, 0.0017111303750425577, 0.0024377207737416029, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 12489, -1322, 17307, -858, 14478, -2444, 43347, 260, 11173, 29945, 594, 23735, -1715, 13241, 34899, 26393, 172, 1512, 3488, 48348, -788, 20076, 302, 17382, 19192, 34438, -52, -1424, -1376, 16318, 21206, -783, 635, 333, 878, 15268, 9252, 32975, 1632, 19816, 28481, 1113, 1053, 16829, 1440, 1229, 45022, 26138, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 8.7021740910131484e-05, 0.0001004379810183309, 7.5145646405871958e-05, 0.00011840969091281295, 0.00011142154107801616, 8.2516395195852965e-05, 4.4594282371690497e-05, 0.0002275980805279687, 0.00010508422565180808, 7.4548239354044199e-05, 6.740520620951429e-05, 9.2678201326634735e-05, 9.1946283646393567e-05, 8.9983193902298808e-05, 5.0008198741124943e-05, 7.9199518950190395e-05, 9.7463533165864646e-05, 6.2811392126604915e-05, 0.00015768909361213446, 4.491778599913232e-05, 7.2315066063310951e-05, 6.4697152993176132e-05, 9.5788578619249165e-05, 0.00011194563558092341, 6.4645537349861115e-05, 7.0767157012596726e-05, 7.152851321734488e-05, 4.0357284888159484e-05, 0.00024180264153983444, 8.842346869641915e-05, 6.0562993894563988e-05, 0.00020920803945045918, 0.00011139889102196321, 0.00019122606317978352, 9.5142117061186582e-05, 8.0721205449663103e-05, 9.8932068794965744e-05, 5.5375712690874934e-05, 9.6705611213110387e-05, 0.00010018070315709338, 5.4571981308981776e-05, 0.00018683381495065987, 0.00020834503811784089, 7.6007032475899905e-05, 0.00014305867080111057, 5.6185457651736215e-05, 4.0261893445858732e-05, 5.7358138292329386e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 27,41,18,-34,73,71,-39,58,-17,107,2,48,-35,32,-15,46,28,77,39,-63,-67,74,-10,46,57,40,38,57,-48,-49,-9,86,-23,9,-72,53,52,-127,-35,9,12,-28,61,-4,-6,-53,-63,-13, 
  /* [1][0][][] */ -48,-2,-83,-46,7,85,-59,22,-10,-36,-43,29,56,-12,-28,-30,-32,-31,-17,22,-64,43,-101,-44,-57,-42,47,65,-26,-36,42,-45,8,-55,-32,49,10,-65,127,-42,-29,28,-47,-18,32,51,31,15, 
  /* [2][0][][] */ 8,3,61,-29,-12,-76,21,26,99,74,-70,18,111,-57,127,91,-66,-27,-24,28,79,-76,-32,-99,20,-36,34,-61,33,48,-46,17,35,-27,56,45,-60,6,0,-26,33,32,68,-10,16,-83,90,-54, 
  /* [3][0][][] */ 35,7,-24,-25,36,117,17,-20,45,-48,25,-22,-52,12,10,43,-42,-65,41,-127,-6,0,-29,-19,-40,95,127,66,-11,-35,30,46,56,-31,92,36,-45,-49,7,39,30,17,-18,8,22,22,-4,-21, 
  /* [4][0][][] */ 95,-6,11,-55,96,83,46,19,65,-17,-107,31,41,-22,10,-18,-97,-127,-13,-97,-20,27,-39,-31,-79,125,-97,121,-61,-53,29,89,42,-55,13,-30,0,15,-26,32,-51,-5,-3,58,-55,105,-27,-52, 
  /* [5][0][][] */ -2,-2,-58,6,-17,54,17,-26,63,52,39,87,54,-18,31,-4,-36,127,-19,34,17,0,-64,-14,35,-4,-67,-37,-18,36,22,-16,-42,6,40,13,-47,13,-82,0,89,-25,23,48,-16,6,-34,30, 
  /* [6][0][][] */ 58,4,15,73,9,-24,104,-56,-12,63,127,108,44,44,-51,58,42,-43,-70,90,49,-58,-43,59,-86,92,84,-2,113,60,-27,-6,95,-66,-119,-10,107,41,5,1,16,63,58,-28,63,123,33,-5, 
  /* [7][0][][] */ -98,-8,-20,24,-67,-64,24,41,80,119,-58,-69,-93,9,-19,-17,-75,96,7,120,-49,48,21,38,-18,-88,-33,-86,27,43,-8,13,-15,7,8,-16,8,-53,127,20,6,41,27,-14,56,69,-30,2, 
  /* [8][0][][] */ -15,-94,57,-64,69,-59,72,-39,-29,-127,35,9,-40,9,28,21,-4,12,-35,103,7,36,-24,34,67,-9,-65,-33,-121,-14,-47,-115,2,-70,6,81,-11,46,113,20,17,-8,64,123,-14,-73,-40,91, 
  /* [9][0][][] */ 18,-31,13,-62,30,80,-44,51,18,-38,-29,-20,14,-37,108,-21,7,-108,46,46,-69,42,59,-40,-21,-80,-21,72,63,76,-32,-33,-55,28,-11,127,-26,-36,-53,-29,-29,1,28,108,45,75,-59,19, 
  /* [10][0][][] */ -14,15,-26,-9,16,25,-69,-38,48,36,65,-13,-37,-5,49,-54,-61,127,-7,52,1,-13,25,31,-47,39,3,88,43,5,-33,-13,68,11,-6,25,-11,-50,-41,15,-84,1,24,-17,11,44,29,27, 
  /* [11][0][][] */ -28,52,-23,39,28,60,-3,10,18,17,-127,-72,76,20,-10,-49,6,26,-42,-46,-7,-10,110,1,42,5,-25,38,-7,31,-8,49,23,-4,-48,-2,38,84,106,13,28,-33,57,-5,-57,-17,86,0, 
  /* [12][0][][] */ -63,3,37,17,-58,-54,2,7,-35,-37,-127,16,72,-98,20,34,44,102,87,-123,-31,48,-40,-82,7,-15,34,-27,5,17,-18,79,74,77,36,-29,-51,-24,31,1,-28,21,65,2,36,-14,-37,-32, 
  /* [13][0][][] */ -59,-115,-51,-95,0,22,55,8,-127,30,114,-58,52,43,113,3,113,25,-2,-84,68,-73,109,1,-77,5,-19,8,-43,-95,-103,6,43,-27,-73,55,29,-52,75,-73,-9,59,60,30,57,-20,103,-67, 
  /* [14][0][][] */ 68,28,-55,4,-34,24,-90,-29,-29,52,54,46,-9,-66,15,-43,49,-109,17,14,83,-56,26,-11,-6,122,-83,12,-64,-25,-90,0,127,43,84,-13,-78,15,-24,55,-14,-50,108,-21,-54,-48,-52,63, 
  /* [15][0][][] */ -67,8,37,21,93,0,3,33,21,75,-14,55,52,-10,-33,-19,11,43,-7,-35,25,-42,-47,-49,47,-62,-35,64,-26,5,16,1,-63,5,127,-5,-87,15,57,-15,-48,-10,17,-5,-32,-31,-9,10, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.005847773514688015, 0.0063683968037366867, 0.0051332726143300533, 0.0055728326551616192, 0.0038010964635759592, 0.006037131417542696, 0.0045565962791442871, 0.0064463573507964611, 0.0047632711939513683, 0.0038704178296029568, 0.0065818442963063717, 0.0069528617896139622, 0.0045423358678817749, 0.0041479780338704586, 0.0055718524381518364, 0.0054487176239490509, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -3492, 12865, -19765, 122, 12282, -15214, -41541, -9472, -5806, 6629, -14605, -12773, 5086, -10194, -4097, -2910, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.0001375946740154177, 0.00014984463632572442, 0.00012078289000783116, 0.00013112547458149493, 8.9437562564853579e-05, 0.0001420501503162086, 0.00010721402941271663, 0.00015167899255175143, 0.00011207697389181703, 9.1068657638970762e-05, 0.00015486692427657545, 0.00016359674918930978, 0.00010687849135138094, 9.7599484433885664e-05, 0.00013110240979585797, 0.00012820512347389013, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 43,-14,4,72,-127,-23,95,51,69,87,-29,49,20,1,42,94, 
  /* [1][0][][] */ -16,34,-115,1,127,117,-12,8,-3,11,-46,53,-67,96,-74,-58, 
  /* [2][0][][] */ -42,54,71,-4,54,92,-5,24,48,-9,42,-14,48,-127,-12,8, 
  /* [3][0][][] */ 127,-27,13,17,38,43,-1,-4,45,19,-57,-20,-34,48,-40,68, 
  /* [4][0][][] */ -82,-30,0,41,-127,-13,-113,-36,-6,43,-8,-69,-42,29,-68,121, 
  /* [5][0][][] */ -115,1,45,-4,127,24,12,25,-61,26,-27,9,-68,57,-101,-40, 
  /* [6][0][][] */ -127,8,-36,20,-2,-61,71,20,-1,-25,-54,27,6,-7,-47,2, 
  /* [7][0][][] */ 7,117,87,-77,95,42,127,-6,55,9,-29,67,125,41,-18,2, 
  /* [8][0][][] */ -56,-34,-80,67,-60,100,-53,-80,28,-56,92,37,127,59,-118,11, 
  /* [9][0][][] */ -25,-127,-26,68,-41,-73,-15,72,40,49,4,72,-84,9,-10,-32, 
  /* [10][0][][] */ -44,-96,-74,65,-127,114,53,-75,14,-89,27,-73,55,90,-93,62, 
  /* [11][0][][] */ -42,-77,-16,40,12,82,50,-14,17,18,19,-69,22,127,-111,99, 
  /* [12][0][][] */ -28,-102,-111,108,-112,-112,36,64,86,69,-25,127,-8,-78,-49,-5, 
  /* [13][0][][] */ -64,-15,-26,-6,-15,0,25,17,-16,127,-8,-23,34,29,17,-14, 
  /* [14][0][][] */ -125,-69,-33,-37,-6,83,-52,-127,125,-49,50,3,123,-56,-106,-114, 
  /* [15][0][][] */ 5,-127,96,-47,-53,-28,12,52,20,-48,-90,-34,86,-41,-24,-48, 
  /* [16][0][][] */ -12,-44,21,-36,38,28,-14,-28,60,-127,27,-25,7,-13,-66,-97, 
  /* [17][0][][] */ -15,3,22,-50,9,4,-41,-1,127,-86,45,77,111,-84,-26,-119, 
  /* [18][0][][] */ 81,-6,-32,-127,5,-31,124,-31,20,57,-26,54,0,61,14,-117, 
  /* [19][0][][] */ -69,-31,-41,-72,-89,47,-17,21,27,-40,33,-127,-25,7,-48,-7, 
  /* [20][0][][] */ 13,76,83,-92,78,-7,-65,88,-106,-127,36,-102,-49,113,-29,-37, 
  /* [21][0][][] */ -10,-127,-94,-21,104,28,53,114,-57,-65,-13,48,92,-85,-24,16, 
  /* [22][0][][] */ 41,-19,60,0,2,11,60,8,40,119,41,40,-3,15,127,-3, 
  /* [23][0][][] */ -127,-90,-23,45,57,45,7,23,-4,-3,6,-74,0,64,48,109, 
  /* [24][0][][] */ -1,-11,23,48,2,-106,-10,-54,24,127,-100,85,-44,-46,61,-79, 
  /* [25][0][][] */ 104,-42,96,127,29,0,-27,35,-114,72,70,-44,-25,46,88,-3, 
  /* [26][0][][] */ -18,20,11,38,-56,106,-20,38,-54,-36,-80,32,2,9,46,-127, 
  /* [27][0][][] */ 43,-12,3,-63,-51,-4,-92,15,-117,-19,-88,-59,-71,44,-21,127, 
  /* [28][0][][] */ -89,15,15,-6,16,0,-127,12,7,-56,11,-22,3,-66,-83,-17, 
  /* [29][0][][] */ -39,-127,-37,94,-38,18,126,3,80,58,-115,70,23,-39,-63,86, 
  /* [30][0][][] */ 32,-43,-59,-6,-127,34,59,-19,15,-11,6,-19,-21,53,-11,75, 
  /* [31][0][][] */ -127,-11,9,90,-51,8,-45,5,-39,-57,20,-36,-37,-58,-31,98, 
  /* [32][0][][] */ -127,-71,-105,1,-88,-30,9,-24,124,42,-47,-59,33,36,16,-5, 
  /* [33][0][][] */ -18,5,-103,54,-127,-84,60,-5,-110,8,-50,-71,-17,108,76,83, 
  /* [34][0][][] */ 45,55,16,51,-76,-52,24,11,32,-127,-13,41,-36,-19,37,79, 
  /* [35][0][][] */ 37,-13,-63,-5,-127,9,93,-38,30,47,-15,-21,25,75,37,82, 
  /* [36][0][][] */ -7,-1,-36,57,127,-19,47,60,-81,19,-84,-85,18,-12,-12,17, 
  /* [37][0][][] */ -121,51,-9,-58,43,-91,-55,-33,-4,-23,-11,62,54,-81,4,-127, 
  /* [38][0][][] */ 53,90,39,-43,-91,-60,-127,-74,-43,-52,44,64,-51,-90,76,-4, 
  /* [39][0][][] */ -17,-49,-3,71,20,94,87,-41,-30,50,20,-16,-18,127,20,121, 
  /* [40][0][][] */ 71,43,79,100,-50,-44,-10,29,-73,60,16,6,-60,-18,127,6, 
  /* [41][0][][] */ -23,-15,9,54,-86,127,9,46,-49,26,-113,14,23,33,42,-116, 
  /* [42][0][][] */ 7,-76,34,-6,127,16,51,18,-16,-76,-86,-24,-5,5,-28,24, 
  /* [43][0][][] */ -59,-127,-61,35,117,4,-5,112,-83,-103,-127,-111,126,-14,-72,72, 
  /* [44][0][][] */ -29,-59,-92,-105,25,81,65,15,-19,-127,-67,64,-45,41,27,98, 
  /* [45][0][][] */ 1,-43,-38,6,-127,42,-51,-63,38,-8,43,-27,-14,12,-43,29, 
  /* [46][0][][] */ 35,-96,-20,13,90,-83,-24,80,-2,-34,34,66,-46,-62,58,-127, 
  /* [47][0][][] */ -55,-8,-6,85,-20,-1,27,29,-1,127,79,99,-40,80,1,85, 
  /* [48][0][][] */ 43,-14,-82,-86,29,-71,2,56,44,-78,-3,17,-59,-4,-33,-127, 
  /* [49][0][][] */ 42,29,15,33,-13,-33,51,62,-46,127,-43,30,-35,-27,59,87, 
  /* [50][0][][] */ -4,-6,11,0,-127,-12,-8,-42,54,14,25,45,-27,-64,8,1, 
  /* [51][0][][] */ 7,-9,-3,-127,-11,94,26,-36,22,13,33,-32,69,73,-17,10, 
  /* [52][0][][] */ 28,-20,1,-83,79,-116,-14,-39,30,9,127,-53,34,10,-35,93, 
  /* [53][0][][] */ -49,-53,42,-27,-34,-127,13,-99,-12,101,-95,68,-42,-20,21,-76, 
  /* [54][0][][] */ 64,68,73,-28,-127,-29,-97,-106,-1,19,52,78,-70,-46,84,11, 
  /* [55][0][][] */ 11,5,-34,69,-34,30,41,-10,4,127,20,72,0,7,0,46, 
  /* [56][0][][] */ 17,-114,-64,63,-75,46,-22,65,127,11,38,43,-37,-41,24,61, 
  /* [57][0][][] */ 45,7,101,-83,126,13,-13,-2,101,-42,-7,127,85,-71,119,-61, 
  /* [58][0][][] */ 86,-58,19,-61,39,7,-9,127,52,97,-9,56,38,6,83,-18, 
  /* [59][0][][] */ -51,31,33,-41,5,-93,-1,13,19,18,-126,-123,-127,-74,85,-10, 
  /* [60][0][][] */ 50,-19,16,44,14,-18,12,-66,22,127,-9,71,-6,-25,-11,-26, 
  /* [61][0][][] */ 75,63,20,-12,-71,-127,-16,-70,-70,-7,-44,6,-57,-48,74,73, 
  /* [62][0][][] */ -30,90,-50,33,-84,127,-66,23,-79,15,-46,28,-52,34,69,-106, 
  /* [63][0][][] */ 13,-8,-83,-127,-28,-59,88,0,-26,-114,-21,20,-56,76,33,-35, 
  /* [64][0][][] */ -67,37,-8,-28,32,-65,23,90,-127,-27,-35,-42,-55,85,67,83, 
  /* [65][0][][] */ -71,-22,-42,-11,65,39,-52,-61,-119,-64,17,-16,-127,111,-73,41, 
  /* [66][0][][] */ -25,47,-8,33,-34,127,-24,23,-60,19,-41,33,-30,44,40,-91, 
  /* [67][0][][] */ 8,-12,-48,-26,9,-82,75,-127,-6,24,16,126,-78,-22,-29,-102, 
  /* [68][0][][] */ 4,-127,-26,80,-7,1,39,58,29,24,26,-7,-50,26,-19,-4, 
  /* [69][0][][] */ 5,89,96,-111,68,16,-39,99,38,127,54,104,107,-92,38,-124, 
  /* [70][0][][] */ 43,39,46,-33,86,7,-74,-42,-127,-87,-4,31,-27,72,-95,4, 
  /* [71][0][][] */ -36,-103,23,-58,83,5,53,45,-106,84,-126,-40,24,127,-19,76, 
  /* [72][0][][] */ 18,15,77,14,-67,-28,-127,-67,-7,78,-45,50,21,103,-118,-24, 
  /* [73][0][][] */ 1,-46,-16,-58,34,-127,24,-46,89,98,117,-26,9,-36,-100,118, 
  /* [74][0][][] */ -1,5,-26,84,-79,-7,90,33,75,63,27,115,127,37,-55,14, 
  /* [75][0][][] */ -36,38,-28,31,-43,127,-23,26,-27,30,-37,50,-23,53,14,-72, 
  /* [76][0][][] */ -54,77,-67,52,-89,2,-6,29,62,41,-45,-39,53,-55,-127,33, 
  /* [77][0][][] */ 101,111,-127,121,70,85,65,51,51,8,115,-31,64,36,33,18, 
  /* [78][0][][] */ 9,-51,-3,-59,74,-127,28,-42,52,50,119,-25,6,-23,-55,114, 
  /* [79][0][][] */ -25,70,-1,34,-2,-51,-25,-5,-127,-9,51,6,116,45,-70,-41, 
  /* [80][0][][] */ -83,17,61,8,74,69,-6,-127,-58,40,-71,-53,-15,-118,31,74, 
  /* [81][0][][] */ 94,76,-30,-8,37,-26,77,111,-94,127,-68,-51,-41,16,111,108, 
  /* [82][0][][] */ 32,90,-32,-61,-9,-38,127,-86,26,-3,-61,61,117,-7,84,-16, 
  /* [83][0][][] */ -4,-47,20,42,16,36,-41,-99,71,-32,103,27,36,-71,-59,-127, 
  /* [84][0][][] */ -127,-85,-47,-51,-12,95,70,0,94,73,87,93,46,54,-94,8, 
  /* [85][0][][] */ 127,0,104,-64,63,-12,-26,75,42,103,-57,13,-27,50,111,7, 
  /* [86][0][][] */ -80,68,-37,-10,25,77,12,22,83,36,127,-26,-31,55,-10,-18, 
  /* [87][0][][] */ 13,-59,23,-47,44,-127,31,-41,53,-13,70,-40,36,-51,-44,74, 
  /* [88][0][][] */ -82,52,40,-13,116,-21,34,34,-60,-59,89,-56,74,127,88,-119, 
  /* [89][0][][] */ -33,41,-19,26,-34,127,-16,36,-50,7,-35,16,-12,58,23,-81, 
  /* [90][0][][] */ 55,-81,20,12,122,-5,61,32,-9,-102,-127,-29,-7,-12,-62,30, 
  /* [91][0][][] */ -6,49,-36,-19,-20,-87,-110,32,-70,17,-57,-82,-127,-85,-3,18, 
  /* [92][0][][] */ 42,40,58,26,-127,-66,6,17,-29,31,-8,-17,-41,-73,23,-4, 
  /* [93][0][][] */ -24,-99,-121,47,-50,-37,-3,127,114,61,30,57,-87,50,-32,-32, 
  /* [94][0][][] */ 83,13,127,-32,24,-32,16,43,7,89,-4,64,6,19,118,-6, 
  /* [95][0][][] */ -69,-77,-30,5,127,-26,36,78,-50,-27,-117,-55,28,11,-54,41, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0046309293247759342, 0.0017845508409664035, 0.0065032672137022018, 0.0047623994760215282, 0.0023763962090015411, 0.0011982088908553123, 0.0046080215834081173, 0.0021033040247857571, 0.0011332940775901079, 0.0030814411584287882, 0.00091392517788335681, 0.0020474395714700222, 0.0028226654976606369, 0.0070738955400884151, 0.002178726252168417, 0.0023628813214600086, 0.0043738172389566898, 0.0030212788842618465, 0.0025956104509532452, 0.0012737413635477424, 0.0042750071734189987, 0.0016801991732791066, 0.0035467569250613451, 0.0029131651390343904, 0.0015901576261967421, 0.0027766113635152578, 0.0036076020915061235, 0.0048141912557184696, 0.0022443023044615984, 0.0033165337517857552, 0.0026986186858266592, 0.0020054408814758062, 0.0036249614786356688, 0.0015030242502689362, 0.0025895014405250549, 0.0028967957478016615, 0.0028248452581465244, 0.0037148070987313986, 0.0023360289633274078, 0.0022834790870547295, 0.0010309817735105753, 0.003495949087664485, 0.0028489991091191769, 0.001943733892403543, 0.0025143446400761604, 0.0018796260701492429, 0.0017974376678466797, 0.0016723951557651162, 0.0047948895953595638, 0.0044193938374519348, 0.0038414280861616135, 0.0028685219585895538, 0.0034562449436634779, 0.0024472661316394806, 0.0015690161380916834, 0.0056178332306444645, 0.0024515753611922264, 0.00097421417012810707, 0.0024211385753005743, 0.0030946545302867889, 0.0031357542611658573, 0.001492896699346602, 0.0023176316171884537, 0.0040465071797370911, 0.00096259952988475561, 0.0010200014803558588, 0.0038295628037303686, 0.0034782374277710915, 0.0025149404536932707, 0.0016464373329654336, 0.0038063609972596169, 0.0020853118039667606, 0.0025300674606114626, 0.0025726589374244213, 0.0040827458724379539, 0.0033467398025095463, 0.003806782653555274, 0.0013814227422699332, 0.0029654947575181723, 0.0030242383945733309, 0.0026608165353536606, 0.0030538456048816442, 0.0023217308335006237, 0.0013749548234045506, 0.0025403148028999567, 0.0013412790140137076, 0.001817217911593616, 0.0037967762909829617, 0.0043620993383228779, 0.0036483174189925194, 0.0025758894626051188, 0.0018345295684412122, 0.0032999345567077398, 0.0021121930330991745, 0.0018700251821428537, 0.0021255481988191605, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1177, 8189, 280, 1689, 5187, 14331, 136, 3257, 15223, -1256, 18498, 5007, 2167, 632, 5057, 442, 2272, 4031, -487, 13749, 1257, 9721, -1451, 1522, -9211, 1671, 2804, 1534, 7655, 1476, 4085, 5647, 1920, 11044, 4070, 4092, 4144, 2199, 3625, 4431, 18503, 1409, 2708, 2130, 2554, 8762, 7898, 9199, 959, -979, 2262, 4875, 2767, -2994, 9671, 124, 2900, 17634, 1711, 1642, 2831, 11707, 5697, -38, 20530, 18085, 2312, 3249, 6243, 5946, 2666, 2121, -4621, 5048, 1689, 3629, 171, 12301, 3955, 5155, 3381, 852, 3809, 13445, -261, 10619, 7692, 2076, -760, 3064, 1605, 8797, 3098, 4201, 5785, 5861, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00023643059830646962, 9.11096649360843e-05, 0.00033202220220118761, 0.0002431427565170452, 0.00012132613483117893, 6.1174163420218974e-05, 0.00023526104632765055, 0.00010738350101746619, 5.7859961088979617e-05, 0.00015732197789475322, 4.6660152293043211e-05, 0.00010453136201249436, 0.0001441102649550885, 0.00036115542752668262, 0.0001112341633415781, 0.00012063614121871069, 0.00022330382489599288, 0.00015425041783601046, 0.00013251804921310395, 6.5030450059566647e-05, 0.00021825909789185971, 8.5782019596081227e-05, 0.00018107851792592555, 0.00014873070176690817, 8.1184982263948768e-05, 0.00014175899559631944, 0.00018418495892547071, 0.00024578697048127651, 0.00011458212247816846, 0.00016932455764617771, 0.0001377770968247205, 0.00010238713002763689, 0.00018507122877053916, 7.6736418122891337e-05, 0.00013220615801401436, 0.00014789497072342783, 0.00014422155800275505, 0.00018965826893690974, 0.00011926519800908864, 0.00011658228322630748, 5.2636438340414315e-05, 0.00017848455172497779, 0.00014545473095495254, 9.923670586431399e-05, 0.00012836905079893768, 9.5963696367107332e-05, 9.1767593403346837e-05, 8.5383588157128543e-05, 0.00024480154388584197, 0.00022563071979675442, 0.00019612286996562034, 0.0001464514498366043, 0.00017645746993366629, 0.00012494437396526337, 8.0105608503799886e-05, 0.00028681664844043553, 0.00012516438437160105, 4.9738187954062596e-05, 0.00012361044355202466, 0.00015799657558090985, 0.00016009491810109466, 7.6219359470997006e-05, 0.00011832593008875847, 0.00020659310393966734, 4.9145204684464261e-05, 5.2075843996135518e-05, 0.00019551708828657866, 0.00017758028116077185, 0.00012839946430176497, 8.4058323409408331e-05, 0.00019433251873124391, 0.00010646491864463314, 0.00012917177809868008, 0.00013134627079125494, 0.00020844326354563236, 0.00017086671141441911, 0.00019435405556578189, 7.0528090873267502e-05, 0.00015140237519517541, 0.00015440151037182659, 0.00013584711996372789, 0.0001559130905661732, 0.00011853521573357284, 7.0197871536947787e-05, 0.00012969494855497032, 6.8478562752716243e-05, 9.2777467216365039e-05, 0.00019384318147785962, 0.00022270556655712426, 0.00018626365636009723, 0.00013151120219845325, 9.3661314167547971e-05, 0.00016847708320710808, 0.00010783733159769326, 9.5473529654555023e-05, 0.00010851917613763362, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -29,-1,16,-34,87,-6,27,-23,-7,9,-13,-42,-38,2,1,-21,-19,3,-2,-22,-3,25,1,47,-9,16,-23,3,22,-7,17,4,-21,4,-5,-27,-11,-73,-43,12,-2,5,24,-11,-27,31,-78,-14,-20,5,3,43,-64,11,21,-21,-17,-13,7,-9,-10,-17,-2,-100,-22,-31,-43,-44,-18,31,-9,-1,29,-1,8,-8,-25,18,127,-17,-109,21,-119,-21,-19,-18,14,18,-17,-11,17,-46,-4,20,-13,5, -1,46,49,-55,-40,-7,127,-60,-4,2,-42,12,-82,7,-59,68,-19,73,85,-40,7,127,58,127,29,0,48,85,127,38,127,-28,-113,-15,-81,-23,-13,-111,127,-35,-37,-106,-22,-36,67,-37,-21,-5,44,-7,20,127,-89,44,-109,-14,-112,-10,-5,32,-15,-127,-127,-97,-64,0,-6,-119,-17,19,-98,124,-127,-10,10,-27,-127,-60,-1,-87,-108,17,4,-64,127,79,-59,25,-127,3,42,-23,3,114,-56,-74, -4,15,2,-25,57,-4,63,-33,-22,22,-11,20,-19,1,0,-27,-14,-5,-31,-31,-6,5,-4,37,-8,-4,0,-9,13,-1,12,9,-5,3,-19,61,-10,-70,-20,6,-6,19,20,-9,-17,-35,-65,-22,-6,-11,2,32,14,6,-1,-23,48,-21,7,-19,-7,-3,-61,-27,-36,-45,127,-22,-6,21,7,6,17,5,12,12,-47,39,-39,-8,-127,9,-127,-16,22,-25,6,-19,-58,-44,15,49,-5,24,-16,14, 
  /* [0][1][][] */ -103,3,54,-60,28,91,-49,-11,-5,-16,-27,-36,-127,17,19,61,-26,33,106,16,29,-27,117,-25,36,30,89,16,-11,0,-6,-25,-127,-13,47,-30,-13,-127,-60,-127,-11,-6,69,-25,-78,127,-102,-72,75,55,20,-41,-90,68,65,-37,34,-33,37,-6,10,-9,99,-96,-42,0,-21,-52,0,2,-127,18,79,127,11,-68,-107,-78,-57,-46,-90,2,-43,-68,34,28,-98,72,-57,127,93,-92,127,-10,-33,-9, 64,127,127,127,-127,-127,78,-57,127,127,-89,-69,-119,127,-23,127,127,-127,127,127,127,-97,127,-123,-127,-127,127,127,-114,127,-11,127,-110,127,127,-91,127,39,-3,9,127,1,-127,-81,127,-25,127,127,127,-127,127,-106,101,127,-127,127,-127,127,-127,127,-112,117,101,-127,127,127,-11,127,-93,-127,-14,-127,9,112,127,63,21,-127,96,-127,51,127,99,127,85,76,-127,127,-65,48,4,-8,-81,-33,-127,-22, -127,-17,56,-76,15,53,-53,12,-36,-21,-3,127,-108,10,22,68,-24,44,70,4,18,-27,80,-15,35,6,48,12,-15,-12,20,-14,-77,-29,62,127,-6,-69,-68,-87,-28,-36,29,-18,-71,-72,-97,-106,73,53,0,-17,127,15,97,-56,110,-31,49,-38,0,-32,-123,-41,-82,-26,-48,-65,-12,8,-104,4,40,-89,9,127,-88,-62,-48,-8,-87,-7,-81,-81,0,34,-82,60,-54,-85,127,127,-53,-32,-48,-1, 
  /* [0][2][][] */ -29,-38,-14,-31,26,8,-27,16,-10,10,33,-35,35,4,3,-26,-8,-10,-54,-26,1,-7,-3,-35,1,16,5,16,-7,-10,-36,0,24,1,-2,-31,-9,-38,-18,-17,-25,-9,24,34,13,6,-86,-2,-25,-5,-4,-26,-14,-25,27,-13,20,-21,6,-13,1,18,-7,6,-45,-31,108,29,32,27,-64,4,-2,1,-19,-28,-12,26,-35,-25,-23,13,-73,-20,-33,-5,29,-4,-11,6,-18,-28,-7,-21,-19,-2, -37,-44,24,-99,-49,12,22,127,-51,68,127,-18,-42,10,127,105,-9,-42,84,-55,-14,-37,96,16,19,4,51,23,-16,9,-96,-52,-97,-27,-93,-5,-88,-99,50,-67,-34,-127,-37,127,19,-27,-38,3,50,-13,4,-15,54,45,-64,-50,-50,-52,39,-46,127,22,91,18,-109,-53,-24,-37,127,36,-99,24,16,-30,13,-15,-27,-28,-2,-2,-114,-15,-97,-52,22,-127,-18,24,-31,-2,30,2,14,-127,-74,127, -33,14,4,-15,31,-2,-20,13,-20,2,13,39,38,-5,3,-20,-3,9,-30,-31,0,-4,-12,-16,0,14,11,6,-6,-4,-43,2,14,3,1,0,-10,-62,-13,-4,-37,-16,11,28,10,-10,-84,5,-7,-12,6,-18,-5,-22,26,-19,75,-13,12,-23,5,13,-22,9,-38,-34,-30,24,30,19,-60,-4,-39,-45,-16,3,-39,17,89,-33,-26,7,-47,-2,-40,3,35,12,-24,-2,-31,10,-8,-27,5,2, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0048884600400924683, 0.010948970913887024, 0.0069452901370823383, 0.0066961809061467648, 0.010899577289819717, 0.020801393315196037, 0.0059233135543763638, 0.0098331542685627937, 0.016751313582062721, 0.012752397917211056, 0.012085274793207645, 0.0077896052971482277, 0.0038180642295628786, 0.0083838524296879768, 0.0097064534202218056, 0.0060481121763586998, 0.012268302962183952, 0.013065233826637268, 0.0055735353380441666, 0.017347132787108421, 0.01032553892582655, 0.012767224572598934, 0.0046192961744964123, 0.0096856458112597466, 0.079996787011623383, 0.0085055464878678322, 0.0090560773387551308, 0.0063011548481881618, 0.016069008037447929, 0.0084705008193850517, 0.0082549061626195908, 0.015132847242057323, 0.0025661524850875139, 0.019156781956553459, 0.0079830465838313103, 0.0084426673129200935, 0.015428757295012474, 0.0037891617976129055, 0.010593158192932606, 0.0065013007260859013, 0.024854876101016998, 0.0081526553258299828, 0.012132010422646999, 0.0077485460788011551, 0.007065135519951582, 0.01254863478243351, 0.0053096632473170757, 0.012733914889395237, 0.0066163474693894386, 0.01779349148273468, 0.010750475339591503, 0.0094739850610494614, 0.0068302066065371037, 0.010385993868112564, 0.010825085453689098, 0.0098556140437722206, 0.0064108241349458694, 0.017414102330803871, 0.019682930782437325, 0.013088533654808998, 0.011831996031105518, 0.014214233495295048, 0.007129330188035965, 0.0046742097474634647, 0.0099313687533140182, 0.017787227407097816, 0.0050051305443048477, 0.0054490827023983002, 0.01019548624753952, 0.015148656442761421, 0.0042224167846143246, 0.012734806165099144, 0.023331867530941963, 0.00817092414945364, 0.0067475917749106884, 0.0091135306283831596, 0.0028905509971082211, 0.0079715056344866753, 0.0055017410777509212, 0.0066780643537640572, 0.003371737664565444, 0.010343481786549091, 0.0037336659152060747, 0.014000650495290756, 0.0057268585078418255, 0.013577040284872055, 0.0058323130942881107, 0.0097134867683053017, 0.005488155409693718, 0.0084223710000514984, 0.0047752577811479568, 0.0096304574981331825, 0.012206538580358028, 0.0082318615168333054, 0.0044443490915000439, 0.013116762973368168, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 8960, -2716, -6253, 8146, 676, 139, 1480, -483, 2041, -3775, 862, -1623, 10858, -2828, -3686, -7210, 455, 784, -9304, 1374, -3081, 1409, -5737, 140, 74, 4798, -11685, -6224, 215, -2626, -121, -281, 18107, -400, -820, -760, 627, 12685, 2219, 8923, 701, 5446, 1031, 2517, 1208, 1271, 10628, 1528, -7750, 583, -4834, -62, -784, -4303, 1817, 3508, 360, 3024, 228, 613, 5, 897, 711, 10739, 12780, 2295, 13658, 9934, -1965, -1161, 13232, -1707, 31, 774, -3534, 140, 18863, 9123, 9864, 12545, 13876, -2648, 9780, 7937, -439, -2114, 10476, -8008, 8928, 733, -7556, -583, 130, 2772, 15341, -2366, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00011502259440021589, 0.00025762285804376006, 0.00016341859009116888, 0.00015755719505250454, 0.00025646065478213131, 0.00048944453010335565, 0.00013937208859715611, 0.00023136833624448627, 0.00039414854836650193, 0.00030005641747266054, 0.0002843594120349735, 0.00018328483565710485, 8.9836808911059052e-05, 0.00019726711616385728, 0.00022838714357931167, 0.00014230851957108825, 0.0002886659640353173, 0.00030741727096028626, 0.00013114200555719435, 0.0004081678343936801, 0.00024295385810546577, 0.00030040528508834541, 0.0001086893244064413, 0.00022789755894336849, 0.0018822774291038513, 0.00020013051107525826, 0.00021308417490217835, 0.00014826246479060501, 0.00037809432251378894, 0.00019930591224692762, 0.00019423308549448848, 0.00035606700112111866, 6.0380058130249381e-05, 0.0004507478151936084, 0.00018783639825414866, 0.00019865100330207497, 0.00036302959779277444, 8.9156746980734169e-05, 0.00024925079196691513, 0.00015297178470063955, 0.00058482063468545675, 0.00019182718824595213, 0.00028545907116495073, 0.00018231873400509357, 0.00016623848932795227, 0.00029526199796237051, 0.00012493325630202889, 0.00029962151893414557, 0.0001556787610752508, 0.0004186703881714493, 0.00025295236264355481, 0.00022291729692369699, 0.00016071074060164392, 0.00024437633692286909, 0.00025470790569670498, 0.00023189680359791964, 0.00015084292681422085, 0.00040974360308609903, 0.00046312779886648059, 0.00030796549981459975, 0.00027839990798383951, 0.00033445254666730762, 0.00016774894902482629, 0.00010998141078744084, 0.0002336792676942423, 0.0004185230063740164, 0.00011776777682825923, 0.00012821370910387486, 0.00023989379405975342, 0.00035643897717818618, 9.9350982054602355e-05, 0.00029964250279590487, 0.00054898514645174146, 0.00019225703726988286, 0.00015876686666160822, 0.00021443601872306317, 6.8012966949027032e-05, 0.00018756484496407211, 0.00012945273192599416, 0.00015713092579971999, 7.9335004556924105e-05, 0.00024337605282198638, 8.7850967247504741e-05, 0.00032942707184702158, 0.00013474961451720446, 0.00031945976661518216, 0.00013723090523853898, 0.00022855262795928866, 0.00012913307000417262, 0.00019817343854811043, 0.00011235901183681563, 0.00022659900423604995, 0.0002872126642614603, 0.0001936908665811643, 0.00010457292228238657, 0.00030862973653711379, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 20,28,26,10,-24,-72,-10,-10,-16,-67,22,0,51,-54,53,29,-87,-31,35,19,77,30,-60,17,-6,62,127,71,10,72,45,-40,9,-1,-10,-12,15,15,-19,-2,111,18,20,-2,-11,-7,-4,-42,20,-22,88,-13,-52,-4,44,23,-14,-44,15,18,-1,38,-52,-1,25,8,50,33,9,-27,27,25,10,41,7,34,57,-30,39,33,-2,45,26,36,-43,13,-15,68,26,16,-81,-4,25,17,103,65, 
  /* [1][0][][] */ 22,40,-57,-12,1,-50,105,-80,-70,-37,-71,-58,-9,-51,-16,-63,-19,-31,-38,-30,-7,-79,111,-36,1,21,-2,68,-62,-1,-42,18,-38,14,13,0,-16,43,-63,100,19,14,-4,-57,64,-63,-15,36,-73,-5,38,-108,-41,47,61,46,28,16,-70,8,-59,-5,-17,-23,25,19,106,-2,-50,-127,2,16,28,60,-32,25,-59,-23,105,-36,40,-17,46,-71,-32,-61,-17,6,-18,-45,21,-11,74,-69,-33,46, 
  /* [2][0][][] */ 13,-17,31,-21,50,49,-51,19,-49,37,18,-15,33,1,23,27,24,-26,-127,8,-25,-44,-15,28,-1,-8,-42,22,-44,-17,-12,72,-10,-29,-9,14,-50,23,-18,-20,64,16,9,52,6,53,-5,-20,-91,16,-18,13,-11,44,19,-56,26,19,50,32,-11,-7,-13,62,46,2,-42,-2,-4,1,-17,-30,29,50,26,66,-50,-9,-27,-23,38,37,54,-11,-4,-42,-18,-41,-6,-31,-6,84,3,7,89,-29, 
  /* [3][0][][] */ 39,-35,-4,-127,-18,-31,114,-27,33,121,-68,-7,9,-12,-22,61,50,47,-19,31,-52,32,31,22,-44,75,61,-1,-46,-5,-65,61,8,-13,26,-22,-16,-54,-37,53,15,10,-15,42,60,-48,-7,24,38,-13,27,-46,113,38,40,-5,-4,-21,0,-35,-20,46,84,9,-19,-16,118,-26,-30,-23,-45,34,22,-66,5,-67,23,-47,126,14,-6,-50,-35,-36,-21,-39,69,85,-40,49,-48,19,17,-63,-19,49, 
  /* [4][0][][] */ -21,77,45,3,-22,7,-17,-13,17,-35,0,-8,21,43,-27,20,-16,-44,-13,-70,27,-18,-63,34,-29,-33,-15,25,-48,127,-47,-15,8,-36,2,-34,51,36,-45,2,22,4,21,-29,-42,0,48,-30,19,-13,-58,-12,-66,16,57,18,1,57,-15,23,-31,-61,-15,11,60,27,-56,-1,4,-14,14,-56,-6,66,51,68,-33,18,-53,52,20,67,27,-56,55,-64,-35,-59,-36,-50,-51,-2,7,14,39,-18, 
  /* [5][0][][] */ -1,-14,59,-28,-26,-19,-11,1,46,13,-11,3,-20,-24,24,-20,-20,5,-51,-26,-22,24,-18,25,20,-47,79,-9,-3,46,13,83,-4,-79,21,13,-53,-28,-43,-7,-45,1,-19,26,4,23,-76,19,-27,23,58,-16,32,-78,10,17,-28,-58,9,-33,50,33,32,58,-30,19,102,-18,-5,-32,21,23,-2,38,41,17,-5,-12,127,56,-23,-12,-31,37,58,68,2,107,9,-34,-8,24,10,-2,-27,31, 
  /* [6][0][][] */ 34,-64,82,5,-55,123,-70,-91,-20,-80,-81,78,14,16,-39,86,3,39,23,-16,-95,-42,-84,-63,-1,-62,-9,65,-127,46,-17,-32,47,101,-20,-9,-20,-26,33,-38,-43,36,58,-22,9,48,-90,-24,38,12,-79,-111,76,15,-36,-12,29,-20,27,-13,-10,-42,39,8,58,-79,-74,-59,-93,31,-25,-71,-31,-86,15,-95,91,6,-78,42,-49,77,18,-89,67,-45,-24,4,-72,70,-83,94,42,-45,65,-88, 
  /* [7][0][][] */ -12,-4,-53,58,-28,-6,54,-7,-96,9,76,63,3,-55,-8,-25,-14,-20,6,14,-59,-11,-28,-24,64,39,4,71,-16,38,32,23,-45,-127,39,100,-6,18,-55,0,10,-11,6,-77,32,63,70,76,-19,57,-58,14,31,-39,60,-47,-11,49,-76,-8,47,21,18,-41,83,-45,111,2,-40,-30,78,23,-7,-37,-83,-33,40,-41,102,-23,-1,-3,-61,-20,47,22,-70,48,-17,22,14,52,67,-23,83,-4, 
  /* [8][0][][] */ -14,-56,4,11,-11,-4,16,-7,-15,-8,47,33,9,23,-31,-10,68,3,9,-13,-15,-73,-36,-27,-22,-31,65,5,-15,41,7,-27,-18,-2,3,4,-37,-21,19,-19,-12,37,26,-40,12,-24,22,-9,37,-7,43,8,-5,5,-39,0,-21,96,-50,-8,-18,-74,-64,-7,-85,-35,-14,11,-3,12,41,-26,-26,-127,36,-101,7,13,-53,12,-24,-7,6,46,56,-59,-37,47,-33,79,8,-24,-47,-3,0,-59, 
  /* [9][0][][] */ -26,-32,-22,24,0,22,15,32,-43,3,57,62,-30,53,27,-49,-18,24,-22,-34,2,34,-9,10,-29,24,1,25,22,-10,27,-5,-19,-10,11,48,-26,-5,25,2,-7,-29,17,11,9,43,0,24,-37,11,-3,35,127,15,-5,-2,9,-9,26,20,-34,-6,76,1,14,14,57,0,37,-8,-13,23,4,-125,-38,-119,-37,-6,33,-1,2,22,8,-38,42,12,-53,-10,8,100,29,40,55,32,-3,35, 
  /* [10][0][][] */ 17,34,5,3,-8,17,-36,-21,56,7,-37,16,14,6,-4,-52,-26,-3,15,-7,26,-17,-20,-34,11,-15,-92,40,-17,44,0,11,14,21,-17,3,20,3,9,4,33,-8,54,-46,-29,-5,18,28,23,-2,8,-18,-21,-13,-8,27,-13,4,-17,-7,-16,-39,-9,4,-9,-18,-83,-30,-51,-12,36,-14,-21,23,28,12,43,-14,-84,4,-13,25,-1,-7,1,6,-62,-127,-23,21,7,10,46,-33,18,21, 
  /* [11][0][][] */ 12,-44,-12,15,-48,29,12,2,67,-23,-27,-42,26,14,15,-14,-27,47,18,-71,10,23,11,-41,35,16,53,2,29,-65,-21,18,13,103,-104,10,28,-7,70,12,-56,52,-24,10,-46,3,-7,-3,54,-23,-29,-8,-12,14,-80,88,-23,5,-11,-25,17,-7,-15,-78,-15,-50,-127,-78,2,-33,-95,22,48,12,-13,-9,30,60,-117,-47,-16,-5,-11,-7,-35,-8,58,73,17,-44,1,0,-35,18,86,24, 
  /* [12][0][][] */ 23,28,-25,-34,1,-27,2,39,63,-39,29,6,2,-11,-6,10,4,-41,-24,25,10,63,9,55,-41,-42,-127,-11,71,-25,24,-3,-13,-72,68,-1,18,-12,-8,12,4,-56,17,48,44,1,26,-20,-81,7,-48,92,92,-20,39,-75,7,24,-34,-28,22,62,92,17,-6,-11,31,34,114,24,28,33,5,-13,-9,1,-33,-62,47,-62,30,-47,29,-34,12,7,-1,-106,-5,46,-38,36,15,78,12,52, 
  /* [13][0][][] */ -10,14,-60,22,23,21,-7,11,34,71,-34,58,-46,-27,63,-54,16,42,61,35,-33,-46,-7,25,31,48,-20,22,-1,36,54,-20,-12,69,-4,44,2,-26,-50,-57,16,-9,23,23,48,53,-21,40,-50,41,8,0,-5,-45,75,41,6,-42,-14,-10,26,34,23,-22,21,91,127,54,19,-2,-53,-15,38,52,-83,56,19,-77,126,-35,-9,-44,28,19,39,51,-41,-27,-12,-17,7,58,44,20,68,64, 
  /* [14][0][][] */ -4,56,41,17,-70,-44,10,39,-72,-27,78,21,-80,0,76,-28,-50,33,-58,41,-32,25,-94,21,-63,2,-47,-117,14,-1,26,80,-54,28,1,-13,-43,-69,-11,-50,44,-34,53,-6,-20,57,-80,16,-26,-34,96,23,-9,28,-34,38,-64,35,2,44,50,74,-3,62,30,-42,-11,-61,37,57,82,31,-58,50,17,24,31,-15,32,36,-62,115,2,-127,99,-11,-15,15,-96,-11,-13,8,-32,29,49,45, 
  /* [15][0][][] */ 66,-33,4,38,46,3,-19,-12,20,40,-64,-19,66,60,4,-13,1,-2,-79,43,-6,-37,17,14,69,-37,73,13,46,-26,-35,65,59,42,-3,-72,72,70,74,59,84,37,-31,-2,-43,-120,46,-20,-23,-27,-20,-4,-10,-40,-39,54,-7,10,-20,16,-1,-60,-39,23,33,46,-67,31,-18,-37,-14,-15,2,-127,-39,-110,-23,21,-115,17,79,-38,51,26,-63,-9,-1,-29,32,90,4,-74,-35,-39,27,-43, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0047896350733935833, 0.0024989387020468712, 0.0030805340502411127, 0.0025636050850152969, 0.0038722173776477575, 0.0054907123558223248, 0.0024622997734695673, 0.0028227544389665127, 0.0050857369787991047, 0.0042234589345753193, 0.0048255976289510727, 0.0031576245091855526, 0.0031601190567016602, 0.0034502099733799696, 0.0031990264542400837, 0.0032372558489441872, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -28190, -1105, -344, -21103, 7966, -19402, 21547, -15968, 14372, -9610, 14861, 15436, -8738, -35023, -4286, 8906, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.00011269730021012947, 5.8798559621209279e-05, 7.2483155236113816e-05, 6.0320122429402545e-05, 9.1110996436327696e-05, 0.00012919322762172669, 5.7936467783292755e-05, 6.6417749621905386e-05, 0.00011966440069954842, 9.9375509307719767e-05, 0.00011354347225278616, 7.4297051469329745e-05, 7.4355746619403362e-05, 8.1181409768760204e-05, 7.5271214882377535e-05, 7.6170726970303804e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -48,36,-14,-18,-32,-69,-70,-40,74,-48,54,-46,67,-116,10,-127, 
  /* [1][0][][] */ -82,63,-110,-79,-82,45,4,69,-25,11,82,-33,48,127,27,46, 
  /* [2][0][][] */ -65,-3,-82,-10,-38,-83,18,-52,-80,101,127,19,28,34,-61,122, 
  /* [3][0][][] */ -58,-72,4,-43,-94,-1,-57,-127,-10,11,47,-64,-71,-43,-117,-42, 
  /* [4][0][][] */ 83,-1,-29,51,-51,2,-127,34,27,78,-8,43,17,4,-43,-85, 
  /* [5][0][][] */ -122,76,-119,-38,69,-50,-18,-83,111,-46,19,-55,14,-127,-122,-123, 
  /* [6][0][][] */ -15,-47,-47,16,-92,56,46,-40,6,-58,127,-24,-31,-18,-119,17, 
  /* [7][0][][] */ -31,95,127,-73,45,80,-8,-61,43,63,-96,-29,57,-2,22,77, 
  /* [8][0][][] */ -57,17,42,-2,66,12,102,127,-78,-13,-57,-84,45,105,-75,-67, 
  /* [9][0][][] */ 25,47,86,26,-91,-39,-108,-95,56,5,127,38,-50,-95,39,-28, 
  /* [10][0][][] */ -16,-125,11,-65,-127,56,39,24,-19,-59,0,38,-18,56,-102,44, 
  /* [11][0][][] */ 101,-50,3,82,-97,-43,47,-6,100,127,-39,63,27,-72,-28,90, 
  /* [12][0][][] */ -56,-83,127,4,70,-13,28,57,71,-16,74,58,-12,26,-79,30, 
  /* [13][0][][] */ 5,-32,13,27,14,25,127,38,-105,14,14,7,-20,116,87,-71, 
  /* [14][0][][] */ 127,-124,123,10,60,73,126,66,121,78,97,30,81,-64,32,-45, 
  /* [15][0][][] */ -31,105,37,-41,47,103,-81,80,-51,-17,-42,-11,-38,127,-33,-50, 
  /* [16][0][][] */ -33,62,104,-35,20,95,-10,-8,1,12,-14,35,86,6,83,127, 
  /* [17][0][][] */ -13,81,52,-127,5,-50,13,-84,-52,42,20,63,-72,-14,77,-22, 
  /* [18][0][][] */ -62,-5,-112,-114,96,91,-34,-60,49,99,127,67,-19,110,-58,8, 
  /* [19][0][][] */ 63,127,62,92,39,-24,5,1,-19,124,34,87,71,75,-65,40, 
  /* [20][0][][] */ 84,9,-12,85,-70,3,-25,59,-39,-52,-127,-50,89,-30,27,-15, 
  /* [21][0][][] */ -69,-69,-20,127,-9,23,-112,68,12,-6,2,15,-27,28,-53,4, 
  /* [22][0][][] */ 6,33,-106,-46,127,27,-39,76,81,86,53,75,-23,45,1,38, 
  /* [23][0][][] */ -53,55,-38,11,4,77,95,78,-17,127,-26,-32,13,36,-35,-33, 
  /* [24][0][][] */ 30,-63,27,13,127,57,62,-24,40,12,38,30,-60,43,-2,-26, 
  /* [25][0][][] */ 116,-54,78,21,-2,-20,-55,99,127,-30,-30,7,114,-54,110,56, 
  /* [26][0][][] */ 68,52,122,92,79,10,-52,-34,-13,88,-4,127,38,-50,44,-56, 
  /* [27][0][][] */ -25,20,-54,23,3,127,-8,-82,29,-54,79,18,47,-38,123,83, 
  /* [28][0][][] */ -41,26,-80,-127,32,-70,10,-59,-97,102,-60,37,-19,23,-29,82, 
  /* [29][0][][] */ 103,94,-79,30,37,95,-47,-16,57,43,-1,55,-127,-1,-21,71, 
  /* [30][0][][] */ -29,112,-126,-102,89,-59,7,3,-73,52,-73,-10,5,71,-2,127, 
  /* [31][0][][] */ 26,-99,45,46,32,-53,-47,15,-16,-8,39,-25,-73,41,28,127, 
  /* [32][0][][] */ -60,66,6,41,-127,45,-2,73,26,-125,37,-67,31,29,45,37, 
  /* [33][0][][] */ -62,-4,52,85,-10,22,-48,14,-42,-46,23,-12,-13,-1,18,127, 
  /* [34][0][][] */ -23,8,-83,-85,72,-21,-17,86,28,-4,-15,-19,-49,-29,-46,127, 
  /* [35][0][][] */ 62,8,17,-14,-6,9,-77,-14,-19,-127,-35,1,-10,-30,39,-18, 
  /* [36][0][][] */ -10,23,-111,-20,43,127,-17,73,-39,22,72,22,37,53,-94,54, 
  /* [37][0][][] */ 64,55,57,-49,56,-127,42,-23,-122,70,-84,-27,-10,26,99,26, 
  /* [38][0][][] */ -44,127,26,-76,25,15,85,-121,2,-14,-94,39,-69,-98,-92,29, 
  /* [39][0][][] */ 95,42,-127,-102,-11,-10,17,-72,17,-3,-2,-40,74,10,-127,-77, 
  /* [40][0][][] */ -32,12,-54,-85,-37,-20,9,-127,-11,-6,10,-16,31,66,37,64, 
  /* [41][0][][] */ -41,-81,-12,127,-3,-26,-82,-9,-8,-45,91,-41,-76,-14,11,31, 
  /* [42][0][][] */ -15,77,-28,-127,10,18,9,-24,51,-12,-28,32,64,-26,-19,3, 
  /* [43][0][][] */ -2,42,0,26,127,39,17,11,24,36,1,-80,-126,-55,-3,-35, 
  /* [44][0][][] */ 82,-2,36,47,-19,-12,-7,26,7,-11,17,2,127,9,-40,-38, 
  /* [45][0][][] */ 4,-82,-70,37,-46,-92,15,47,30,-13,21,27,-84,127,29,-23, 
  /* [46][0][][] */ -33,-77,44,102,8,14,-127,90,38,-50,52,-46,54,90,65,114, 
  /* [47][0][][] */ -25,-50,16,79,4,9,57,14,6,-53,-127,-40,52,-26,-52,16, 
  /* [48][0][][] */ -71,90,-31,-16,-7,52,-30,-127,28,-16,61,-21,23,-125,-53,2, 
  /* [49][0][][] */ -58,2,53,-44,7,8,123,127,-40,-39,-18,28,-41,43,-52,32, 
  /* [50][0][][] */ 72,23,-74,24,30,-127,-50,-12,-91,58,-58,-1,9,-99,-102,-48, 
  /* [51][0][][] */ -37,67,-33,119,-32,61,-69,-101,-55,-82,-9,-58,-5,36,-5,127, 
  /* [52][0][][] */ -127,-6,33,-1,33,61,61,-3,6,-83,-55,-54,-111,-55,-126,-14, 
  /* [53][0][][] */ -38,-85,-35,-127,-36,-23,8,57,37,-57,-60,23,-18,21,67,122, 
  /* [54][0][][] */ 6,-56,14,-6,-50,62,46,-18,-14,-81,37,19,-11,-11,-127,32, 
  /* [55][0][][] */ -3,-24,-33,32,64,-19,47,77,-61,-49,-127,-31,63,-24,-11,29, 
  /* [56][0][][] */ 44,-33,-69,-32,-127,0,-96,3,-6,-16,-6,25,72,-44,31,25, 
  /* [57][0][][] */ -51,-2,19,-26,127,56,59,37,-36,58,-12,-16,-57,79,-101,-20, 
  /* [58][0][][] */ 41,7,6,-11,52,0,-53,-54,55,-127,-89,-11,-65,-48,-32,48, 
  /* [59][0][][] */ -60,-5,-11,12,9,59,-89,-31,66,127,-69,2,-9,7,-11,-6, 
  /* [60][0][][] */ 11,-89,-2,10,-127,-81,52,2,16,56,-19,52,3,-36,27,65, 
  /* [61][0][][] */ 17,36,-85,1,-49,-12,-127,-81,-12,11,43,105,69,-52,110,50, 
  /* [62][0][][] */ 31,-20,36,-25,-19,32,34,127,-49,127,49,87,22,29,57,101, 
  /* [63][0][][] */ 16,-120,-9,-13,-74,7,47,-34,-14,-29,5,-7,-38,127,112,38, 
  /* [64][0][][] */ -10,2,-127,-27,32,67,31,-33,-29,-97,43,25,80,-15,-67,113, 
  /* [65][0][][] */ -22,-9,57,106,84,0,73,112,-24,-15,-127,-92,39,111,-83,-25, 
  /* [66][0][][] */ -53,-122,-7,-111,-66,-127,36,-41,25,-36,26,72,-44,-58,-52,99, 
  /* [67][0][][] */ -42,-78,-90,10,-68,127,-22,-93,-73,-21,-39,-100,22,-4,-76,25, 
  /* [68][0][][] */ 106,61,21,-29,-81,10,-65,-42,-94,-127,-15,3,31,-39,58,-75, 
  /* [69][0][][] */ 40,13,23,-12,-18,-39,-35,38,-4,127,-20,-11,5,44,64,-5, 
  /* [70][0][][] */ 43,-21,-17,55,-121,20,-7,-127,79,102,40,77,47,-68,0,34, 
  /* [71][0][][] */ 127,-83,72,96,-82,-41,30,-33,115,9,-74,28,69,-76,38,-7, 
  /* [72][0][][] */ 2,-33,34,112,57,13,-127,82,83,-3,40,4,-42,-62,-63,76, 
  /* [73][0][][] */ 62,8,73,-117,86,-74,-79,59,-10,127,-51,22,21,-78,14,-54, 
  /* [74][0][][] */ 89,10,25,38,-127,-30,39,-5,-71,-49,13,-39,25,-70,7,14, 
  /* [75][0][][] */ 65,127,-107,12,52,47,-27,-23,-12,-29,57,81,-114,48,45,81, 
  /* [76][0][][] */ -88,-43,8,-54,-51,-24,95,-4,-65,27,107,56,-67,-127,-24,94, 
  /* [77][0][][] */ -69,127,-30,10,-45,-75,47,88,49,-71,-3,48,-40,56,-20,91, 
  /* [78][0][][] */ 127,32,-41,38,-55,40,-118,-3,-13,-1,-85,3,44,-93,22,51, 
  /* [79][0][][] */ -65,-25,127,26,-14,-85,-36,-55,-38,3,10,-3,-50,99,-56,71, 
  /* [80][0][][] */ 72,91,26,-127,-7,27,86,-32,14,21,-40,27,80,-57,7,6, 
  /* [81][0][][] */ 31,-65,6,-106,90,38,-7,127,107,20,-9,-42,-23,23,-76,-64, 
  /* [82][0][][] */ 85,70,56,12,127,-82,23,59,-5,102,-35,25,-5,-31,31,-109, 
  /* [83][0][][] */ -48,84,20,14,109,54,115,127,15,51,-40,-85,-105,92,-73,-122, 
  /* [84][0][][] */ 37,-83,-21,127,3,-69,-69,33,-88,59,-94,-24,-99,83,2,-54, 
  /* [85][0][][] */ -87,31,-49,-17,-22,-38,-28,-39,-13,31,-12,-81,-127,-93,-53,32, 
  /* [86][0][][] */ -6,68,92,95,31,-48,58,18,1,42,-58,-72,42,67,-127,-74, 
  /* [87][0][][] */ -29,45,127,-34,-101,-39,21,17,46,-28,20,55,-62,13,-12,-3, 
  /* [88][0][][] */ -23,-75,-104,16,27,30,10,5,-14,-87,-107,-113,127,-31,1,50, 
  /* [89][0][][] */ 39,25,17,-99,10,-46,-50,47,127,-19,24,-104,11,-32,67,-79, 
  /* [90][0][][] */ -11,72,14,3,-47,29,58,108,10,-72,-7,127,47,11,-47,92, 
  /* [91][0][][] */ -50,5,-18,66,72,49,-30,-100,-27,30,-20,6,-92,-127,-54,-15, 
  /* [92][0][][] */ -29,47,-2,-50,-127,-17,-70,29,-52,42,104,85,-25,-19,58,26, 
  /* [93][0][][] */ 92,15,88,31,-127,-88,30,16,-9,-77,-12,-58,13,-53,-17,11, 
  /* [94][0][][] */ -32,-127,28,-112,12,18,-17,3,84,-28,1,45,15,46,-50,50, 
  /* [95][0][][] */ -35,-49,-10,-40,104,93,-18,37,59,35,-79,34,-16,127,-65,39, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0016927034594118595, 0.0014625950716435909, 0.0019937842153012753, 0.002768020611256361, 0.0018879362614825368, 0.0010955670149996877, 0.0013421927578747272, 0.0021577258594334126, 0.0019601981621235609, 0.0012961733154952526, 0.003167296526953578, 0.0016668933676555753, 0.0020380811765789986, 0.0022030239924788475, 0.002192740561440587, 0.0019272420322522521, 0.0023915097117424011, 0.0014096765080466866, 0.0017439668299630284, 0.0023020715452730656, 0.0021065482869744301, 0.0011075986549258232, 0.0011700040195137262, 0.0019523093942552805, 0.0027531464584171772, 0.0017992951907217503, 0.00092528201639652252, 0.0020640718284994364, 0.002046205336228013, 0.0022143239621073008, 0.0012619789922609925, 0.0032524825073778629, 0.0010776972630992532, 0.0025459977332502604, 0.0025181814562529325, 0.0021671631839126348, 0.0018430191557854414, 0.0013946626568213105, 0.0018692398443818092, 0.0024491476360708475, 0.0029616516549140215, 0.0021352884359657764, 0.0035197506658732891, 0.0034046398941427469, 0.003839986165985465, 0.0026091947220265865, 0.0013721507275477052, 0.0022282304707914591, 0.0026124236173927784, 0.0027102099265903234, 0.0013767558848485351, 0.0019696108065545559, 0.0022315913811326027, 0.0031255988869816065, 0.0034767936449497938, 0.0025308534968644381, 0.0028183911927044392, 0.0018956837011501193, 0.0014273222768679261, 0.0029340051114559174, 0.0023964021820574999, 0.0017716664588078856, 0.0021380381658673286, 0.0020671202801167965, 0.0020823006052523851, 0.00117498729377985, 0.0015324399573728442, 0.0022859419696033001, 0.0016270525520667434, 0.0031604629475623369, 0.0015997912269085646, 0.001594355795532465, 0.0019079729681834579, 0.001344796153716743, 0.0022209710441529751, 0.0017887323629111052, 0.0021676551550626755, 0.0020716823637485504, 0.0021638360340148211, 0.0026056775823235512, 0.0021742735989391804, 0.0022747283801436424, 0.0012142994673922658, 0.0018063810421153903, 0.0024637265596538782, 0.0021515751723200083, 0.0022406296338886023, 0.0033410615287721157, 0.00072861491935327649, 0.0026550069451332092, 0.0029244821052998304, 0.0028246792498975992, 0.0010387706570327282, 0.0020918594673275948, 0.0030719959177076817, 0.0021647084504365921, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 6095, 3219, 1406, -1017, 5488, 10973, 8773, 2269, -273, 8236, 662, -4298, 3921, 2913, 622, -412, 3826, 7642, -492, -193, 4052, 11172, 10804, -2550, -2967, -880, 14304, -50, 1769, 1416, 9447, -1124, 10636, 2772, 3914, -4038, 1251, -6483, 312, 1700, 2193, 1998, 1393, -306, 1095, 1934, 6081, 3735, 3299, 2420, 6913, 3138, -2136, 1523, 847, 2176, 1693, 2915, 8069, 992, -1078, 5726, 3796, 4476, 3909, 9426, -5265, 2870, 5158, -597, 6230, 2285, 3251, 4386, 3631, 2327, -750, 2480, 2524, 2857, 2539, 2658, 9287, 796, 1998, 4705, 1190, -722, 19292, -379, 925, -1356, 11738, 2844, -49, -856, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00011698098387569189, 0.00010107842535944656, 0.00013778836000710726, 0.00019129503925796598, 0.00013047331594862044, 7.5713498517870903e-05, 9.2757552920375019e-05, 0.00014911819016560912, 0.0001354672567686066, 8.9577195467427373e-05, 0.0002188885846408084, 0.00011519727559061721, 0.00014084967551752925, 0.000152248700032942, 0.00015153802814893425, 0.00013318969286046922, 0.00016527475963812321, 9.7421281679999083e-05, 0.00012052374222548679, 0.00015909377543721348, 0.00014558136172126979, 7.6544994954019785e-05, 8.0857767898123711e-05, 0.00013492208381649107, 0.00019026709196623415, 0.0001243474252987653, 6.394527736119926e-05, 0.00014264586206991225, 0.00014141113206278533, 0.0001530296285636723, 8.7214059021789581e-05, 0.00022477569291368127, 7.4478542956057936e-05, 0.00017595126701053232, 0.00017402891535311937, 0.00014977040700614452, 0.00012736914504785091, 9.6383686468470842e-05, 0.00012918122229166329, 0.00016925805539358407, 0.00020467667491175234, 0.00014756756718270481, 0.00024324632249772549, 0.00023529113968834281, 0.00026537745725363493, 0.00018031874787993729, 9.4827912107575685e-05, 0.00015399069525301456, 0.00018054188694804907, 0.00018729979638010263, 9.5146169769577682e-05, 0.00013611775648314506, 0.00015422297292388976, 0.00021600689797196537, 0.00024027760082390159, 0.00017490466416347772, 0.00019477609021123499, 0.00013100873911753297, 9.8640761279966682e-05, 0.00020276605209801346, 0.00016561287338845432, 0.0001224380248459056, 0.00014775760064367205, 0.00014285654469858855, 0.0001439056359231472, 8.1202153523918241e-05, 0.00010590533929644153, 0.00015797908417880535, 0.00011244391498621553, 0.00021841631678398699, 0.00011055991490138695, 0.0001101842790376395, 0.00013185803254600614, 9.2937465524300933e-05, 0.00015348900342360139, 0.00012361744302324951, 0.00014980440028011799, 0.00014317182649392635, 0.00014954045764170587, 0.00018007567268796265, 0.00015026179607957602, 0.00015720412193331867, 8.391897426918149e-05, 0.0001248371263500303, 0.00017026558634825051, 0.00014869312872178853, 0.00015484758478123695, 0.00023089729074854404, 5.0353821279713884e-05, 0.00018348477897234261, 0.00020210792717989534, 0.00019521065405569971, 7.1788359491620213e-05, 0.00014456623466685414, 0.00021230244601611048, 0.00014960076077841222, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 35,127,9,56,-18,-6,41,63,76,-104,-86,51,-17,-14,40,-76,-118,23,34,58,39,51,78,117,19,-25,-55,3,-22,17,25,-35,-59,1,-22,61,-26,30,-4,6,34,-52,-2,68,-103,-56,9,-38,-36,-76,-15,-8,19,67,-26,-25,-87,-38,-44,-127,-108,-1,-125,19,-46,47,65,-11,-21,51,41,-24,-53,10,45,-15,35,-50,-93,21,-17,-72,55,-40,-126,-68,7,45,-127,22,-54,55,66,9,87,-13, -39,-27,13,113,-11,76,-35,-1,76,19,-127,64,-32,-48,-111,127,-122,72,44,81,127,6,127,115,34,-3,19,42,-5,111,-5,-127,63,68,16,51,59,75,-38,-127,127,-21,72,127,-84,-79,127,-61,7,-125,-118,-22,29,127,-34,-127,13,26,-116,-66,-77,-127,-20,116,-42,87,127,-37,9,127,127,-3,-73,39,-41,-110,59,-62,-1,127,-9,-55,127,-73,-116,-68,86,96,83,93,-82,7,127,-30,127,32, 30,-104,18,33,-7,-19,-11,47,27,62,-81,78,-15,43,14,-92,-39,10,26,53,41,32,65,127,24,-54,19,36,3,2,-9,-69,-61,-93,-23,59,-8,3,-1,23,-8,10,-14,68,-53,-44,3,1,39,-58,0,0,-7,6,28,-4,90,-47,-22,-73,-127,22,-85,1,26,20,-11,-1,-39,1,16,-11,-23,-36,-3,4,38,-19,-79,-6,4,-88,34,-29,-36,-54,10,10,-95,18,-20,50,28,47,28,-23, 
  /* [0][1][][] */ 105,-4,44,127,9,-61,127,58,-19,-127,-85,127,-9,-118,-57,6,-96,-47,77,36,-105,-8,-123,-42,-12,62,-125,127,-78,75,126,101,30,71,15,114,-127,78,-14,-33,53,-127,8,94,-127,-82,8,-127,-116,-94,-106,27,127,-51,82,-23,-127,4,-63,9,-41,-78,-48,41,-101,-22,102,-111,-68,21,-60,-127,-122,69,127,-87,127,58,-115,-42,127,-127,-22,127,-19,-18,12,125,3,25,-58,47,-9,-82,82,-23, -127,0,-64,106,-86,-127,-124,-127,76,28,-42,66,-86,-127,-51,114,-127,-127,127,127,33,-127,-114,72,-127,127,20,89,-84,-7,-127,94,-127,81,127,-32,21,127,127,-84,-58,22,10,65,-11,-127,-81,-107,17,-127,-127,127,19,58,55,-74,33,25,84,-10,-55,-53,-127,127,-6,-127,63,127,12,56,-116,-75,-27,78,-124,-127,111,127,83,-45,-78,5,-84,101,-127,-99,127,127,125,127,-127,-127,-102,-73,50,127, 67,1,62,91,12,-37,13,33,-51,112,-83,89,2,-37,-127,58,0,-34,38,24,-101,-3,-73,-24,-1,6,127,1,127,103,11,-108,-29,-127,-8,127,-123,17,-31,-28,-22,90,7,102,-36,-30,-6,-92,127,-89,-100,8,50,-83,-127,27,119,5,-127,62,-37,-60,-21,43,127,-38,-3,-33,-76,6,-51,-51,-127,-127,0,-42,19,-31,-127,-42,-71,-121,-14,120,-119,4,18,20,-20,-4,6,60,-11,127,19,-30, 
  /* [0][2][][] */ 43,-118,37,4,13,7,42,60,-30,-53,-3,-36,20,-6,2,24,-19,20,-20,44,6,36,9,-23,27,94,-14,5,-29,34,3,29,-27,-20,-18,55,32,7,-4,-21,1,7,-23,-30,-59,-49,-13,-19,-25,48,-21,43,4,3,-36,-28,-5,-2,-3,32,-44,6,56,-10,-21,49,-27,-34,8,8,21,79,-24,22,8,-6,-28,-45,-44,3,1,-41,-21,-37,-110,35,-15,12,-89,47,-13,23,-3,3,-18,-27, -36,-7,127,33,127,58,-31,18,-127,-1,-40,-31,127,-40,-70,19,10,71,15,-48,16,10,42,-3,72,-68,3,40,-14,127,-19,7,-79,10,20,36,55,17,11,-93,-17,-13,-127,33,-44,-41,-51,-78,-21,-52,-53,86,100,-53,-33,-90,1,127,-26,9,21,-85,101,54,-45,30,-13,3,127,9,19,103,-61,41,-26,-69,17,-83,-53,-26,-7,-68,-21,-75,-102,127,52,26,87,52,15,23,-15,-6,-30,-7, 7,78,27,-29,8,-15,-17,59,11,76,9,21,15,11,-9,43,-25,9,-22,42,-9,25,-6,-16,17,82,15,29,12,47,-22,-60,-38,-23,-14,37,41,-25,6,-2,-11,-3,-5,8,-58,-17,-16,-18,27,35,-25,20,8,-14,8,-1,34,4,-21,48,-33,9,37,-29,20,13,-76,4,13,0,-6,92,26,-4,-14,-4,-25,-19,-35,10,-8,-62,-20,-7,-102,31,-1,-2,-81,55,1,32,-2,-2,-47,-39, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0093801869079470634, 0.0083826007321476936, 0.0063248653896152973, 0.005524397362023592, 0.011272396892309189, 0.012077277526259422, 0.012980516999959946, 0.0082402443513274193, 0.010636361315846443, 0.0056762318126857281, 0.0049940380267798901, 0.012860305607318878, 0.0096888989210128784, 0.0055029615759849548, 0.0056337681598961353, 0.0068204952403903008, 0.0044747171923518181, 0.013109534978866577, 0.0072998390533030033, 0.0047935601323843002, 0.0073675969615578651, 0.014832349494099617, 0.011469352059066296, 0.010524090379476547, 0.028015097603201866, 0.0067185950465500355, 0.011414485052227974, 0.005244777537882328, 0.0093795266002416611, 0.0039902124553918839, 0.013261008076369762, 0.010121108032763004, 0.0066379792988300323, 0.0080261947587132454, 0.010987590998411179, 0.015980442985892296, 0.009115956723690033, 0.018043080344796181, 0.014954117126762867, 0.0063615357503294945, 0.0087671754881739616, 0.010421322658658028, 0.011120899580419064, 0.0041984268464148045, 0.0043975287117063999, 0.0036969876382499933, 0.01184155885130167, 0.004038635641336441, 0.0073544923216104507, 0.0041774450801312923, 0.0039451573975384235, 0.0057808179408311844, 0.0078298160806298256, 0.0074858851730823517, 0.009608403779566288, 0.0056992750614881516, 0.0069457776844501495, 0.0096236569806933403, 0.006141388788819313, 0.0061639798805117607, 0.0065195551142096519, 0.0066080279648303986, 0.0064362264238297939, 0.0054052914492785931, 0.0078234095126390457, 0.01295006275177002, 0.011324190534651279, 0.0084280194714665413, 0.010887774638831615, 0.0082675181329250336, 0.011593697592616081, 0.0059621874243021011, 0.0047769895754754543, 0.0088680330663919449, 0.01097398716956377, 0.004877924919128418, 0.0055117201991379261, 0.0089789219200611115, 0.0058083240874111652, 0.012109071016311646, 0.010998900979757309, 0.004299782682210207, 0.010541226714849472, 0.0084738507866859436, 0.0026423842646181583, 0.0074967867694795132, 0.0057677067816257477, 0.0056618005037307739, 0.0091027179732918739, 0.0071003567427396774, 0.0049859774298965931, 0.013459337875247002, 0.011117327958345413, 0.011342061683535576, 0.0062769697979092598, 0.01202746108174324, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { -2305, -116, -2352, -6788, -1555, 4982, -469, -2073, -1129, -753, 8887, -2901, -689, 10539, 8596, -3614, 16253, 746, -5432, -2064, -1777, 1225, -192, -2681, 224, -4429, -630, -4980, 444, -9114, 308, -724, 11054, 716, -2890, -502, 1460, -1217, -224, 5450, 130, 1065, 2611, -7785, 14371, 16122, 628, 14398, -1071, 10881, 12619, -4326, -1302, -532, -284, 11737, -3065, -1886, 14523, 5723, 10013, 12002, 7956, -7904, 1917, 413, -2656, 3924, 25, -2293, 2230, 2532, 11504, -1986, 111, 12100, -1915, 1665, 11572, -529, 186, 15240, -1962, 1273, 21809, 3222, -5922, -6454, 1161, -6740, 10962, -481, -2005, -208, -2639, -2377, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00022071028070058674, 0.00019723766308743507, 0.00014882037066854537, 0.00012998582678847015, 0.00026523286942392588, 0.00028417125577107072, 0.00030542394961230457, 0.00019388810324016958, 0.00025026733055710793, 0.00013355839473661035, 0.00011750678095268086, 0.00030259543564170599, 0.0002279741020174697, 0.00012948145740665495, 0.00013255926023703068, 0.0001604822464287281, 0.00010528746497584507, 0.00030845965375192463, 0.00017176092660520226, 0.0001127896539401263, 0.0001733552198857069, 0.00034899645834229887, 0.00026986710145138204, 0.00024762566317804158, 0.00065917876781895757, 0.00015808458556421101, 0.00026857611373998225, 0.00012340652756392956, 0.00022069475380703807, 9.3887356342747808e-05, 0.0003120237379334867, 0.00023814372252672911, 0.00015618775796610862, 0.00018885164172388613, 0.00025853156694211066, 0.00037601043004542589, 0.00021449310588650405, 0.00042454307549633086, 0.00035186158493161201, 0.00014968319737818092, 0.00020628648053389043, 0.00024520760052837431, 0.00026166823226958513, 9.8786513262894005e-05, 0.00010347126226406544, 8.6987944087013602e-05, 0.00027862490969710052, 9.5026720373425633e-05, 0.00017304687935393304, 9.8292824986856431e-05, 9.2827234766446054e-05, 0.00013601925456896424, 0.00018423097208142281, 0.00017613847739994526, 0.00022608009749092162, 0.0001341005990980193, 0.00016343007155228406, 0.00022643899137619883, 0.000144503268529661, 0.00014503482088912278, 0.00015340129903052002, 0.00015548300871159881, 0.00015144061762839556, 0.00012718333164229989, 0.00018408022879157215, 0.00030470735509879887, 0.00026645153411664069, 0.0001983063411898911, 0.00025618294603191316, 0.00019452984270174056, 0.00027279288042336702, 0.00014028676378075033, 0.00011239975719945505, 0.00020865960686933249, 0.00025821145391091704, 0.00011477470980025828, 0.00012968754163011909, 0.00021126875071786344, 0.00013666645099874586, 0.00028491931152530015, 0.00025879766326397657, 0.00010117136116605252, 0.00024802886764518917, 0.00019938472541980445, 6.2173749029170722e-05, 0.00017639498400967568, 0.00013571075396612287, 0.00013321884034667164, 0.00021418160758912563, 0.00016706722090020776, 0.00011731711856555194, 0.0003166903043165803, 0.00026158418040722609, 0.00026687205536291003, 0.00014769341214559972, 0.00028299909899942577, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -101,33,46,-29,-66,-12,-70,2,-56,28,6,-3,27,35,27,-38,11,-15,99,14,15,-38,127,80,52,29,-9,29,-68,-102,-90,8,-40,-51,28,40,-13,28,2,28,-28,-10,-66,21,-80,-14,2,80,-17,26,-45,-26,-13,-4,27,-49,-79,1,-10,64,63,35,-14,2,-31,-41,-49,17,-57,-52,3,2,15,-9,-67,-45,-49,21,-51,-14,-55,60,76,-72,7,47,5,44,21,-18,4,-11,-36,-34,-62,7, 
  /* [1][0][][] */ 32,16,30,-40,-61,-25,4,13,-15,-1,37,-75,7,-2,-52,-41,-4,12,-73,16,-17,-80,3,29,-24,-73,2,-50,72,-115,109,-80,46,28,-18,35,51,60,-18,-44,41,16,-13,-31,23,46,-127,-47,-56,-60,-17,-23,45,-42,-43,46,-13,-5,-45,25,15,40,3,-102,-18,-30,-54,-8,8,-22,-71,-27,-54,-16,11,-70,14,0,44,-45,-22,-30,-85,-26,31,-44,-24,21,-74,-9,-62,30,25,57,-46,55, 
  /* [2][0][][] */ 80,-30,10,20,24,-73,50,-3,-17,19,5,19,-74,-28,-2,-34,-94,-65,-25,48,14,-47,-36,42,16,-59,2,-18,-41,64,-60,127,-46,104,-22,41,-32,-14,-9,-11,-117,75,90,31,-78,21,-16,-14,36,20,-32,-59,43,-24,-16,65,70,-3,59,-22,22,47,-51,15,70,28,-11,-9,23,59,-55,25,56,33,70,39,25,-49,52,29,76,-17,-44,22,-60,36,13,67,12,6,-13,43,-53,51,-23,25, 
  /* [3][0][][] */ -3,-7,-26,3,16,-7,-2,-52,-23,84,55,79,23,-16,-65,41,3,-52,36,17,20,127,45,-35,21,30,-24,7,63,-26,58,-11,-18,36,-25,-13,8,54,33,15,-92,-34,-30,32,-49,43,24,-1,-17,-39,-3,-26,42,-88,-27,-45,34,84,-13,-8,3,-3,-48,11,26,58,-47,4,-29,7,4,-57,-23,-56,39,-12,8,9,-49,-50,-24,-1,-53,8,-13,-32,30,-28,5,16,36,-10,39,22,-40,59, 
  /* [4][0][][] */ 31,4,-45,20,28,22,-44,12,-33,84,90,-3,-13,1,6,-50,15,-23,-31,42,30,-36,54,89,-63,-8,-127,12,-42,-58,5,17,-58,-44,9,56,2,40,18,21,-37,-45,46,-20,-11,9,-26,51,-41,52,3,14,38,-14,-68,22,54,-16,8,-8,45,-4,19,11,-43,19,-34,6,-46,32,-45,55,41,-59,-31,-45,26,-48,-14,-1,-42,84,-73,-2,-36,17,26,-46,43,2,31,19,-57,-28,30,25, 
  /* [5][0][][] */ -84,43,48,-17,56,-18,49,-34,-26,61,6,-7,25,-35,-34,-29,-20,-59,72,43,-113,-13,-69,64,-28,-6,38,22,38,-60,-11,57,54,114,-4,59,-30,23,56,-21,-47,101,92,-21,-19,85,56,-1,6,26,-21,33,10,-44,55,-89,66,-61,-46,-83,81,107,-73,-7,85,-20,-83,-64,-54,-11,-69,18,-6,-1,-23,-59,20,-21,-54,-43,127,-22,26,-79,-88,46,19,-15,-64,34,23,0,-18,31,7,80, 
  /* [6][0][][] */ 51,-9,-88,25,-39,-121,96,106,-67,90,-5,100,-127,-89,53,66,-8,-66,4,10,-6,-17,-78,-54,-54,52,77,29,28,47,98,-54,28,4,15,-68,2,12,39,75,-6,28,-53,-16,-11,-54,-91,22,44,-111,-21,75,34,4,-19,-71,92,51,23,-14,-103,61,-103,2,33,22,-5,54,37,30,-12,-34,-27,16,104,30,60,-13,29,-89,-5,-57,-78,66,13,-57,50,11,-46,59,48,48,-33,16,-41,119, 
  /* [7][0][][] */ 27,84,-46,-64,-13,-13,30,-2,-67,49,-39,-43,-34,22,-2,-13,-46,-62,-27,59,2,127,21,41,0,15,16,30,48,56,72,-19,76,17,-9,22,-9,-3,8,39,-74,-9,31,-45,11,-38,75,-22,38,-68,-86,-33,-56,8,9,-8,48,11,-86,4,5,113,22,-11,-24,2,-47,19,-41,-12,-108,41,23,66,-32,46,-59,71,3,-98,-26,-47,55,-83,43,-11,-14,1,-3,74,-79,45,47,-34,-44,1, 
  /* [8][0][][] */ -12,75,-37,45,-32,-30,-82,33,-97,-38,2,6,-43,42,36,76,7,-40,0,2,35,0,-1,-18,-42,64,-5,24,-9,-23,-40,-34,-24,-46,-25,-73,-38,21,45,1,5,-37,20,5,-29,-38,12,-14,-28,-19,42,70,4,-17,-68,98,-39,27,-7,-32,-42,3,18,50,-39,-62,-33,-6,-38,6,9,0,-26,-53,-113,-14,-40,20,-60,-32,-28,8,-40,-26,-5,-10,15,31,5,55,-56,-13,-78,-127,12,-48, 
  /* [9][0][][] */ -18,20,-79,56,-31,-35,76,43,-11,43,-31,94,-28,-16,27,127,21,17,68,11,24,16,41,-96,-37,-6,22,-11,13,-23,39,53,-31,-5,-2,-124,22,-27,-35,-21,-15,22,42,-29,-2,-1,15,23,36,81,22,-17,-55,-78,6,3,-4,-13,62,-25,-69,51,-64,-33,92,-13,-23,4,-60,29,39,30,-17,97,-19,-20,-25,26,-37,-7,43,-34,68,-3,22,-22,-16,-30,-58,28,0,-1,66,36,-38,-9, 
  /* [10][0][][] */ 70,2,-37,6,-33,-33,88,0,13,-39,-30,-24,-88,-13,12,-15,-67,-22,12,14,39,36,19,-11,-61,79,44,-15,-46,-94,-28,-20,75,-28,50,2,93,-95,82,127,29,-60,-4,-8,-9,-104,-8,66,30,82,-76,-42,-14,35,12,55,5,-65,70,65,-21,43,-56,-24,-13,-76,27,60,24,-30,-5,26,117,42,22,-82,37,-68,73,4,-46,36,37,27,-43,-13,5,51,-43,-14,23,48,56,71,-35,11, 
  /* [11][0][][] */ -51,-33,54,-57,4,-14,-22,-56,52,-66,-8,-29,-5,5,18,2,-59,11,49,2,-62,14,-92,-105,-1,9,-45,36,38,-77,43,-34,17,-3,14,-44,-66,13,-114,11,-61,73,-55,43,36,1,-12,-31,23,-51,-74,-55,28,36,69,-60,-42,-79,-3,-45,-40,-70,-27,-127,8,-78,73,70,119,19,83,-40,-39,-7,68,-32,111,18,38,70,34,-1,-23,93,85,-4,-14,-19,-93,-63,-8,15,67,58,53,68, 
  /* [12][0][][] */ 41,-26,-6,-44,33,101,-20,36,42,81,13,81,10,44,6,3,-66,37,27,57,127,1,75,-57,44,24,-75,-69,-25,95,0,10,35,-14,10,-23,32,1,-26,-32,7,-26,47,69,-39,46,3,-11,-60,37,7,19,-31,-32,15,20,-12,65,26,40,37,-85,11,-98,-8,103,-20,-32,-10,-41,55,33,0,3,-3,48,-17,60,-94,-30,-19,30,114,16,-6,79,-27,-74,73,6,-73,65,65,10,-30,-94, 
  /* [13][0][][] */ -9,27,-14,-46,-30,-16,-9,-29,2,-8,-16,-47,45,-94,-47,-61,-16,-41,-66,-14,-82,-28,15,102,-23,4,89,14,18,-24,45,38,12,-6,-100,127,-36,-53,29,-49,88,9,2,32,-19,-73,52,-24,81,3,-27,23,14,-9,-1,71,84,-47,-20,-18,55,46,2,-79,1,35,-40,38,-65,-34,-88,17,-46,11,-36,-78,-101,29,16,59,-16,54,29,-82,57,48,22,-22,-13,-13,-2,27,-60,15,-23,-2, 
  /* [14][0][][] */ -5,23,-75,-33,77,76,-91,-5,24,-20,84,15,4,-29,-44,-57,-69,0,41,127,9,-17,2,21,18,33,-35,68,2,10,-23,13,57,-11,-27,18,-33,46,70,9,42,2,41,17,-22,-31,55,-36,26,-1,-10,-23,34,8,-22,29,32,52,-69,-24,-5,-55,-49,-89,8,-25,-52,-4,-69,47,-23,50,10,-42,-17,-39,28,3,-61,-48,26,2,-7,-9,-9,42,-17,-21,-37,57,64,23,-2,-36,-39,-65, 
  /* [15][0][][] */ -77,-42,49,-58,17,-26,-25,-89,-2,-10,-24,44,1,-15,46,94,-111,0,10,-83,16,-44,-15,-107,36,-12,70,-60,-56,-127,-66,32,-38,70,84,-117,12,-44,17,-24,-3,5,21,-35,22,-13,60,117,-51,-25,26,-44,-41,68,3,-55,-126,-12,90,31,-45,10,-83,21,-66,-30,15,29,55,-85,101,-49,51,-22,-40,-46,21,5,73,36,-14,78,66,34,1,-22,-125,13,0,-49,-92,22,51,-39,-12,79, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0023494309280067682, 0.0031366145703941584, 0.0029191004578024149, 0.0026869275607168674, 0.0032126186415553093, 0.0028940511401742697, 0.0020236880518496037, 0.0022748194169253111, 0.0040748701430857182, 0.0028801769949495792, 0.0022365574259310961, 0.002291996031999588, 0.0031642552930861712, 0.002823973074555397, 0.0035830461420118809, 0.0025855263229459524, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 9932, 17891, -7184, 1413, -1232, 3698, -1017, 1918, 18203, -2139, -8373, 12282, -16443, 7894, 3378, 11510, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 5.5280728702200577e-05, 7.3802693805191666e-05, 6.8684719735756516e-05, 6.3221828895621002e-05, 7.5591029599308968e-05, 6.8095323513261974e-05, 4.7616191295674071e-05, 5.3525163821177557e-05, 9.5879302534740418e-05, 6.7768873122986406e-05, 5.2624880481744185e-05, 5.3929317800793797e-05, 7.445306982845068e-05, 6.6446424170862883e-05, 8.4306971984915435e-05, 6.0835915064672008e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -8,97,-82,42,47,-20,86,64,-54,5,32,-87,74,127,-63,20, 
  /* [1][0][][] */ -31,3,-73,-32,-17,39,29,-127,34,-51,-19,-50,-18,-48,-68,10, 
  /* [2][0][][] */ -16,-30,38,79,25,47,-108,127,-25,1,71,-60,-14,-65,-36,60, 
  /* [3][0][][] */ 76,-85,66,-8,-6,-34,-26,127,-26,50,67,50,-10,50,6,11, 
  /* [4][0][][] */ -56,-19,-24,47,-105,10,-25,-127,4,-17,42,-9,31,52,109,126, 
  /* [5][0][][] */ 127,24,-42,-18,-84,17,24,71,15,-7,57,84,125,26,-99,-1, 
  /* [6][0][][] */ 23,-30,-50,-42,-62,13,-5,-33,-38,-44,-31,20,91,52,127,-12, 
  /* [7][0][][] */ -61,27,-37,-76,-1,-60,-70,15,-87,47,-62,-56,-127,-39,8,85, 
  /* [8][0][][] */ 48,37,66,1,49,18,70,9,66,-29,41,11,-127,-30,-79,14, 
  /* [9][0][][] */ -30,60,28,-33,-26,-12,30,-7,-29,52,-37,12,48,127,26,18, 
  /* [10][0][][] */ 89,62,-39,61,-19,-9,51,-62,-84,-30,-70,-115,-127,-75,24,91, 
  /* [11][0][][] */ 44,4,61,0,-12,-34,16,105,-93,19,-28,7,-18,-6,60,127, 
  /* [12][0][][] */ -67,-12,-8,-11,17,-13,127,37,-57,15,6,-11,-20,83,-62,107, 
  /* [13][0][][] */ 3,22,6,38,92,25,91,110,-35,74,-74,-71,14,83,-127,-4, 
  /* [14][0][][] */ -127,118,-4,-26,-9,-3,47,-7,-44,30,114,6,-102,15,-51,50, 
  /* [15][0][][] */ -7,-23,-127,-45,90,-42,-96,-48,-23,-22,-22,-76,-3,-86,-52,49, 
  /* [16][0][][] */ 115,-14,16,-8,31,-28,39,-23,-34,15,127,48,49,7,-33,15, 
  /* [17][0][][] */ 1,24,-40,-109,-19,-68,121,-127,14,-27,-43,38,32,73,-2,55, 
  /* [18][0][][] */ 19,121,-20,-62,51,-80,-27,-48,-46,127,-25,5,-40,49,-24,-27, 
  /* [19][0][][] */ -76,-103,110,-99,36,-127,31,-29,42,35,89,109,18,-18,63,-27, 
  /* [20][0][][] */ -22,87,49,-2,6,-3,20,-21,54,-10,93,-20,-127,-28,-80,-4, 
  /* [21][0][][] */ -70,29,21,10,60,28,61,55,-127,50,-34,24,-29,13,-62,-27, 
  /* [22][0][][] */ 24,-90,59,18,29,-127,113,5,22,-51,-52,-85,52,-86,-51,-66, 
  /* [23][0][][] */ -47,-111,50,69,31,-13,19,-43,25,-30,78,-3,15,75,82,127, 
  /* [24][0][][] */ -3,0,29,78,53,20,-46,-127,65,14,-36,12,-5,-7,-20,-22, 
  /* [25][0][][] */ -9,35,36,-49,-21,-3,12,-31,-25,66,-43,-4,49,127,30,4, 
  /* [26][0][][] */ -68,76,3,17,29,-88,-3,-31,9,17,5,70,4,4,-86,127, 
  /* [27][0][][] */ -12,-127,-37,8,-55,93,-1,-69,15,-34,55,-30,33,-42,-87,-19, 
  /* [28][0][][] */ -40,4,33,79,23,8,-39,-127,-126,45,107,-10,69,10,-49,-26, 
  /* [29][0][][] */ -127,105,-31,-32,-31,19,-116,-66,-37,-34,-6,2,4,-62,-111,54, 
  /* [30][0][][] */ 48,87,-72,83,-119,-108,-76,-4,-44,-10,9,-123,127,36,-23,105, 
  /* [31][0][][] */ 127,30,-52,-33,-58,23,96,43,-58,-13,57,45,43,23,-13,1, 
  /* [32][0][][] */ -36,-21,127,-6,-21,68,68,20,-20,-12,-3,17,6,70,57,47, 
  /* [33][0][][] */ 6,30,-61,-44,-20,39,112,31,10,-12,18,-82,106,127,-45,49, 
  /* [34][0][][] */ -92,-20,109,27,34,-50,106,-6,-127,44,32,-53,60,67,-46,-40, 
  /* [35][0][][] */ -2,27,-47,6,-71,108,-39,-11,-20,127,-4,92,-66,51,25,19, 
  /* [36][0][][] */ -8,-71,127,-44,-48,20,-46,-12,21,27,-46,79,5,-77,-34,52, 
  /* [37][0][][] */ 86,-3,71,-17,117,-63,-42,28,-48,127,-64,-10,-78,-35,115,-24, 
  /* [38][0][][] */ 62,58,28,-117,-3,-52,-119,53,-105,66,-119,-67,-72,-127,-108,64, 
  /* [39][0][][] */ -64,20,-50,-30,-75,-74,79,17,-127,-30,13,74,41,3,0,53, 
  /* [40][0][][] */ 127,43,16,-77,-61,32,15,-24,-39,-21,-46,-80,21,51,52,31, 
  /* [41][0][][] */ 90,-84,-67,-56,-7,-9,-59,-23,62,-28,4,-50,127,-81,52,-34, 
  /* [42][0][][] */ -20,-83,-48,127,3,-97,-104,26,6,4,-2,40,-86,76,-74,-8, 
  /* [43][0][][] */ -83,-50,-46,-119,-53,3,0,70,41,-127,-33,34,-15,-47,-26,100, 
  /* [44][0][][] */ -62,53,30,-54,-33,-34,46,127,123,-96,90,121,127,49,-43,13, 
  /* [45][0][][] */ 20,86,-97,99,127,-106,-37,-54,115,-77,75,-67,-38,6,-95,70, 
  /* [46][0][][] */ -16,-37,10,0,78,-20,25,9,-2,127,-14,-92,30,53,-35,58, 
  /* [47][0][][] */ 75,-43,-33,-18,74,-22,-44,-52,-10,127,-31,37,-11,-108,-86,7, 
  /* [48][0][][] */ 7,25,-18,-127,-7,-52,118,-115,3,-2,-37,52,47,61,3,41, 
  /* [49][0][][] */ -28,127,-65,33,54,-60,62,72,-27,31,31,-100,-24,64,117,-111, 
  /* [50][0][][] */ 15,42,-15,8,-127,3,-68,-62,57,74,31,28,-32,-36,5,40, 
  /* [51][0][][] */ 127,-37,-46,-9,-40,93,-100,-40,47,-15,-34,65,-35,-66,6,39, 
  /* [52][0][][] */ -8,-51,55,71,-36,-91,-127,-27,-45,-45,-38,-72,25,-56,22,69, 
  /* [53][0][][] */ 27,97,44,-111,13,127,82,-3,2,-25,-5,-48,87,-109,1,55, 
  /* [54][0][][] */ 18,117,-6,-25,-13,-94,-107,54,9,-18,-36,127,67,77,9,62, 
  /* [55][0][][] */ -30,-9,59,28,50,-29,99,88,-66,6,12,4,127,47,8,-16, 
  /* [56][0][][] */ 127,27,13,24,-58,121,-61,-77,-36,54,-94,10,-70,122,-19,39, 
  /* [57][0][][] */ -64,-33,-62,-40,-82,-109,57,-27,-127,-33,63,67,9,35,-17,46, 
  /* [58][0][][] */ 49,-47,63,22,9,-57,-18,1,26,-11,-127,-29,26,-31,-29,40, 
  /* [59][0][][] */ 69,20,-127,86,10,32,77,-17,-70,-47,28,-99,-106,-54,25,98, 
  /* [60][0][][] */ -9,40,-19,17,-24,-34,-19,8,-42,-68,63,127,-54,-123,-42,-3, 
  /* [61][0][][] */ -40,12,76,-101,-83,49,10,117,-8,-105,58,73,88,-12,8,127, 
  /* [62][0][][] */ 75,53,-19,-127,-25,6,4,-37,-3,41,-36,43,21,-21,-84,-77, 
  /* [63][0][][] */ -4,-33,-3,-8,-62,-73,-55,8,-61,-21,-38,-23,127,-1,49,-12, 
  /* [64][0][][] */ 18,6,-29,54,-124,-53,-27,-71,57,127,34,1,36,-63,-54,107, 
  /* [65][0][][] */ -25,12,-15,-11,-79,87,23,-29,52,-119,101,-75,84,76,-127,61, 
  /* [66][0][][] */ -127,110,-93,-86,54,-31,-124,-80,-116,127,97,-3,-121,-52,51,63, 
  /* [67][0][][] */ -4,-31,-127,-110,58,67,15,-28,-29,-9,50,-14,21,34,10,50, 
  /* [68][0][][] */ 45,20,-24,-49,-70,32,16,38,-59,61,120,-10,-17,-46,-127,0, 
  /* [69][0][][] */ 63,-88,45,-47,18,-102,-37,127,-5,57,70,70,-24,60,-32,-5, 
  /* [70][0][][] */ 56,13,127,52,102,-14,118,4,33,29,-63,29,-61,69,-65,27, 
  /* [71][0][][] */ 2,28,86,-77,-127,-83,15,16,-22,-14,23,-95,-80,-1,3,32, 
  /* [72][0][][] */ -55,-95,26,-119,80,-9,9,40,-67,17,-127,-20,63,121,-52,112, 
  /* [73][0][][] */ 19,13,48,-12,127,-97,-57,22,-42,90,-94,36,-90,-59,116,-21, 
  /* [74][0][][] */ -111,2,-127,-61,54,-48,-41,22,-75,0,-111,-28,-42,-57,-51,78, 
  /* [75][0][][] */ 87,-23,46,-37,22,5,-127,-14,-10,-98,60,-4,4,-5,-10,-9, 
  /* [76][0][][] */ -4,-51,-35,121,48,97,107,-54,83,-127,69,109,34,-71,-93,39, 
  /* [77][0][][] */ -38,-39,127,-18,31,-30,-10,-125,28,21,40,84,46,45,16,0, 
  /* [78][0][][] */ -54,18,6,-40,-8,-64,29,-13,29,-17,22,-83,-107,-77,-127,-50, 
  /* [79][0][][] */ -119,-73,-31,18,127,27,-16,39,11,24,-14,61,-58,-80,-90,-8, 
  /* [80][0][][] */ 13,-118,61,127,-25,-18,-108,82,-13,28,64,-6,-63,-2,-8,59, 
  /* [81][0][][] */ 96,68,-12,71,-4,29,22,127,16,10,107,47,108,34,65,-30, 
  /* [82][0][][] */ -60,9,2,-33,21,-127,-106,-74,7,69,-37,-35,-32,95,-80,-19, 
  /* [83][0][][] */ 104,-19,77,-34,-47,-18,-117,-15,25,-127,15,-49,-22,-14,9,-22, 
  /* [84][0][][] */ 6,-81,-108,24,127,30,44,37,-119,15,-113,-21,46,-44,-90,19, 
  /* [85][0][][] */ 23,99,66,-37,126,15,27,-126,127,-28,40,-22,109,-82,22,-19, 
  /* [86][0][][] */ 119,-32,127,52,5,-51,71,41,-58,-50,-95,-49,39,21,-59,6, 
  /* [87][0][][] */ -11,7,13,-82,66,-34,-39,22,29,-40,74,-30,-85,-127,-8,25, 
  /* [88][0][][] */ -53,-30,39,5,25,32,-65,-35,-3,14,-71,-127,-40,-34,-15,-15, 
  /* [89][0][][] */ -90,19,13,-74,18,0,-127,40,86,24,-71,-9,-22,-88,-57,-17, 
  /* [90][0][][] */ -5,-12,-28,-69,127,27,-60,37,45,60,29,-12,38,19,-54,-31, 
  /* [91][0][][] */ -32,-64,28,54,-42,-3,-16,89,-48,-47,28,-51,4,66,29,127, 
  /* [92][0][][] */ -9,72,9,-7,-12,66,-94,46,-37,-10,58,-6,-24,127,54,20, 
  /* [93][0][][] */ -24,81,-56,-78,58,79,-85,11,61,71,67,62,-127,20,-47,66, 
  /* [94][0][][] */ 17,58,83,6,-127,-41,13,-7,29,-23,30,-13,-58,-25,9,-18, 
  /* [95][0][][] */ -17,30,38,-17,127,-30,-105,75,23,17,-85,98,-17,-1,112,-61, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0016135671176016331, 0.0024542501196265221, 0.0018495690310373902, 0.00182563834823668, 0.0013669609325006604, 0.0030617311131209135, 0.0018811934860423207, 0.0024064471945166588, 0.0022004239726811647, 0.0024994940031319857, 0.0017093946225941181, 0.0027057451661676168, 0.0014630225487053394, 0.001265603001229465, 0.0014043890405446291, 0.0019554109312593937, 0.0039189285598695278, 0.0020479334052652121, 0.0017744356300681829, 0.0012725215638056397, 0.0018842334393411875, 0.0019382545724511147, 0.0014386430848389864, 0.0019569357391446829, 0.0033330314327031374, 0.0021304439287632704, 0.0018441620049998164, 0.0023618796840310097, 0.0015919450670480728, 0.002159779192879796, 0.0017237477004528046, 0.0029053834732621908, 0.0024913689121603966, 0.0014457950601354241, 0.0013246515300124884, 0.0019354178803041577, 0.0022105993703007698, 0.0014628934441134334, 0.0012949435040354729, 0.0015922738239169121, 0.0022070668637752533, 0.0016787673812359571, 0.0023615171667188406, 0.0015758817316964269, 0.0019790921360254288, 0.0017735025612637401, 0.0025255263317376375, 0.001801219186745584, 0.001103596412576735, 0.0017116221133619547, 0.0021314620971679688, 0.0018085693009197712, 0.0013523842208087444, 0.0023556649684906006, 0.0023179722484201193, 0.0019791116937994957, 0.0016972452867776155, 0.0016283644363284111, 0.0021056570112705231, 0.0018671391298994422, 0.0021055962424725294, 0.0019798125140368938, 0.0023874109610915184, 0.0018409439362585545, 0.0013195108622312546, 0.0013938200427219272, 0.0012888058554381132, 0.0019432841800153255, 0.0019065330270677805, 0.0023156017996370792, 0.0019825156778097153, 0.0015356086660176516, 0.0015406759921461344, 0.0016017123125493526, 0.001671762322075665, 0.0013225452275946736, 0.0015979469753801823, 0.0021734787151217461, 0.0017065223073586822, 0.0019794844556599855, 0.00099975359626114368, 0.00183483911678195, 0.0021733930334448814, 0.0017080772668123245, 0.0016668033786118031, 0.0020587451290339231, 0.0017188589554280043, 0.0017366677056998014, 0.0025670162867754698, 0.0022272290661931038, 0.0022756687831133604, 0.0019655292853713036, 0.0017491403268650174, 0.001545210718177259, 0.0027072390075773001, 0.0017794354353100061, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1429, 30, 3476, 5080, 5577, -1640, 3707, -1113, -2164, -689, 4384, -1899, 4312, 5679, 2735, 2368, -486, -407, -1892, 5936, 2792, -563, 2870, -673, -719, 3490, 1845, 1669, 5468, 2398, 3746, 937, 1662, 5071, 5677, 3240, -499, 3708, 3481, -4063, -303, 1664, -21, 1900, -1263, 601, -1166, 942, -7518, 1818, 1296, -3076, 6395, -669, 1887, 1311, 1345, 3031, -968, -1893, 393, 1663, 430, 4272, 6236, 3890, 3627, 4508, 4238, -722, 2807, 5501, 3531, -1837, 5190, 7283, 656, -3328, 812, 1272, 10092, 1843, -328, -2952, 1585, 703, 1812, -2645, 2891, -363, 3079, 1317, -101, -3240, -126, 1846, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00013484840746968985, 0.00020510563626885414, 0.00015457146218977869, 0.00015257153427228332, 0.00011423912656027824, 0.00025587380514480174, 0.00015721436648163944, 0.00020111066987738013, 0.00018389297474641353, 0.00020888674771413207, 0.00014285686484072357, 0.00022612349130213261, 0.00012226715625729412, 0.00010576848580967635, 0.00011736706073861569, 0.00016341684386134148, 0.0003275111666880548, 0.00017114909132942557, 0.00014829244173597544, 0.00010634667705744505, 0.0001574684283696115, 0.00016198305820580572, 0.00012022972077829763, 0.00016354427498299628, 0.0002785468241199851, 0.00017804463277570903, 0.00015411959611810744, 0.00019738609262276441, 0.00013304142339620739, 0.00018049623758997768, 0.00014405637921299785, 0.00024280758225359023, 0.00020820771169383079, 0.00012082742614438757, 0.00011070326581830159, 0.00016174599295482039, 0.00018474335956852883, 0.00012225635873619467, 0.00010822051990544423, 0.00013306889741215855, 0.00018444813031237572, 0.00014029729936737567, 0.00019735579553525895, 0.00013169898011256009, 0.0001653959188843146, 0.00014821447257418185, 0.0002110623026965186, 0.00015053078823257238, 9.2229332949500531e-05, 0.00014304302749224007, 0.00017812973237596452, 0.0001511450536781922, 0.00011302092752885073, 0.00019686672021634877, 0.00019371668167877942, 0.0001653975632507354, 0.00014184151950757951, 0.00013608504377771169, 0.00017597315309103578, 0.00015603982319589704, 0.00017596807447262108, 0.00016545612015761435, 0.00019951978174503893, 0.00015385064762085676, 0.00011027364962501451, 0.00011648378858808428, 0.00010770758672151715, 0.0001624033902771771, 0.00015933203394524753, 0.00019351857190486044, 0.00016568203864153475, 0.00012833329674322158, 0.00012875677202828228, 0.00013385768397711217, 0.00013971187581773847, 0.00011052723857574165, 0.00013354299881029874, 0.00018164112407248467, 0.00014261681644711643, 0.00016542870434932411, 8.355102181667462e-05, 0.00015334045747295022, 0.00018163396453019232, 0.00014274676505010575, 0.00013929745182394981, 0.00017205264884978533, 0.00014364781964104623, 0.00014513611677102745, 0.00021452968940138817, 0.00018613312568049878, 0.00019018130842596292, 0.00016426245565526187, 0.00014617848501075059, 0.00012913574755657464, 0.00022624833218287677, 0.00014871028542984277, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 30,62,37,-85,-88,14,-8,83,-22,-45,-120,-106,-109,127,-57,71,31,89,20,-1,-40,-103,-37,11,85,-114,2,112,56,-84,81,-4,-90,98,32,-71,-33,13,-91,-26,-109,-53,122,-74,67,-17,-77,109,-118,92,-93,6,-23,83,1,57,-85,-93,5,29,-15,89,40,-125,75,-121,-105,50,57,-84,-13,126,-57,37,-43,115,-62,-77,-25,-15,-114,47,76,27,-42,-91,-48,-53,34,46,32,66,-106,-101,-53,49, 
  /* [1][0][][] */ 85,11,77,41,29,-69,1,126,32,67,-71,59,-104,-100,35,-68,-62,-30,18,-24,106,92,-78,-70,14,-3,-23,-62,90,54,-17,-62,-84,-77,-83,-69,41,-65,-38,20,-5,100,1,38,45,11,-45,42,3,-114,5,-64,-5,-119,-46,-94,24,52,101,8,71,-77,-29,-29,124,-7,7,91,81,93,47,119,5,34,62,37,72,-84,127,-5,-75,85,-60,71,36,7,-102,39,-53,-53,62,-24,-41,26,48,14, 
  /* [2][0][][] */ 7,-68,-85,-113,-42,11,70,-3,23,-41,-67,-46,49,83,-73,-116,-94,32,-32,30,-94,-53,27,24,-53,74,-48,-48,-20,-39,-82,30,55,-64,51,9,-80,34,-78,62,61,-30,105,71,-64,-22,57,33,-13,-47,0,91,-89,-73,-2,-74,-29,20,78,109,90,80,-62,97,106,89,-78,-76,0,19,68,-24,33,26,-20,-70,89,120,-103,-77,-87,127,81,34,-71,44,44,26,74,80,93,110,-40,-25,78,96, 
  /* [3][0][][] */ -89,96,57,-88,105,109,79,69,96,23,38,-61,101,38,102,112,-126,72,-51,102,-84,72,-85,2,120,79,-114,16,51,29,-47,114,-109,26,22,-95,-99,-40,-89,-64,-91,-43,-79,20,-75,-119,-38,-35,-54,111,-36,-105,7,52,103,-73,-77,-111,66,-97,-93,30,-92,-32,9,87,-65,-40,-43,-47,80,0,83,91,-61,-81,-127,-47,78,-73,55,122,-90,-90,74,-111,99,-97,-40,-117,93,95,-94,-55,29,-36, 
  /* [4][0][][] */ -74,37,91,-7,54,20,-23,-46,28,39,-92,-64,-61,121,20,-88,69,34,-60,-84,-90,95,-100,-43,-25,-120,86,48,12,-103,123,29,-107,58,-42,-62,83,-11,-102,-105,114,97,-86,-101,-19,99,-25,-44,102,-44,105,110,89,-108,-4,52,-95,-29,112,-56,80,-35,-10,85,-54,39,-127,-76,30,96,51,-9,-45,2,32,-64,-25,73,-26,53,34,-112,49,6,75,112,38,-71,-11,-12,102,66,90,-25,-108,-99, 
  /* [5][0][][] */ -79,107,-36,-48,28,-21,-42,66,-13,-81,55,30,-67,33,108,104,-109,113,96,-3,108,13,-41,99,-127,46,-24,-50,-22,42,65,0,-64,69,68,58,102,-54,-49,-32,63,-8,-3,-45,100,114,8,-3,12,91,96,29,-73,-45,48,-32,81,-34,-57,64,60,66,2,64,73,-45,51,49,96,-54,38,11,-87,81,26,-77,-46,48,39,7,75,81,-77,-49,50,-37,-80,-5,77,108,-29,108,-22,100,6,91, 
  /* [6][0][][] */ 121,-22,10,-95,-111,-21,63,-104,6,86,34,111,56,-59,-25,120,-84,96,23,89,-116,120,97,25,-61,51,-113,-105,-42,-93,9,54,-80,26,79,90,-112,-48,13,57,-88,52,81,1,-115,82,-101,-27,44,105,-6,-18,-77,-100,-62,-85,-65,-9,12,80,54,-52,98,17,127,96,-24,54,0,-97,-36,-20,75,-47,100,114,-45,34,-52,-81,29,-27,-45,-98,88,-4,0,113,0,-99,-89,-32,-72,-19,99,-100, 
  /* [7][0][][] */ 63,33,-45,-94,87,-18,-22,-52,17,-7,-12,-18,-44,93,77,46,60,-7,-32,41,58,-77,-15,-49,104,-52,41,85,-76,-27,-12,7,-48,-32,50,-9,89,-2,-5,-86,-79,33,-51,62,6,-52,-59,-47,46,-32,-30,99,-41,32,50,27,127,-99,-6,-89,12,-67,-41,-47,-7,-48,-91,-76,35,-94,-104,3,-90,59,-30,54,-62,-32,-64,-8,-89,38,7,58,-53,-66,-20,-70,41,94,97,-72,117,-51,69,-90, 
  /* [8][0][][] */ -58,-52,-104,-4,55,-3,-24,-87,91,-118,122,-111,-27,-100,-108,2,3,77,92,-64,106,61,103,-60,-84,-108,23,-96,-81,-75,-99,-8,-51,-6,-88,121,-107,-97,-39,-69,-35,18,52,-14,-1,-52,-44,99,43,82,-28,-44,118,3,-7,-100,-18,3,-9,16,-87,-13,-95,96,-12,-38,17,-72,-70,41,-110,61,39,93,127,89,94,-20,-3,-13,43,83,4,54,71,-65,-20,80,62,71,-56,74,-116,121,121,-47, 
  /* [9][0][][] */ -36,-37,16,71,27,57,81,28,22,52,65,58,100,51,-33,-27,-3,-62,-68,-82,-88,78,18,-26,-89,-61,-51,45,60,-122,-37,52,-91,-67,107,-25,-35,-7,-76,-69,108,89,-13,3,39,52,18,-23,-26,-34,-102,-51,-112,28,20,70,1,-78,5,9,-4,-69,28,74,-127,70,66,65,95,-69,-110,12,42,15,61,-108,107,-64,10,-49,-117,-32,75,-79,53,-62,-93,23,-77,88,31,3,-81,66,28,50, 
  /* [10][0][][] */ -108,38,-88,-101,-50,87,-127,-113,80,-110,81,74,-16,25,63,-14,118,8,-84,32,-19,-69,-51,84,59,106,-42,-35,-116,-89,-21,-113,61,28,103,-125,111,-88,36,111,90,29,22,51,-23,19,-9,-12,-77,120,87,126,96,-98,93,55,30,-21,73,-13,67,60,92,53,-48,100,-10,52,-2,-18,70,21,-108,-114,16,54,67,108,71,-6,-8,53,2,32,8,81,-93,21,-18,26,-63,85,50,67,16,-20, 
  /* [11][0][][] */ 91,73,-62,-87,97,-8,-41,-77,-85,49,50,-23,32,-77,67,-70,-122,80,-12,-45,-32,-36,73,-78,-125,102,83,94,10,59,7,43,57,91,-111,-63,20,117,-47,-67,42,-117,119,-97,95,40,-116,-16,38,81,-54,78,68,-84,-39,-97,-40,91,-106,76,-25,9,127,-54,73,-20,107,2,101,99,-52,30,-85,-41,33,-96,-4,64,-66,3,-87,-43,-110,89,-3,-85,-55,-17,-80,62,-32,-51,79,44,125,5, 
  /* [12][0][][] */ -36,-11,-30,116,31,-31,-16,-73,29,21,-5,67,-33,-36,-17,54,52,-12,31,117,-40,-12,77,79,38,91,-48,17,101,-67,75,75,63,-4,25,-46,22,-36,63,47,89,93,35,-57,74,3,-14,82,-27,127,-28,66,-22,-46,85,64,29,-61,-55,-50,46,14,95,9,-38,15,10,-29,-75,-77,69,4,-74,-30,-10,17,-43,8,73,-31,49,104,72,12,63,5,13,-49,-31,-65,27,34,-51,-51,-50,102, 
  /* [13][0][][] */ 50,42,73,-59,85,11,20,-29,24,-94,31,11,-5,62,47,69,50,44,19,75,105,-16,-8,-61,35,-69,14,-63,24,-69,-38,-19,-23,-89,24,5,61,-92,71,36,-39,-75,75,82,52,4,48,60,-91,55,-31,-30,-27,-108,8,71,5,-39,63,-55,-80,-9,71,-51,-68,34,-16,-96,-70,-48,-95,83,-36,-13,97,-27,-27,56,0,-37,68,9,10,73,74,-62,-98,77,-52,-32,22,-26,44,127,-14,-80, 
  /* [14][0][][] */ -30,-50,93,56,53,-80,13,-3,-3,68,-26,-81,12,119,-16,45,-110,-20,-25,-94,2,46,-42,-45,-51,-22,78,33,76,-68,80,-47,-29,109,124,24,30,75,-83,-89,98,109,125,34,84,-58,-1,-47,-127,4,-28,-83,-9,-109,86,-98,20,-81,-33,-102,-82,-91,24,16,-6,79,12,-8,-99,-9,42,-54,-90,-66,64,-12,-78,-19,80,16,122,-50,119,32,-64,-74,-47,80,61,-1,-66,-20,-18,-102,-68,-53, 
  /* [15][0][][] */ 12,36,-14,-75,-108,79,-2,49,-123,-54,91,-47,-26,-67,-57,-48,-42,78,-111,6,-39,-93,-70,-38,-19,-20,88,93,-26,-89,-127,13,46,88,-53,-37,-37,90,-43,-101,-73,101,94,-72,69,41,-86,-101,17,-43,-44,-102,-89,-17,23,3,38,-26,80,-60,-116,-105,-112,-70,-57,16,-22,-90,-31,-80,-95,2,54,36,-12,70,-45,92,-116,-35,-37,-77,-52,-64,-61,-52,90,-41,46,-106,-96,86,-15,-52,100,-87, 
  /* [16][0][][] */ -10,15,-101,113,80,-77,94,95,-24,44,76,-69,-57,84,-127,-37,28,68,-64,-35,-125,-28,-107,12,122,-67,-85,18,-55,86,103,28,-81,-51,13,11,-18,89,-123,54,47,28,70,-62,-100,-23,-95,-62,-28,47,86,72,-46,-120,48,5,55,83,-46,-66,30,-29,-12,58,-18,24,59,-50,-7,-63,75,9,71,-4,39,-86,76,-53,-103,-54,-34,36,-19,-107,89,-63,-1,-117,104,-100,92,-109,52,33,63,-92, 
  /* [17][0][][] */ -4,92,-98,-29,-22,37,-41,110,28,-16,100,-25,-27,105,43,-51,19,79,-12,71,27,-4,-50,-12,-119,19,-24,-70,-30,54,70,-93,71,-28,-22,70,42,-46,-15,44,-44,107,-14,-70,108,32,-78,-79,18,-100,0,-113,-64,8,51,27,-57,86,-48,-59,105,97,75,80,-43,40,-77,74,-56,-59,16,-13,-29,-24,6,48,-103,-61,113,-82,-50,-17,100,-50,76,28,-42,102,17,127,-26,64,-83,-38,76,-27, 
  /* [18][0][][] */ 79,-82,-79,-12,51,25,-104,-73,-39,39,-69,-76,6,96,32,46,5,79,-97,-40,-56,49,22,30,-3,-19,47,-75,-15,-78,36,-106,-22,85,101,-48,17,-40,-45,-73,-95,19,127,-37,-13,60,96,-56,65,2,-46,-96,-35,-7,-26,31,67,26,-97,56,-81,-15,44,93,-10,42,-78,-84,98,-29,-56,82,-74,98,16,105,30,49,8,1,-41,-52,-78,81,16,-77,91,25,75,41,-25,116,-71,15,-4,-101, 
  /* [19][0][][] */ 78,70,-96,81,110,78,-60,19,96,-37,10,-48,76,82,125,-37,28,-90,-29,119,-79,-74,35,120,42,-9,41,-22,82,52,116,-111,71,-16,-81,90,-99,-23,-57,25,57,33,60,56,-29,57,-104,107,109,22,92,-45,70,-87,88,107,40,20,-92,-45,-29,67,117,-39,103,-2,-63,92,118,-3,-93,16,23,86,26,97,13,74,-70,127,-99,-74,114,-103,47,4,89,-72,-73,3,-17,19,-28,-34,89,-111, 
  /* [20][0][][] */ 5,-97,-18,66,96,25,85,34,-53,-46,17,13,-26,-69,-7,-97,-11,-60,102,38,52,-112,95,-19,-84,120,-87,14,8,-82,-45,9,59,106,82,-55,100,24,-110,14,112,-101,-93,-30,48,16,-11,-41,85,0,109,-63,1,103,30,-77,-26,-124,78,16,-41,92,66,79,31,99,23,-75,30,77,-54,19,-90,-85,-44,114,-7,-85,33,-77,14,127,80,-43,62,40,-63,-118,114,11,-105,-79,84,-65,22,78, 
  /* [21][0][][] */ 77,103,92,-79,-35,-26,-78,-45,-51,86,17,-98,-58,-70,-100,-88,-33,-13,-80,-103,-42,47,102,-67,91,36,71,-15,-61,-95,104,4,-104,34,89,93,-105,-83,-101,19,15,53,-37,10,-74,89,-127,63,60,-126,-7,-68,57,-51,-97,-60,-24,-66,83,65,4,-46,8,64,-40,48,-70,1,-3,-43,-17,7,-35,-102,-52,5,-94,96,103,76,-46,86,19,-17,-120,-65,17,18,-41,40,-65,72,-45,-97,92,-35, 
  /* [22][0][][] */ -21,-26,67,4,-18,-68,125,15,22,3,4,48,-37,35,-30,-59,-38,4,-58,70,27,80,8,82,-12,50,-68,62,-8,-70,-30,-20,-41,95,36,53,23,-36,-54,-31,9,47,-77,6,51,-36,87,-43,-12,32,-64,125,-34,116,-2,45,105,66,-69,90,-60,3,-8,55,79,-69,-64,23,47,66,-52,-26,6,81,-55,23,-51,-46,25,-22,92,5,-83,0,37,127,-19,69,51,69,102,27,-39,54,57,91, 
  /* [23][0][][] */ -42,-2,13,-33,-86,-1,45,23,10,-94,47,-98,-102,66,61,-33,10,29,49,19,47,83,50,-11,20,-51,-58,-58,-91,76,-10,92,67,-61,87,-14,2,93,74,-75,84,26,91,-79,-100,-6,-96,96,5,69,-36,-35,-73,91,58,3,12,1,49,-32,-36,47,77,-101,92,-88,17,-14,84,96,-74,98,90,36,27,-39,-114,-1,-76,-8,-93,-9,-76,-80,-45,-127,97,-92,-31,-51,-28,-67,-5,-33,-63,97, 
  /* [24][0][][] */ 7,96,118,103,68,-17,-102,119,2,-93,-73,83,31,6,6,-51,-28,47,-50,91,127,-15,-14,36,-52,66,-54,-49,92,126,105,-22,116,-37,-4,-15,25,-41,-72,-78,-2,104,-65,55,-37,86,51,-57,-101,-58,39,-38,-48,73,121,-39,47,-33,-8,-24,117,46,63,-14,-105,3,-50,115,77,-74,-11,41,5,-97,-1,-32,32,-63,-17,81,74,-67,68,-53,-72,-76,-11,-50,-77,91,-48,-18,-70,-56,80,107, 
  /* [25][0][][] */ -2,16,25,90,28,33,-11,4,-4,62,75,72,-43,80,48,-47,11,0,-58,30,43,85,23,86,89,-22,-60,1,79,34,-52,77,-28,-19,88,90,-45,81,-51,86,-23,127,31,12,4,-60,-45,-42,-3,63,-62,25,25,42,-63,-34,63,-26,103,39,-53,96,-42,62,-42,-40,-70,100,17,15,52,48,29,76,-10,47,47,32,14,-43,-23,52,-45,81,92,74,12,20,-21,73,2,13,23,35,67,87, 
  /* [26][0][][] */ 67,-87,-3,2,83,-102,101,-48,39,-23,-93,12,-48,-66,27,-29,107,1,-57,-79,39,-52,65,89,21,-26,37,42,26,-15,-50,-39,-21,44,40,127,-2,114,-119,99,99,13,-38,-106,-13,41,117,26,22,62,88,-3,96,105,62,34,114,-5,-61,-17,9,112,-81,-113,51,-36,-114,-33,-4,-47,27,37,-118,-42,-94,-76,-23,35,-31,50,105,41,-50,-11,-13,-33,-11,-96,25,18,98,103,-38,55,43,-19, 
  /* [27][0][][] */ 60,25,-109,127,-26,-18,12,-9,-100,103,-34,22,-114,76,75,-56,81,-124,3,-109,-32,58,76,-86,-99,80,-43,42,97,-69,68,-97,111,-86,35,122,104,60,-78,-41,43,53,-28,51,64,-107,110,-60,-20,-50,64,111,106,66,-93,-80,109,-34,-33,12,30,-77,-113,-92,35,98,26,-95,41,4,32,-109,17,-74,-5,-84,-90,25,60,14,-59,-33,85,-1,-105,-85,53,-39,101,15,53,103,107,44,60,-93, 
  /* [28][0][][] */ -100,122,-39,78,17,95,-102,8,59,-60,-91,72,71,-70,34,-90,-75,80,48,98,107,81,17,-81,38,-60,88,117,-47,32,-12,40,-22,25,-27,-45,44,97,-28,122,-101,-32,7,73,112,118,-13,11,100,-4,-101,-13,65,-51,31,64,80,53,50,85,53,-22,12,-110,-68,3,100,-41,-75,65,68,118,-100,57,127,34,66,-53,1,87,-63,40,70,-35,58,1,-71,-52,-89,29,83,-78,46,71,-6,97, 
  /* [29][0][][] */ 22,-10,41,16,-22,10,25,-93,-51,-36,-40,-87,68,-33,-64,-15,80,93,-57,101,40,-76,-75,-85,61,-63,-83,-41,-43,98,-46,27,-102,117,105,9,-20,-85,33,-24,101,-53,-10,43,-71,71,-127,11,-47,62,38,37,-71,-18,89,83,26,-11,-57,7,123,103,-62,39,87,-74,-98,38,77,-13,-46,-38,-34,-105,-14,-90,-51,17,13,68,1,-52,29,-44,14,-113,-77,96,-14,47,-73,-53,-105,1,-54,-75, 
  /* [30][0][][] */ -67,-90,-84,-56,63,95,51,18,-89,37,31,49,100,60,-96,-107,81,115,84,8,-5,-73,124,-83,-12,58,-18,15,83,-32,15,42,0,-25,29,33,-88,-37,90,-22,-22,-104,-59,-79,82,127,-39,-32,-85,100,-90,-63,-110,-34,99,-103,84,62,3,-12,-43,-108,55,83,120,104,37,67,98,82,111,-75,38,-111,-78,22,56,-48,2,-32,52,30,110,33,84,-81,67,42,111,48,56,-112,5,85,-71,-74, 
  /* [31][0][][] */ 35,110,67,-38,-66,-13,97,-87,-78,-45,56,-61,-83,-79,84,16,-9,41,-18,26,-26,-41,89,4,99,91,-46,-63,-17,73,51,63,75,29,52,109,42,115,-19,-87,4,104,-95,28,22,94,54,-6,-105,-13,-57,72,20,-76,-14,-6,26,26,25,108,-8,-127,111,-104,20,-94,71,-65,-112,25,110,-35,67,-59,-41,55,-9,91,49,-82,-6,9,-111,-79,-30,89,113,-104,-65,83,41,-28,-37,-28,-110,75, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0017296562436968088, 0.0018683116650208831, 0.0018340807873755693, 0.0017640365986153483, 0.0018314288463443518, 0.0020273702684789896, 0.0017725486541166902, 0.0022026540245860815, 0.0018222046783193946, 0.0017962864367291331, 0.0017357933102175593, 0.0017741656629368663, 0.0024413708597421646, 0.0022452468983829021, 0.0018189604161307216, 0.00187605747487396, 0.0018302467651665211, 0.0019091987051069736, 0.0020722262561321259, 0.001766008441336453, 0.0018445124151185155, 0.0019306078320369124, 0.0027854153886437416, 0.0020943142008036375, 0.001863442943431437, 0.002808272372931242, 0.0018291723681613803, 0.00184966332744807, 0.0018720573280006647, 0.0018832038622349501, 0.0017900022212415934, 0.0018225213279947639, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -73, 319, -138, -342, 308, 280, 502, -168, 199, -193, -363, 334, 1609, 55, 297, -573, -352, 457, 270, 320, -77, -271, 1502, 31, 295, 1717, -152, -42, 293, 290, 241, -198, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.0697796066524461e-05, 4.3960273615084589e-05, 4.3154843297088519e-05, 4.1506744310026988e-05, 4.3092444684589282e-05, 4.770282976096496e-05, 4.1707029595272616e-05, 5.1827155402861536e-05, 4.2875406506936997e-05, 4.2265564843546599e-05, 4.0842194721335545e-05, 4.1745075577637181e-05, 5.74440200580284e-05, 5.2829338528681546e-05, 4.2799070797627792e-05, 4.4142529077362269e-05, 4.3064632336609066e-05, 4.4922322558704764e-05, 4.8758265620563179e-05, 4.1553139453753829e-05, 4.340029408922419e-05, 4.5426066208165139e-05, 6.5539185015950352e-05, 4.9277983634965494e-05, 4.3845717300428078e-05, 6.6076994698960334e-05, 4.3039352021878585e-05, 4.3521489715203643e-05, 4.4048407289665192e-05, 4.4310680095804855e-05, 4.2117699194932356e-05, 4.2882857087533921e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -26,-31,-29,-34,91,-4,96,11,29,-63,-67,-55,94,-37,101,-13,-65,-8,71,14,74,-25,127,-35,-32,107,18,-74,-64,-71,34,24, 
  /* [1][0][][] */ 90,127,-88,-73,17,104,17,-51,71,-99,-87,63,-98,6,32,77,-85,100,107,77,-71,5,-59,52,108,-31,-84,-94,66,90,111,-110, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.00469595892354846, 0.0034340298734605312, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 29783, -39910, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00015914767573121935, 0.00011638046998996288, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.097732052206993103, } };
const TfArray<1, int> quant46_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.072438135743141174, } };
const TfArray<1, int> quant50_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.071837574243545532, } };
const TfArray<1, int> quant53_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.091377630829811096, } };
const TfArray<1, int> quant54_zero = { 1, { -34 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.051054675132036209, } };
const TfArray<1, int> quant58_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.053840775042772293, } };
const TfArray<1, int> quant61_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.069108963012695312, } };
const TfArray<1, int> quant62_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.040388025343418121, } };
const TfArray<1, int> quant65_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.08357161283493042, } };
const TfArray<1, int> quant66_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.033890347927808762, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10963337868452072, } };
const TfArray<1, int> quant69_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
