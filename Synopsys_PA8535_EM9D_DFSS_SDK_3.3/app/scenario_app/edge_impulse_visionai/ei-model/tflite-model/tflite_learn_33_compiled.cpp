/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 18.08.2023 09:21:23

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238576;
#else
constexpr int kTensorArenaSize = 237552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 25470, -27941, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00018191711569670588, 0.00016589307051617652, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 76,-51,-64,123,-94,-3,-63,48,111,-9,-55,-37,-28,55,-24,15,127,-40,-32,-67,100,51,103,-76,-41,-49,-15,74,24,-86,9,78, 
  /* [1][0][][] */ 52,85,87,-73,-74,88,-7,21,-37,-18,48,121,127,52,44,-1,-44,-24,-63,-111,-81,48,33,125,85,74,-61,-5,112,-111,-115,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0036925324238836765, 0.0033672782592475414, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -359, 501, 546, 50, -628, 655, -133, 509, -479, -36, 560, 509, 516, 507, 100, -483, -354, 1258, -344, 275, -399, 610, 266, 560, 441, 325, 157, -269, 150, -458, 12, -229, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.7449233534280211e-05, 4.9098260205937549e-05, 4.6567452955059707e-05, 4.4390770199242979e-05, 4.3298707169014961e-05, 4.4862325012218207e-05, 4.8254372813971713e-05, 4.9241967644775286e-05, 4.8341586079914123e-05, 4.4378590246196836e-05, 4.8075246013468131e-05, 4.7948047722456977e-05, 4.7842971980571747e-05, 4.8241996410069987e-05, 5.0268787163076922e-05, 4.3637512135319412e-05, 4.1049635910894722e-05, 5.1065915613435209e-05, 4.4598313252208754e-05, 4.599970270646736e-05, 4.1473744204267859e-05, 4.4698514102492481e-05, 4.8896617954596877e-05, 4.6165157982613891e-05, 4.8965277528623119e-05, 4.6038112486712635e-05, 5.2278282964834943e-05, 4.5016473450232297e-05, 5.15741303388495e-05, 4.5585722546093166e-05, 5.6563512771390378e-05, 4.367381552583538e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -43,-51,101,12,86,-11,-94,-106,54,-97,-117,-16,44,0,-36,55,-67,-35,-77,-64,-70,-112,-6,99,-127,3,72,-46,87,-5,-30,-84,75,-71,-102,56,-108,-88,-89,19,66,-93,-100,91,42,-106,99,-29, 
  /* [1][0][][] */ -37,47,-59,8,-27,88,56,19,90,-87,-88,81,73,-37,36,74,104,-31,37,127,-36,2,47,35,31,27,-25,108,11,18,111,-51,69,110,-3,35,60,74,-13,-51,-65,18,-7,-83,-24,36,-26,-45, 
  /* [2][0][][] */ 65,53,-52,106,-10,-49,111,107,-86,99,-21,92,103,-24,97,-101,-59,-18,41,69,-88,-5,127,32,-23,94,121,14,-67,95,102,109,-58,-10,-84,-97,-78,114,108,-14,-120,-65,30,9,-74,118,-19,-70, 
  /* [3][0][][] */ 76,0,45,-19,-73,52,-85,44,56,25,71,29,111,115,80,4,119,110,-47,24,127,-91,-65,-124,-20,-118,-88,117,70,-107,86,11,-59,-36,-10,-15,-94,-28,53,49,-24,-95,-96,8,81,38,-46,-83, 
  /* [4][0][][] */ 41,98,-11,48,-41,-37,16,6,53,86,-24,65,18,-45,-25,-82,-31,-11,-79,3,107,-111,79,16,-24,-17,55,-71,-63,26,-91,-69,63,114,3,-125,-64,-23,-127,40,-61,-80,-94,-114,25,113,28,51, 
  /* [5][0][][] */ 117,-78,95,100,56,-107,45,72,123,-107,7,-98,34,84,54,52,52,71,-85,117,46,57,28,-27,-127,-59,-1,-99,45,47,25,-88,-27,12,-77,17,-109,-25,41,36,-114,-40,59,106,-26,17,30,-50, 
  /* [6][0][][] */ 44,-31,111,77,-73,-52,13,67,5,-74,26,-93,93,67,119,-94,34,37,-4,104,-66,-117,120,76,-47,-66,9,-65,-26,-98,72,-66,-78,-115,-34,-86,-11,66,-111,127,84,61,32,1,-108,99,-66,-42, 
  /* [7][0][][] */ 127,80,-26,-31,-58,121,-7,10,122,15,-82,2,63,-96,57,82,53,20,2,120,61,41,5,90,-65,106,53,61,-71,115,-13,47,34,33,69,102,-91,95,-7,-18,88,-63,94,75,58,-2,101,-100, 
  /* [8][0][][] */ -5,19,-53,-98,48,16,-93,-31,-5,26,30,116,-7,-34,-95,-81,-68,82,-67,4,20,-33,68,98,-119,80,30,69,-69,6,-104,103,81,-41,39,-11,105,-12,-21,57,80,89,-123,-127,-20,-29,-28,99, 
  /* [9][0][][] */ 0,5,122,51,87,-118,-28,-127,44,53,-11,81,-25,-84,-111,-32,11,1,-102,-66,6,108,-114,-114,121,-10,-15,28,1,-67,-96,106,65,-1,34,-20,-81,16,-33,-49,53,-72,59,-99,85,25,-108,60, 
  /* [10][0][][] */ -42,98,102,-54,-4,114,127,39,51,43,37,-85,110,69,-19,23,-35,90,-95,-47,-7,36,68,-60,33,64,-100,-105,-45,93,-75,-67,97,108,123,80,-30,22,-32,47,-40,127,-93,-25,-86,-57,0,-51, 
  /* [11][0][][] */ 127,27,-5,113,127,55,72,40,122,102,-63,90,4,-96,40,-54,-55,-93,66,53,41,82,36,-99,-102,-84,-6,75,80,6,39,-7,-76,-62,58,53,-53,89,-28,-47,-30,115,-59,16,-31,-58,-86,-81, 
  /* [12][0][][] */ 31,82,-44,11,98,19,-15,45,-62,70,-1,-4,-34,-2,61,-66,-97,-24,-44,-66,37,-2,29,106,-64,-37,114,-93,94,27,-20,127,-73,-60,-38,24,7,-58,-16,54,111,52,-94,-27,-11,-82,-35,124, 
  /* [13][0][][] */ 125,-44,111,105,103,123,96,74,82,-90,24,-44,99,60,78,-36,-113,-63,-66,40,76,-19,127,-37,-61,48,20,25,-83,-75,92,49,51,111,-14,43,-72,-15,27,78,-65,88,-38,22,-33,29,1,-22, 
  /* [14][0][][] */ -66,-93,84,65,76,-47,-26,-105,-90,-31,42,70,-27,-92,-78,-89,-62,-63,18,7,-65,11,-9,66,-110,-80,-45,28,-107,-127,-89,17,86,-24,-38,-11,94,95,38,-122,-2,-111,27,65,64,-106,42,-77, 
  /* [15][0][][] */ -5,-41,-37,71,92,-100,31,-113,50,-11,-94,38,104,-2,-109,-127,98,0,-105,7,43,14,64,108,82,63,27,99,19,49,44,-119,-4,2,-77,-14,-78,103,117,-83,17,111,-72,-44,20,-85,-55,-93, 
  /* [16][0][][] */ -90,-9,113,-75,43,121,-65,40,53,49,-127,112,-17,-40,-68,-78,126,87,84,70,123,89,-46,58,-38,59,-87,70,-104,8,55,7,-127,84,67,68,-46,58,-56,-83,32,-59,77,107,68,119,121,-17, 
  /* [17][0][][] */ 54,-78,48,94,-14,-95,-40,-66,64,-64,99,68,120,81,-85,57,59,74,120,125,-67,11,37,-22,47,82,-53,53,127,-28,-8,88,-2,2,55,28,-24,116,-54,-5,-65,-11,3,13,31,38,107,-73, 
  /* [18][0][][] */ -106,98,109,-78,-15,-123,-112,-1,-12,72,-121,-32,-45,35,57,-68,21,-24,54,-30,103,-55,15,-91,28,-107,-26,113,29,29,-6,39,42,-36,-122,-120,-40,28,-39,61,-48,-7,-58,-19,-127,15,21,-9, 
  /* [19][0][][] */ 36,31,85,45,72,-85,109,101,108,-57,43,17,-81,50,-55,62,85,-64,127,63,-13,95,-40,29,103,-74,34,-64,-67,-117,-52,52,93,-73,48,11,14,-58,-41,-89,60,-108,-82,26,-75,43,94,-78, 
  /* [20][0][][] */ -16,72,75,103,-102,98,15,61,11,10,-105,32,-12,95,40,-89,-56,-38,-79,-40,24,-57,-93,-87,90,-88,-125,51,29,8,-53,123,109,45,-24,56,43,-43,-17,-127,-98,-44,-105,-124,-36,-70,-81,116, 
  /* [21][0][][] */ 115,95,86,-98,114,-67,95,29,13,-57,-61,27,16,26,-40,-82,-109,-27,38,-2,123,-39,89,-75,61,-77,-19,83,20,18,10,-10,20,32,-84,-105,127,119,-124,-21,-5,19,44,1,-92,-91,-75,107, 
  /* [22][0][][] */ 43,-41,-65,-89,93,-46,94,62,-92,93,-73,-114,113,-127,-101,-75,33,84,-117,-55,91,-75,33,34,93,-14,-100,102,-61,-66,-78,-98,52,63,15,5,9,-13,-55,-106,-3,-6,11,87,58,-114,88,-18, 
  /* [23][0][][] */ 82,-76,15,69,110,-105,25,-94,70,-72,100,51,28,-127,32,-27,89,-27,-108,116,105,-76,117,-27,-16,-4,100,26,73,62,87,-27,-28,53,25,41,109,8,-116,18,-119,12,24,-102,-62,-96,117,34, 
  /* [24][0][][] */ -56,-30,-90,-56,-73,-113,-53,-78,71,127,88,23,120,40,-23,-113,-99,45,19,-36,103,-81,-46,-32,48,-37,89,56,103,69,-2,-46,8,14,47,20,-43,-71,56,-13,-89,-84,119,7,26,-46,39,74, 
  /* [25][0][][] */ -77,-47,-75,-5,101,-67,-115,62,47,-108,-39,1,77,-28,-104,-15,-79,66,28,-107,75,86,-11,-61,13,-56,-96,43,73,-83,18,127,101,-109,41,69,107,-60,-24,-15,-98,107,-99,-2,106,40,62,39, 
  /* [26][0][][] */ 44,-107,-12,4,-89,-9,11,-9,-101,-107,95,94,-64,-37,15,-18,127,30,-22,-32,17,74,91,9,51,61,11,48,39,4,-87,0,-28,-55,-86,-90,-47,74,-30,93,-86,96,64,31,-63,84,-34,102, 
  /* [27][0][][] */ 7,5,-69,-110,-127,-76,-72,-21,43,100,37,-69,-31,68,82,-33,69,-19,64,-89,-100,10,-31,-28,-112,48,-118,-6,71,25,-28,-13,61,70,-96,-90,-97,-70,-120,91,-95,15,26,18,101,24,70,105, 
  /* [28][0][][] */ 66,-23,82,45,-99,-57,-115,-66,-68,-95,43,36,-75,-84,8,74,89,84,-71,71,-21,24,-103,-94,-127,65,-91,-54,-80,-72,-14,-19,-91,6,41,45,19,-106,-34,28,62,42,-83,32,-98,-4,-21,46, 
  /* [29][0][][] */ 41,46,51,-62,-97,8,-127,0,101,-23,-96,-82,106,-93,-58,-53,-104,97,38,-76,-86,-33,53,6,-40,9,-54,-34,-101,-16,112,-12,48,-2,-77,-52,-18,101,-14,92,60,102,-57,87,-4,107,-51,-29, 
  /* [30][0][][] */ 21,-54,-49,38,-85,16,-49,-13,91,-14,44,-35,-77,25,49,5,9,51,76,-71,37,-84,-92,7,-92,45,-58,101,-4,-94,-65,9,-72,-60,-101,-48,15,-16,-1,17,71,-63,29,127,87,-33,85,53, 
  /* [31][0][][] */ 85,-104,40,110,53,65,-58,-110,-35,-23,-88,-67,111,-127,-54,117,-61,-93,41,56,70,38,-33,112,52,-124,36,44,-65,-83,53,117,19,21,-100,-10,105,-36,-70,-123,64,-75,-32,35,4,-55,-41,28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023146537132561207, 0.0023950960021466017, 0.0022716389503329992, 0.0021654567681252956, 0.002112183952704072, 0.0021884599700570107, 0.0023539296817034483, 0.002402106299996376, 0.0023581841960549355, 0.002164862584322691, 0.0023451915476471186, 0.0023389866109937429, 0.002333860844373703, 0.0023533259518444538, 0.0024521963205188513, 0.0021287114359438419, 0.0020024704281240702, 0.0024910815991461277, 0.0021755809430032969, 0.0022439430467784405, 0.0020231592934578657, 0.0021804689895361662, 0.0023852596059441566, 0.0022520143538713455, 0.0023886088747531176, 0.0022458168677985668, 0.0025502229109406471, 0.002195979468524456, 0.0025158731732517481, 0.0022237484809011221, 0.0027592636179178953, 0.0021304823458194733, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -190, 1226, 1935, 4203, 6850, -1045, -1103, 14811, 1167, 9386, 473, -811, 4158, -3698, 2243, -1854, -276, -2929, 891, 1481, 2344, 3384, 4651, 510, -2648, -1661, 387, 1925, 1576, 2252, -840, 2824, 4152, 4401, 4101, 1818, 11116, 1566, 1070, -931, 896, 13039, -1030, 1511, 7574, 80, 1384, 4272, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00034578403574414551, 0.00024409117759205401, 0.00014193056267686188, 0.000146885184221901, 0.00013884731743019074, 0.00016201230755541474, 0.00029575912049040198, 6.7068292992189527e-05, 0.00025381139130331576, 8.6130385170690715e-05, 0.00019423472986090928, 0.00049878936260938644, 0.00015996753063518554, 0.00017992543871514499, 0.0003287165891379118, 0.00015260098734870553, 0.00015098405128810555, 5.8936700952472165e-05, 0.00026057774084620178, 0.00037662716931663454, 0.00027826678706333041, 0.00015248323325067759, 0.00014109053881838918, 0.00022022772463969886, 0.0001899716880870983, 0.00028056302107870579, 0.00034743320429697633, 0.00027135209529660642, 0.00021411215129774064, 0.00027594299172051251, 0.00015391096530947834, 0.00022582248493563384, 0.00015943073958624154, 0.0001671579375397414, 0.00010625483992043883, 0.00013372499961405993, 7.6370546594262123e-05, 0.00017146820027846843, 0.00015072156384121627, 0.00027440889971330762, 0.00018062211165670305, 7.4583411333151162e-05, 0.00017455373017583042, 0.00012356071965768933, 0.00010660317639121786, 0.00020974126528017223, 0.00018642601207830012, 0.00017906953871715814, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 17,-19,-60,15,-127,6,-52,-3, 
  /* [1][0][][] */ -113,29,127,12,-115,-14,3,-17, 
  /* [2][0][][] */ 11,71,-36,25,-51,-127,-19,86, 
  /* [3][0][][] */ -85,40,-2,127,-1,-55,-73,-51, 
  /* [4][0][][] */ 12,-13,41,-125,-29,17,-127,15, 
  /* [5][0][][] */ 71,125,-62,-49,-34,-8,41,-127, 
  /* [6][0][][] */ 52,-42,47,99,-50,-127,-5,-90, 
  /* [7][0][][] */ 32,114,-49,-63,-67,-35,17,-127, 
  /* [8][0][][] */ -3,-27,55,-2,6,5,-51,-127, 
  /* [9][0][][] */ -86,-6,-112,28,-127,-82,-93,-21, 
  /* [10][0][][] */ 80,5,93,-38,-127,6,83,92, 
  /* [11][0][][] */ 127,-31,-88,12,63,-3,-80,0, 
  /* [12][0][][] */ -27,-99,127,14,14,4,-73,60, 
  /* [13][0][][] */ 44,-70,73,-20,24,-127,61,-120, 
  /* [14][0][][] */ -101,39,127,-4,-39,-70,46,-46, 
  /* [15][0][][] */ 45,123,-39,-50,-55,14,47,-127, 
  /* [16][0][][] */ 27,95,-48,60,-1,-36,-17,127, 
  /* [17][0][][] */ 24,79,-21,86,-50,75,-127,46, 
  /* [18][0][][] */ 74,-38,127,-43,83,-97,14,-28, 
  /* [19][0][][] */ 11,-10,22,127,22,-51,-37,-102, 
  /* [20][0][][] */ 5,21,-22,40,-13,50,-127,7, 
  /* [21][0][][] */ 8,-2,58,19,20,127,49,-61, 
  /* [22][0][][] */ 65,-127,-7,61,-93,65,21,15, 
  /* [23][0][][] */ -36,-115,-7,-109,3,-65,-1,-127, 
  /* [24][0][][] */ 18,21,-19,-59,-36,-127,-47,51, 
  /* [25][0][][] */ 66,67,127,11,7,25,-44,-4, 
  /* [26][0][][] */ -115,41,127,-48,-97,-22,92,-8, 
  /* [27][0][][] */ -82,46,-37,-100,27,127,-23,91, 
  /* [28][0][][] */ 10,-102,66,54,42,3,-35,127, 
  /* [29][0][][] */ -118,60,70,-30,-127,1,90,-30, 
  /* [30][0][][] */ 90,-86,21,66,-127,-24,34,-83, 
  /* [31][0][][] */ 54,84,59,-40,-117,-19,10,127, 
  /* [32][0][][] */ -33,-24,94,-47,41,17,-127,-120, 
  /* [33][0][][] */ 57,36,108,-127,18,48,-36,62, 
  /* [34][0][][] */ -21,-120,96,-37,29,127,60,-97, 
  /* [35][0][][] */ 37,15,117,-1,2,127,20,-62, 
  /* [36][0][][] */ -20,34,-32,48,59,-127,5,20, 
  /* [37][0][][] */ 20,-19,61,23,-127,112,-33,-19, 
  /* [38][0][][] */ -127,-22,-98,-27,79,-38,-113,-33, 
  /* [39][0][][] */ 21,-1,39,-116,-30,52,-127,11, 
  /* [40][0][][] */ 98,-33,-71,-127,68,67,61,-21, 
  /* [41][0][][] */ 15,-18,-6,127,-109,3,-84,-63, 
  /* [42][0][][] */ -86,22,69,127,-58,-65,-60,8, 
  /* [43][0][][] */ 86,-112,100,44,-114,36,127,55, 
  /* [44][0][][] */ 12,-44,29,-65,-17,127,43,26, 
  /* [45][0][][] */ -32,33,-40,5,76,-47,-127,-37, 
  /* [46][0][][] */ -103,-97,-8,-17,20,127,-45,-118, 
  /* [47][0][][] */ -127,-99,-62,37,29,125,-32,-61, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0038040084764361382, 0.0026852739974856377, 0.0015613938448950648, 0.0016159000806510448, 0.0015274746110662818, 0.0017823153175413609, 0.0032536787912249565, 0.00073782569961622357, 0.0027922072913497686, 0.00094752991572022438, 0.0021367976441979408, 0.0054872371256351471, 0.0017598205013200641, 0.0019793796818703413, 0.003616247558966279, 0.0016787803033366799, 0.0016609922749921679, 0.00064836913952603936, 0.002866644412279129, 0.0041433172300457954, 0.003061243798583746, 0.0016774849500507116, 0.0015521526802331209, 0.0024227495305240154, 0.0020898994989693165, 0.0030865047592669725, 0.003822151105850935, 0.0029851743020117283, 0.0023554714862257242, 0.0030356792267411947, 0.0016931915888562799, 0.0024842980783432722, 0.0017539151012897491, 0.0018389229662716389, 0.0011689212406054139, 0.0014711234252899885, 0.00084016082109883428, 0.001886340556666255, 0.0016581045929342508, 0.0030188027303665876, 0.0019870437681674957, 0.00082050036871805787, 0.0019202849362045527, 0.0013593051116913557, 0.0011727532837539911, 0.0023073868360370398, 0.00205089314840734, 0.0019699637778103352, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -1896, -288, -12933, 10538, 7720, -2374, 9399, 1932, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 8.9710876636672765e-05, 0.00013728690100833774, 8.473644993500784e-05, 0.00011567253386601806, 0.00014760394697077572, 7.0699330535717309e-05, 0.00012918152788188308, 0.00014590403588954359, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 13,45,31,35,-5,-30,44,48,0,27,-9,-5,41,-36,46,-15,-58,-28,-127,-7,49,-40,13,41,9,-5,49,-5,-5,-55,5,29,-44,48,45,7,53,74,-58,-51,3,16,-95,-40,33,18,-19,-56, 
  /* [1][0][][] */ -16,-39,0,72,-19,-6,-8,-9,17,3,-17,-51,-6,-1,19,10,47,26,50,-36,1,30,28,-48,-4,-10,-32,-31,-38,12,-7,-8,-34,-25,-99,75,22,12,-127,-15,26,-17,70,29,99,-26,-33,49, 
  /* [2][0][][] */ -6,-2,31,-29,-33,-17,-4,117,-48,86,-39,-7,127,-13,41,-22,-57,-70,0,33,-11,-19,21,-2,12,51,5,40,20,8,72,33,-63,-18,25,58,3,69,60,-119,43,38,-48,-36,16,37,-12,-13, 
  /* [3][0][][] */ 24,-11,-127,-23,8,-8,61,-39,-32,-16,-7,17,-42,-62,41,13,11,47,14,29,-64,14,-68,-8,-36,-70,27,3,-74,-65,-65,25,82,39,-45,20,-64,7,23,-23,35,-60,-29,12,60,-45,37,-20, 
  /* [4][0][][] */ 3,51,-4,-12,30,-7,-80,-115,-33,17,-19,71,1,-24,3,63,45,53,-87,8,23,8,-29,-8,36,-3,3,0,-25,13,2,-37,20,-22,-127,31,-29,-3,45,44,-30,-38,81,50,11,-49,22,17, 
  /* [5][0][][] */ -57,-26,96,11,84,26,53,-5,-127,4,-103,-13,-92,-89,52,81,-16,32,17,3,50,21,22,10,-17,0,8,-18,-42,-7,-23,-27,-24,42,74,27,-10,67,-24,0,45,-43,-53,54,-13,18,40,26, 
  /* [6][0][][] */ 82,66,-16,25,26,-30,-105,-71,0,-1,-3,71,-23,-31,-1,38,-41,37,19,-2,127,-16,64,111,5,-56,15,-26,-56,-18,-32,-64,45,-32,19,-12,-6,28,-44,38,-57,-49,-64,-38,-26,-53,49,-3, 
  /* [7][0][][] */ 5,52,35,-81,58,-50,-41,-13,13,7,35,27,-36,5,37,-5,-16,27,-21,51,-47,-5,-14,53,3,-31,6,37,-9,31,-35,-15,41,-7,-34,-37,-60,10,127,-5,10,-35,-21,-7,38,1,65,5, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0038127121515572071, 0.0058346930891275406, 0.0036012991331517696, 0.004916082601994276, 0.0062731676734983921, 0.0030047213658690453, 0.0054902145639061928, 0.006200921256095171, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1226, -2384, 2853, -615, -195, -10, 3216, 11791, -5057, 13147, 8756, -2160, 5245, -1737, 5266, -605, 1014, -1385, 1635, -2270, -3391, -2355, -16744, -3211, 4319, 818, 2582, 2298, 8264, 7829, 7771, -2297, -7610, -224, -2265, -5034, 5015, 7809, -2526, 11417, 1212, -796, -4374, -2104, -7507, 11743, 115, 7468, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 6.4985935750883073e-05, 0.00034111712011508644, 0.00019061588682234287, 0.00023388362023979425, 0.00017953915812540799, 0.00049097015289589763, 0.00024867392494343221, 0.00055605318630114198, 0.00028154024039395154, 0.0001102387104765512, 0.00016775207768660039, 0.00015789511962793767, 0.000173854612512514, 0.00029124590218998492, 0.00018088554497808218, 0.0002313887671334669, 0.00055901322048157454, 0.00025785309844650328, 9.2912043328396976e-05, 0.0002228965749964118, 0.00013435697474051267, 0.000206121796509251, 9.173410217044875e-05, 0.00029357051244005561, 0.00012621715723071247, 0.00035419280175119638, 8.6730331531725824e-05, 0.00023495691129937768, 0.0001862931385403499, 0.00012380871339701116, 0.00016109728312585503, 0.00019051953859161586, 0.0001872769498731941, 0.00036015571095049381, 0.00038815548759885132, 0.00014366622781381011, 0.00011773011647164822, 9.0778790763579309e-05, 0.00034121665521524847, 0.00014757637109141797, 0.00023815820168238133, 0.00017850380390882492, 0.00017806590767577291, 0.00021958923025522381, 0.00026269364752806723, 0.00010554900654824451, 0.00014989769260864705, 0.00011504706344567239, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 97,77,45,33,-13,-72,35,28,-54,-18,-17,49,55,13,-3,21,49,-39,98,50,67,-20,16,13,-6,-75,53,2,-31,-74,36,47,26,-92,3,26,-38,39,-12,-127,-7,-101,-48,-8,10,-127,61,-127, 127,14,64,-95,54,58,40,-43,-99,-99,20,127,11,-49,-127,15,-10,120,61,40,44,85,107,33,127,-60,-27,-127,-124,-55,-127,127,29,-78,-81,127,27,-95,-87,-106,13,127,-67,29,-45,-86,76,16, 83,8,21,-79,-21,-57,36,21,-42,-6,-5,32,34,30,47,13,-51,8,64,44,-29,-32,-66,-6,-15,-74,-70,-43,-34,-81,-4,15,50,-51,29,36,-75,-56,1,-82,2,-28,117,-17,3,-111,22,-50, 
  /* [0][1][][] */ 102,-4,22,62,51,77,-2,-127,85,-127,-100,-91,8,46,-57,127,-127,101,68,61,-2,98,79,-40,-9,122,84,17,31,-47,-95,39,62,87,-69,47,-77,-2,-6,-75,-17,-60,12,-94,45,-25,48,-31, -1,127,-127,96,127,60,-127,19,95,-26,-13,79,-127,127,-26,-15,42,-127,-127,-6,127,40,127,-124,-88,86,-56,-1,-7,-43,48,-26,127,-10,119,-80,113,-127,127,96,127,71,-103,-4,114,42,-127,-30, 50,-2,8,-127,54,53,9,-84,127,-39,-127,-26,19,39,-52,119,83,-2,15,72,34,-127,41,127,-70,127,-71,-24,42,-23,-54,39,-14,70,127,55,-75,-20,-58,-24,-21,-32,127,127,127,-30,70,-15, 
  /* [0][2][][] */ 33,42,28,50,3,-1,28,27,5,-31,-2,-23,39,-62,47,-54,-11,22,83,-61,113,-17,20,-61,-80,-68,127,77,-2,-87,-57,64,23,37,-9,-3,-67,28,0,-12,-18,-77,19,-16,8,4,35,-67, 45,10,9,10,-17,-127,-8,-71,-13,-47,14,-31,-7,-56,-11,19,2,-37,25,127,107,65,82,29,39,-53,-76,44,-127,-48,-63,23,7,127,-55,0,-101,-123,22,-20,-91,84,-4,4,-39,-82,85,-45, 21,8,26,-60,13,-3,37,38,-7,-1,9,-6,41,-53,59,-17,-7,-31,55,-127,16,-64,-59,68,-58,-71,-126,23,-5,-127,15,31,28,-31,-4,44,-127,-69,-29,-22,-22,-11,-3,10,-7,31,-30,-57, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0029287247452884912, 0.015373143367469311, 0.0085904961451888084, 0.01054044533520937, 0.0080913007259368896, 0.022126577794551849, 0.011207000352442265, 0.02505967766046524, 0.012688188813626766, 0.0049681337550282478, 0.0075600915588438511, 0.0071158674545586109, 0.0078351153060793877, 0.013125594705343246, 0.0081519782543182373, 0.010428009554743767, 0.025193078443408012, 0.011620678938925266, 0.0041872719302773476, 0.010045291855931282, 0.0060550728812813759, 0.0092893019318580627, 0.0041341856122016907, 0.013230358250439167, 0.0056882351636886597, 0.015962425619363785, 0.0039086802862584591, 0.010588815435767174, 0.0083956830203533173, 0.0055796937085688114, 0.0072601796127855778, 0.0085861543193459511, 0.0084400204941630363, 0.016231156885623932, 0.017493024468421936, 0.0064746136777102947, 0.0053057493641972542, 0.0040911324322223663, 0.015377629548311234, 0.0066508320160210133, 0.010733088478446007, 0.0080446405336260796, 0.0080249058082699776, 0.0098962392657995224, 0.011838829144835472, 0.0047567826695740223, 0.0067554470151662827, 0.0051848320290446281, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -1234, -1860, 2428, -670, -2688, 2406, 1970, 20032, 2618, 2270, 6115, 2378, 1445, 9220, 4913, -1921, 14662, 1612, 629, -2658, -169, -528, 1714, 8441, 647, 7182, 2458, -231, 6656, 252, 1622, -1296, -1626, -2596, -6774, 1560, 2514, 1955, 1926, 2741, 2001, 802, 3915, 2519, 12897, 4156, -1543, 801, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.0002344003296457231, 0.00026631751097738743, 0.00026224617613479495, 0.00017410828149877489, 0.00019413385598454624, 0.0001149389281636104, 0.00027975122793577611, 6.2660234107170254e-05, 0.00012412820069584996, 0.00024176762963179499, 0.00013089344429317862, 0.00015787046868354082, 0.00025822455063462257, 9.4466988230124116e-05, 0.00015178510511759669, 0.00021024122543167323, 6.9458663347177207e-05, 0.00014436869241762906, 0.00031664257403463125, 0.00022409000666812062, 0.00014135123637970537, 0.00031356586259789765, 0.00020268006483092904, 0.000110063367174007, 0.00024229436530731618, 9.4675517175346613e-05, 0.00025652835029177368, 0.0002706178929656744, 7.8802542702760547e-05, 0.0004141027748119086, 0.00015382379933726043, 0.00028733990620821714, 0.00027889577904716134, 0.00012727841385640204, 8.6116815509740263e-05, 0.00027610620600171387, 0.00018102710600942373, 0.00018966285279020667, 0.0002302332577528432, 0.00017764090443961322, 0.00030900535057298839, 0.0002672881237231195, 0.00016896687156986445, 0.00020542617130558938, 7.1598129579797387e-05, 0.00016838105511851609, 0.00012513725960161537, 0.00028605980332940817, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -16,-47,-44,99,11,-71,-84,-127, 
  /* [1][0][][] */ 127,-28,40,-28,23,-77,-4,27, 
  /* [2][0][][] */ -5,47,8,-127,17,93,-53,62, 
  /* [3][0][][] */ -24,127,-50,-88,-98,1,30,-89, 
  /* [4][0][][] */ 3,-63,-99,-35,26,-87,-75,-127, 
  /* [5][0][][] */ -37,-86,86,53,11,127,35,-118, 
  /* [6][0][][] */ 0,6,-42,35,7,11,-127,-39, 
  /* [7][0][][] */ 23,-18,6,27,-41,59,127,69, 
  /* [8][0][][] */ -9,44,-87,-16,-35,-127,-59,67, 
  /* [9][0][][] */ 61,5,-47,-18,6,127,-46,104, 
  /* [10][0][][] */ -19,55,86,124,88,127,-13,-59, 
  /* [11][0][][] */ -18,-55,1,36,-127,72,-11,-29, 
  /* [12][0][][] */ -21,35,78,-54,59,-92,-127,-66, 
  /* [13][0][][] */ 48,32,-92,-127,-12,-64,-73,119, 
  /* [14][0][][] */ -35,-127,3,-70,6,-69,19,-112, 
  /* [15][0][][] */ 8,62,70,91,84,127,-10,-28, 
  /* [16][0][][] */ 44,19,-31,-127,62,102,-76,80, 
  /* [17][0][][] */ -94,91,-127,29,37,111,-78,44, 
  /* [18][0][][] */ -127,56,24,-17,-94,17,-26,3, 
  /* [19][0][][] */ 127,4,-39,-33,81,-72,74,-90, 
  /* [20][0][][] */ 127,-65,39,-33,-53,32,83,8, 
  /* [21][0][][] */ 16,-29,-39,45,-2,21,127,38, 
  /* [22][0][][] */ 90,37,-127,-90,22,112,68,112, 
  /* [23][0][][] */ -30,43,-50,-86,36,6,-127,5, 
  /* [24][0][][] */ 127,-65,-93,-25,93,-60,20,14, 
  /* [25][0][][] */ -34,-83,76,-42,69,127,-25,-102, 
  /* [26][0][][] */ 24,-60,40,38,127,-67,-50,-66, 
  /* [27][0][][] */ -22,-127,67,83,16,-4,-39,101, 
  /* [28][0][][] */ -16,50,-108,-46,109,-96,-26,127, 
  /* [29][0][][] */ -80,29,127,-95,14,-36,31,27, 
  /* [30][0][][] */ 114,-85,97,-29,-64,-127,69,-32, 
  /* [31][0][][] */ 21,29,48,-7,-34,-11,-127,12, 
  /* [32][0][][] */ 19,-16,23,127,-28,-88,-44,-88, 
  /* [33][0][][] */ 102,-83,-52,101,-127,89,-46,-38, 
  /* [34][0][][] */ 19,-79,11,-58,-121,127,29,-37, 
  /* [35][0][][] */ 24,127,87,18,15,22,-62,1, 
  /* [36][0][][] */ 24,108,-80,-127,-94,11,82,-84, 
  /* [37][0][][] */ 41,-6,42,15,42,127,59,21, 
  /* [38][0][][] */ -67,-88,94,53,20,-8,-58,127, 
  /* [39][0][][] */ 8,32,127,-51,-30,37,-31,25, 
  /* [40][0][][] */ 13,-1,23,-1,0,-25,127,3, 
  /* [41][0][][] */ -17,-7,-66,-127,-78,-87,-69,29, 
  /* [42][0][][] */ 36,-11,58,-36,-127,-62,-45,34, 
  /* [43][0][][] */ 83,-19,42,35,-82,-127,114,19, 
  /* [44][0][][] */ -74,-127,-15,-72,0,15,-5,-119, 
  /* [45][0][][] */ 20,105,73,64,46,127,-56,34, 
  /* [46][0][][] */ -117,-7,-6,74,111,56,-99,127, 
  /* [47][0][][] */ 14,75,-46,-42,-5,-42,27,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0032526548020541668, 0.0036955536343157291, 0.0036390575114637613, 0.0024160125758498907, 0.002693897346034646, 0.0015949493972584605, 0.0038819664623588324, 0.00086950435070320964, 0.0017224643379449844, 0.0033548872452229261, 0.001816342119127512, 0.0021906886249780655, 0.0035832517314702272, 0.0013108706334605813, 0.0021062451414763927, 0.0029174112714827061, 0.00096384278731420636, 0.0020033314358443022, 0.0043938891030848026, 0.0031095836311578751, 0.0019614596385508776, 0.0043511949479579926, 0.0028124887030571699, 0.0015272937016561627, 0.0033621964976191521, 0.0013137642526999116, 0.0035597141832113266, 0.0037552276626229286, 0.0010935030877590179, 0.0057462947443127632, 0.0021345349960029125, 0.0039872704073786736, 0.0038700958248227835, 0.0017661782912909985, 0.0011949995532631874, 0.0038313861005008221, 0.0025120216887444258, 0.0026318554300814867, 0.0031948306132107973, 0.0024650329723954201, 0.0042879111133515835, 0.0037090221885591745, 0.002344667911529541, 0.0028505951631814241, 0.00099353108089417219, 0.0023365388624370098, 0.0017364664236083627, 0.0039695072919130325, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 15546, 4358, 14737, -5130, -15436, 8126, 3917, 13651, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 7.5762560300063342e-05, 9.9726130429189652e-05, 7.6616328442469239e-05, 7.4700670666061342e-05, 0.0001033850567182526, 0.00011193792306585237, 6.6355176386423409e-05, 8.593168604420498e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-14,-13,-10,-23,-83,-34,-12,58,-39,-53,-26,-21,78,-53,5,14,-8,6,16,30,-30,5,10,36,4,4,30,9,58,-42,-85,17,-60,10,-24,33,-37,-7,31,-61,-23,-25,-42,-80,-83,6,-23, 
  /* [1][0][][] */ -74,0,92,-55,64,38,51,26,-20,15,-1,102,21,-37,-127,-59,-106,-82,40,-22,7,97,-47,6,22,-109,36,97,41,-26,30,50,47,37,5,35,-72,-22,20,12,4,-33,-97,19,-15,-47,-95,34, 
  /* [2][0][][] */ 87,36,-29,-66,-51,-7,-47,-88,31,28,-78,-51,-10,59,-53,44,-3,71,3,11,59,46,-2,-1,-127,23,26,-52,-1,30,36,-86,12,-40,17,16,-47,-52,15,33,-113,-106,-30,-51,-46,-94,31,1, 
  /* [3][0][][] */ 13,-2,19,24,-103,-26,-10,47,-33,-58,-7,73,16,-16,-75,-42,-25,29,2,-59,-40,127,15,-57,22,46,48,-47,20,14,9,23,31,20,10,-7,47,52,24,-2,38,-20,21,-49,-17,6,21,34, 
  /* [4][0][][] */ -47,21,-120,16,-8,96,23,41,-16,127,41,67,26,-81,-26,29,-24,4,-6,38,-18,43,-74,26,10,-11,51,-18,44,-66,121,97,54,52,12,-47,-89,22,2,-24,46,20,38,37,51,38,28,73, 
  /* [5][0][][] */ -24,4,38,-6,61,-64,-33,-28,-29,-65,8,-27,42,4,-17,-2,22,-5,6,32,13,64,20,19,19,-4,-35,-11,-35,0,-127,-9,-41,-7,28,-21,-7,-27,1,-15,-16,-3,-30,-10,33,37,-2,46, 
  /* [6][0][][] */ 8,57,-4,73,-16,40,-59,54,-82,-34,52,20,45,15,38,18,1,-45,-44,39,-1,67,32,-37,-87,-8,-41,23,-96,-10,-92,4,5,-34,-43,-56,127,-4,-54,-56,51,33,42,-53,-78,-18,-55,-41, 
  /* [7][0][][] */ -46,18,-78,29,-17,-1,-5,-2,-51,-45,32,71,40,10,-70,-72,-61,84,-1,-4,41,13,34,-32,-36,94,-50,-108,-46,-12,-108,-10,-16,-29,-53,0,-32,-38,-47,-20,-25,40,54,-16,-53,-53,127,-51, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0032199088018387556, 0.0042383605614304543, 0.0032561938278377056, 0.0031747783068567514, 0.0043938648886978626, 0.0047573614865541458, 0.0028200950473546982, 0.0036520964931696653, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 5933, 5241, 10342, 8790, 36578, -2191, -1354, -224, -1282, -10423, -2434, -1712, 12830, 6811, 4312, -437, 7104, 5016, 672, -3229, 3676, -2215, 7770, -1173, 4001, 8850, -82, 213, -168, 1729, 8901, 3770, 1107, -1487, 1338, -739, 7377, 5524, -1315, -152, 5746, -6342, 4418, 921, -552, 1848, 4907, -2201, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00027411215705797076, 0.0001636668894207105, 8.2285558164585382e-05, 0.00015918898861855268, 5.6240362027892843e-05, 0.00042055270751006901, 0.00024950093938969076, 0.00027813442284241319, 0.00037424956099130213, 0.00026863854145631194, 0.00013923236110713333, 0.00034076615702360868, 8.4507926658261567e-05, 0.00016300241986755282, 0.00041129509918391705, 0.0001189781614812091, 0.00014089973410591483, 0.00018003713921643794, 0.00047003637882880867, 0.00027430508635006845, 0.00015498297580052167, 0.00017728697275742888, 0.00012057968706358224, 0.00016330310609191656, 0.0001853275898611173, 0.00018880529387388378, 0.00040181863005273044, 0.00024770945310592651, 0.0003408649645280093, 0.0002963649167213589, 0.00017971025954466313, 0.00032618871773593128, 0.00026744883507490158, 0.00091133743990212679, 0.00013443830539472401, 0.0001826767111197114, 0.00025139827630482614, 0.00016320872236974537, 0.00017705294885672629, 0.00031122472137212753, 0.00018470326904207468, 0.00018199754413217306, 0.00026144730509258807, 0.0004656407400034368, 0.0003393559018149972, 0.00041289758519269526, 0.00026587766478769481, 0.00023247656645253301, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -102,-17,44,-12,-127,16,-108,2,-5,127,56,19,-47,76,10,37,40,27,17,-23,-110,-21,16,59,-28,11,-7,-66,25,-121,83,39,-9,27,43,-35,17,-127,-19,127,-64,39,-11,-7,-13,6,10,-16, 14,-127,-14,23,-74,25,-109,-3,30,32,127,70,-74,-78,-97,-56,-11,-44,104,63,15,67,-62,26,-80,-6,0,-127,9,-75,-28,-127,-13,17,-48,-127,-22,-2,20,90,127,-15,-13,127,8,-127,10,-29, -127,12,53,1,-101,21,-67,-1,-3,89,-6,-6,-70,76,28,61,-37,-1,10,-39,-86,-32,61,25,14,-10,7,-47,-39,-127,47,-11,3,12,-52,-31,16,-101,23,95,-59,29,-9,4,8,11,14,43, 
  /* [0][1][][] */ 56,-34,24,-2,-93,7,66,-15,-55,60,29,38,-59,-36,-81,124,-46,8,46,127,9,44,-127,-9,-33,-108,-18,-68,127,20,37,118,-127,0,101,7,-5,35,-103,-114,52,-22,12,11,-127,42,6,-50, 114,-44,-127,-127,50,127,0,127,-127,-87,-29,127,-63,-127,-127,-124,-27,-127,-78,62,127,127,-89,99,-127,71,-125,93,-57,-60,-127,-101,7,127,-127,115,-127,-66,127,-45,-54,127,-127,-76,102,77,-127,-67, 50,-10,96,-1,-60,-30,11,-25,-32,13,9,-20,-31,-75,-60,127,-127,-42,24,125,-18,50,-5,-127,27,-81,127,-6,-54,110,-49,94,108,-42,-56,23,-10,-14,1,-53,29,-24,-8,-10,1,31,-12,127, 
  /* [0][2][][] */ -109,-25,34,-25,-51,13,78,2,89,43,67,17,-52,79,39,-10,67,52,5,-19,-57,-27,34,37,-21,-8,-3,5,7,34,78,-5,-4,14,74,19,20,-49,-38,3,-37,18,4,-16,-10,-10,-11,0, -70,-103,58,-56,-76,-14,127,1,90,34,90,-33,127,-109,-69,-23,-58,40,-127,20,-69,14,-122,-6,23,-127,-1,24,2,59,12,-88,-9,-39,-22,35,-12,56,53,-56,1,20,26,-48,27,-29,-1,10, -74,1,43,-4,-89,31,48,-2,48,14,16,26,-115,52,45,2,-52,53,-1,-12,-37,-27,109,-61,-2,-17,11,26,-17,35,26,-47,-10,25,-29,18,19,-57,5,-34,-31,39,19,-4,-6,6,8,0, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.011649766936898232, 0.006955842487514019, 0.0034971362911164761, 0.0067655318416655064, 0.0023902154061943293, 0.017873490229249001, 0.010603789240121841, 0.011820713058114052, 0.015905605629086494, 0.011417138390243053, 0.0059173754416406155, 0.014482561498880386, 0.0035915868356823921, 0.0069276029244065285, 0.017480041831731796, 0.0050565716810524464, 0.0059882383793592453, 0.0076515781693160534, 0.019976545125246048, 0.011657965369522572, 0.0065867765806615353, 0.0075346962548792362, 0.005124636460095644, 0.0069403816014528275, 0.007876422256231308, 0.0080242250114679337, 0.017077291384339333, 0.010527651757001877, 0.014486760832369328, 0.012595509178936481, 0.0076376860961318016, 0.013863019645214081, 0.01136657502502203, 0.038731839507818222, 0.0057136276736855507, 0.0077637601643800735, 0.010684426873922348, 0.0069363703951239586, 0.0075247501954436302, 0.013227050192654133, 0.007849888876080513, 0.007734895683825016, 0.01111150998622179, 0.019789731130003929, 0.014422625303268433, 0.017548147588968277, 0.011299800127744675, 0.0098802540451288223, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 10170, -345, 1639, 1218, 2709, 794, 6403, -359, 11223, 8514, -780, -254, 1393, 1133, 183, 2480, 2736, 2730, -1755, -1216, 2471, 2157, 2450, 16, 3462, 2366, 5074, -580, 5010, -354, 6011, 7788, 4023, 687, 1083, 1625, 2993, 1385, 1345, 1827, -177, 3244, 1729, 4037, 4156, 2388, 163, 1980, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00010019438195740804, 0.00034021143801510334, 0.00027032609796151519, 0.0002677393495105207, 0.00027189633692614734, 0.00017132499488070607, 9.686009434517473e-05, 0.00030957005219534039, 8.554333180654794e-05, 8.911446639103815e-05, 0.00017829566786531359, 0.00018396656378172338, 0.00035868870327249169, 0.00026998069370165467, 0.00011916457879124209, 0.00026248284848406911, 0.00019189373415429145, 0.00025777416885830462, 0.0002277037565363571, 0.00011561640712898225, 0.00028150208527222276, 0.00014993966033216566, 0.00026296669966541231, 0.0004731938533950597, 0.00018636997265275568, 0.00029982699197717011, 0.00018125606584362686, 0.00045375214540399611, 0.00018427912436891347, 0.00015021157742012292, 0.00013008553651161492, 8.4634157246910036e-05, 0.00022059436014387757, 0.00013076791947241873, 0.00030768485157750547, 0.00039834604831412435, 0.00021056894911453128, 0.00028374759131111205, 0.00036611553514376283, 0.00012808883911930025, 0.00034598589991219342, 0.000212946513784118, 0.00041827349923551083, 0.00017352848954033107, 0.00021839105465915054, 0.0001241058052983135, 0.00027473762747831643, 0.00032374696456827223, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 62,-82,37,5,52,-127,1,-77, 
  /* [1][0][][] */ -48,-52,-72,66,-127,56,-27,19, 
  /* [2][0][][] */ 70,-59,62,-26,127,-19,-9,74, 
  /* [3][0][][] */ -14,127,-10,111,6,8,-54,-49, 
  /* [4][0][][] */ -36,127,75,-40,38,14,-71,14, 
  /* [5][0][][] */ -84,23,-3,16,127,-29,88,-12, 
  /* [6][0][][] */ 107,-71,117,16,24,127,84,-20, 
  /* [7][0][][] */ -32,-46,58,55,76,15,-53,127, 
  /* [8][0][][] */ 20,-28,-41,-94,-15,127,-67,23, 
  /* [9][0][][] */ -127,24,-93,1,108,-38,-56,14, 
  /* [10][0][][] */ -15,-94,56,25,-24,-90,-127,-95, 
  /* [11][0][][] */ 43,84,-17,-5,-22,-75,28,127, 
  /* [12][0][][] */ 39,-43,-85,50,-92,127,41,75, 
  /* [13][0][][] */ -40,-36,-127,24,-88,88,14,47, 
  /* [14][0][][] */ -62,127,-76,81,84,41,-18,75, 
  /* [15][0][][] */ -88,-10,-13,-2,81,70,-64,-127, 
  /* [16][0][][] */ 90,-127,-110,-29,-48,89,-46,-5, 
  /* [17][0][][] */ 24,127,-116,-56,-77,41,69,-125, 
  /* [18][0][][] */ -79,-117,44,26,127,-66,-39,77, 
  /* [19][0][][] */ -63,105,-39,54,17,-122,-127,64, 
  /* [20][0][][] */ 75,-11,31,-57,3,-56,26,127, 
  /* [21][0][][] */ 65,-46,127,102,-41,109,85,-23, 
  /* [22][0][][] */ -21,93,15,5,127,-55,-114,-59, 
  /* [23][0][][] */ 31,-41,27,127,1,-56,62,-35, 
  /* [24][0][][] */ -27,53,127,-72,-23,-21,10,-25, 
  /* [25][0][][] */ -49,-127,101,66,33,1,-30,127, 
  /* [26][0][][] */ 55,-26,-127,-92,-93,56,25,107, 
  /* [27][0][][] */ 40,127,-104,-54,-44,19,33,-123, 
  /* [28][0][][] */ -26,52,-54,-92,-13,-47,-127,-40, 
  /* [29][0][][] */ -103,56,-127,-52,117,46,-40,-10, 
  /* [30][0][][] */ 91,-56,20,-30,-121,121,127,63, 
  /* [31][0][][] */ -73,96,-46,89,127,-94,-19,4, 
  /* [32][0][][] */ 5,88,51,-59,127,-46,-14,-81, 
  /* [33][0][][] */ -127,51,-121,12,47,25,-31,2, 
  /* [34][0][][] */ 54,-10,65,-86,-41,-127,59,99, 
  /* [35][0][][] */ -127,31,47,-24,-77,9,4,3, 
  /* [36][0][][] */ -2,-49,-46,43,-15,10,127,38, 
  /* [37][0][][] */ -24,-27,-76,-43,-24,-127,-66,-8, 
  /* [38][0][][] */ -101,27,25,19,-127,17,31,9, 
  /* [39][0][][] */ -31,-57,30,-25,-30,97,-127,-109, 
  /* [40][0][][] */ 75,-127,26,63,-60,-51,110,55, 
  /* [41][0][][] */ 25,127,88,42,37,36,-94,-33, 
  /* [42][0][][] */ 35,127,-35,-13,-28,21,-15,-48, 
  /* [43][0][][] */ -73,61,-81,-127,20,22,-59,66, 
  /* [44][0][][] */ -47,22,-24,15,36,127,-6,-8, 
  /* [45][0][][] */ -9,91,-104,-34,-80,-102,-17,127, 
  /* [46][0][][] */ 31,107,-98,-33,-65,30,6,-127, 
  /* [47][0][][] */ 21,12,-3,-57,-69,-127,-31,39, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0013177066575735807, 0.0044742915779352188, 0.0035551944747567177, 0.0035211746580898762, 0.0035758453886955976, 0.0022531810682266951, 0.0012738557998090982, 0.0040713115595281124, 0.0011250233510509133, 0.0011719891335815191, 0.0023448560386896133, 0.0024194368161261082, 0.0047172955237329006, 0.003550651716068387, 0.0015671933069825172, 0.0034520439803600311, 0.0025236909277737141, 0.0033901177812367678, 0.0029946465510874987, 0.0015205295057967305, 0.0037021753378212452, 0.0019719318952411413, 0.0034584072418510914, 0.0062232101336121559, 0.0024510452058166265, 0.0039431755430996418, 0.0023837897460907698, 0.0059675225056707859, 0.0024235474411398172, 0.0019755079410970211, 0.0017108203610405326, 0.0011130663333460689, 0.0029011473525315523, 0.0017197945853695273, 0.0040465183556079865, 0.0052388492040336132, 0.0027692981529980898, 0.0037317071110010147, 0.0048149693757295609, 0.0016845607897266746, 0.0045502344146370888, 0.0028005666099488735, 0.0055009252391755581, 0.0022821603342890739, 0.0028721706476062536, 0.001632177853025496, 0.0036132128443568945, 0.0042577590793371201, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5575, -2060, -2164, 3900, 1285, -18002, -2741, -11972, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00019845498900394887, 0.00013150049198884517, 0.00024315176415257156, 0.00014579945127479732, 0.0002379388315603137, 8.4642022557090968e-05, 0.00011924740101676434, 0.00013104351819492877, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -23,19,3,29,-19,11,0,29,-48,-5,-34,-3,-14,14,35,4,-46,-20,29,-18,-26,127,-20,-18,-22,-38,6,31,-33,36,9,-26,-9,19,32,36,20,3,31,-22,4,-33,-17,-11,-18,24,22,13, 
  /* [1][0][][] */ 8,54,5,47,29,36,45,115,-47,-46,77,-29,-41,-33,27,-22,-21,-1,36,4,29,-127,-6,-70,8,16,-17,14,-8,8,-33,-55,-39,4,23,-9,18,64,70,-18,22,19,39,-28,-33,43,7,49, 
  /* [2][0][][] */ -3,25,-1,29,28,17,-31,33,24,11,64,17,5,-14,31,-55,20,27,-7,8,-17,127,6,-14,19,-45,-4,1,-22,32,-22,-60,-15,8,16,-41,28,-13,-41,-26,26,-13,-7,-50,-36,32,11,20, 
  /* [3][0][][] */ -39,47,-8,5,-16,33,60,-2,5,5,5,13,-18,33,41,15,-13,0,9,-2,40,-81,-9,18,-18,1,-127,29,-32,-31,-13,5,-41,-16,10,26,29,-13,-41,-29,3,-14,13,16,17,-12,41,20, 
  /* [4][0][][] */ 21,3,-42,8,16,-6,22,-8,-57,13,1,27,9,-10,-16,19,-30,37,-20,-5,3,-127,-5,-1,35,28,36,-43,43,-6,4,12,-9,53,33,-6,-19,18,-6,8,-14,-66,-87,24,37,38,2,-13, 
  /* [5][0][][] */ -8,49,80,6,-3,28,23,-95,64,-29,-14,0,96,-65,0,22,18,-35,34,4,-24,127,21,10,86,8,84,44,90,60,3,-24,-69,-37,100,41,-47,-44,2,-99,9,-23,58,67,-43,-38,-21,-31, 
  /* [6][0][][] */ 64,-6,-25,17,45,-23,44,-47,45,38,-3,-32,-16,46,23,-77,22,-127,-26,-21,29,-18,-8,25,-43,-34,47,-17,61,-36,124,49,48,46,31,-52,-66,20,63,-34,-31,23,-77,66,35,6,41,-50, 
  /* [7][0][][] */ -14,53,57,59,-4,16,68,107,59,33,6,77,-60,-8,37,-12,96,-13,-37,-12,-1,-127,4,-100,-78,79,60,20,8,33,24,-21,21,-24,21,29,-20,109,-99,-32,7,-8,30,-10,-52,7,45,13, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0084343366324901581, 0.0055887708440423012, 0.010333949699997902, 0.0061964765191078186, 0.01011240016669035, 0.0035972858313471079, 0.0050680143758654594, 0.0055693495087325573, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 24420, 22813, 10671, 19343, 5665, 9780, 19809, 8202, 43482, -1574, -1401, 21231, 15083, -3904, 9603, 811, 1171, 29142, 18876, -88, 4336, -9243, 435, 779, 49508, 34813, 2107, 399, -1343, 13906, -1790, 901, -15493, 18306, 30827, 28115, 23004, 22353, -132, -399, 5546, 36727, -1080, -1205, -239, -2215, 19592, 12223, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.6191922592697665e-05, 7.700343121541664e-05, 0.00010101794032379985, 7.118203939171508e-05, 0.00012302174582146108, 9.5582698122598231e-05, 0.00015075512055773288, 0.00012744717241730541, 4.5205877540865913e-05, 8.6383253801614046e-05, 7.7382544986903667e-05, 5.1421535317786038e-05, 0.00017870926239993423, 5.881988545297645e-05, 9.1902576969005167e-05, 8.2761631347239017e-05, 4.3637817725539207e-05, 7.7731194323860109e-05, 5.5661213991697878e-05, 0.00011641087621683255, 7.265958993230015e-05, 0.00026423446252010763, 0.00017287126684095711, 0.00010479338379809633, 3.416215258766897e-05, 7.44160424801521e-05, 7.4276940722484142e-05, 9.092116670217365e-05, 5.9287485782988369e-05, 0.00010472513531567529, 0.00022544589592143893, 0.00024738779757171869, 6.8992951128166169e-05, 5.7809593272395432e-05, 8.0917867308016866e-05, 0.0001132966426666826, 9.6846801170613617e-05, 0.00014320402988232672, 0.00014367511903401464, 8.4080973465461284e-05, 0.00020355725428089499, 4.3019688746426255e-05, 8.8350519945379347e-05, 5.4322812502505258e-05, 0.00047524870024062693, 0.00012683161185123026, 7.4469557148404419e-05, 8.7622494902461767e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -57,-76,-52,-75,-44,33,-54,-57,-66,56,51,-88,-29,18,-80,60,84,-63,-56,109,40,58,-41,88,-87,-67,55,73,52,-60,89,65,60,-58,-70,-30,-127,-67,112,62,-24,-16,37,91,71,104,-39,-64, -81,-127,-81,-103,-124,27,-80,-98,-59,96,80,-119,-66,62,-127,103,86,-105,-110,-4,84,71,72,106,-85,-90,107,109,98,-93,93,71,78,-85,-103,-58,-108,-80,121,88,-73,-68,55,112,76,115,-84,-102, -37,-44,-28,-55,-84,34,-67,-46,-41,50,54,-54,-31,78,-60,32,42,-45,-31,-54,51,-127,-53,35,-34,-47,40,33,50,-22,68,42,34,-56,-49,-35,-79,-48,19,25,-21,-31,41,58,7,61,-36,-48, 
  /* [0][1][][] */ -72,-92,-79,-94,-81,-5,-75,-77,-96,92,74,-95,-66,44,-108,66,103,-73,-70,127,66,87,-56,98,-127,-84,65,121,74,-88,105,77,74,-95,-96,-64,-105,-78,99,95,-74,-54,71,91,114,127,-65,-90, -127,-124,-127,-127,-127,-125,-127,-127,-127,127,127,-127,-127,127,-93,127,127,-127,-127,-60,127,85,127,127,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-92,-127,127,127,-127,-127,127,127,127,102,-127,-127, -61,-42,-80,-81,-87,-117,-109,-71,-60,74,70,-87,-59,116,-57,39,81,-59,-52,-122,77,-126,-79,56,-46,-78,39,47,68,-55,82,61,64,-91,-67,-78,-61,-81,41,56,-47,-56,74,76,10,27,-44,-52, 
  /* [0][2][][] */ -37,-27,-39,-31,-48,-19,-49,-35,-57,61,29,-25,-21,0,-94,34,35,-27,-22,30,33,33,-14,33,-63,-34,14,46,34,-19,43,29,58,-56,-61,-47,-21,-39,-2,54,-49,-46,42,37,41,22,-37,-35, -69,-15,-75,-54,-85,-127,-69,-54,-61,92,45,-64,-42,56,-81,42,41,-33,-43,-64,62,15,30,25,-69,-65,37,55,58,-59,50,54,79,-86,-91,-81,-25,-47,9,61,-62,-71,71,78,31,0,-71,-53, -30,27,-59,-46,-37,-106,-80,-45,-22,58,28,-57,-13,58,6,10,50,-16,-26,-69,46,-54,-29,24,-7,-45,4,21,35,-44,31,38,31,-68,-68,-61,3,-41,22,38,-61,-38,40,30,48,2,-18,-43, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0019631567411124706, 0.003272645641118288, 0.004293262492865324, 0.003025236539542675, 0.0052284239791333675, 0.0040622646920382977, 0.0064070927910506725, 0.0054165045730769634, 0.0019212497863918543, 0.0036712882574647665, 0.0032887579873204231, 0.002185415243729949, 0.0075951437465846539, 0.0024998451117426157, 0.0039058595430105925, 0.0035173692740499973, 0.0018546072533354163, 0.003303575562313199, 0.0023656014818698168, 0.0049474621191620827, 0.0030880325939506292, 0.011229964904487133, 0.0073470287024974823, 0.0044537186622619629, 0.0014518913812935352, 0.0031626815907657146, 0.0031567700207233429, 0.0038641495630145073, 0.0025197181385010481, 0.004450818058103323, 0.0095814503729343414, 0.010513980872929096, 0.0029322004411369562, 0.0024569076485931873, 0.0034390091896057129, 0.0048151072114706039, 0.0041159889660775661, 0.0060861711390316486, 0.0061061922460794449, 0.0035734411794692278, 0.0086511829867959023, 0.0018283367389813066, 0.0037548970431089401, 0.0023087195586413145, 0.020198069512844086, 0.0053903432562947273, 0.0031649561133235693, 0.0037239559460431337, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 683, 2402, 1655, -194, -699, 213, 6660, 2731, 1430, -2646, 1339, -30, 4837, 60, 860, -1878, -55, 4032, 750, 1177, -779, 22243, 1436, -1145, 962, 3816, 1879, -1288, 148, 155, -2090, -1409, 2871, 704, 5645, 12211, 3446, 5009, -2646, -1476, -646, 1531, 1033, 475, -1753, -1856, 2651, 1010, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00032058547367341816, 0.00027822467382065952, 0.00028832888347096741, 0.00040633877506479621, 0.00031401318847201765, 0.00028903587372042239, 0.00013031158596277237, 0.00021695328177884221, 0.00032512488542124629, 0.00020822124497499317, 0.00030585989588871598, 0.00034512998536229134, 0.00014440141967497766, 0.00054221984464675188, 0.00046432195813395083, 0.00020827192929573357, 0.00057811103761196136, 0.00017009981092996895, 0.00030758901266381145, 0.00028712308267131448, 0.00030328371212817729, 7.1579743234906346e-05, 0.00028771345387212932, 0.00023147140746004879, 0.00029758759774267673, 0.00021380570251494646, 0.00029895559418946505, 0.0003370459598954767, 0.00041037183837033808, 0.00046411858056671917, 0.00022814837575424463, 0.00023976643569767475, 0.00025383409229107201, 0.00044605249422602355, 0.00016246175800915807, 8.3652965258806944e-05, 0.00024690644931979477, 0.00016901406343095005, 0.00022048175742384046, 0.00022513157455250621, 0.00041887574479915202, 0.00033534210524521768, 0.00030155517742969096, 0.0003732888144440949, 0.00025182549143210053, 0.00024973819381557405, 0.00022827148495707661, 0.00021417778043542057, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -23,57,-55,50,29,127,39,31, 
  /* [1][0][][] */ 46,-127,-95,-33,-35,51,58,-37, 
  /* [2][0][][] */ -55,53,-47,-110,-43,-127,-42,-74, 
  /* [3][0][][] */ -14,127,61,28,-1,-84,-25,27, 
  /* [4][0][][] */ -105,44,-127,77,9,-25,-41,-66, 
  /* [5][0][][] */ 81,-93,-127,32,17,-23,74,-46, 
  /* [6][0][][] */ -11,-98,-60,27,-127,-61,-46,80, 
  /* [7][0][][] */ -23,-44,-13,-43,48,0,-30,127, 
  /* [8][0][][] */ 11,29,-95,-91,41,-30,-127,-85, 
  /* [9][0][][] */ -127,61,-9,102,-9,70,92,0, 
  /* [10][0][][] */ -24,-12,88,-127,-31,66,15,33, 
  /* [11][0][][] */ 114,-17,108,40,-40,47,85,127, 
  /* [12][0][][] */ 51,43,36,-44,70,115,89,-127, 
  /* [13][0][][] */ 34,55,-33,58,-11,-127,-38,54, 
  /* [14][0][][] */ 12,-127,-31,-27,6,64,30,-33, 
  /* [15][0][][] */ -109,-12,1,-79,58,127,-80,-25, 
  /* [16][0][][] */ 16,-43,122,13,-27,29,127,81, 
  /* [17][0][][] */ 63,18,57,24,-8,-87,-40,-127, 
  /* [18][0][][] */ -127,16,-80,-14,-16,-119,22,-90, 
  /* [19][0][][] */ 62,15,121,-29,-59,32,95,127, 
  /* [20][0][][] */ 18,127,48,-5,24,43,44,8, 
  /* [21][0][][] */ -33,34,29,-106,-57,127,-8,-13, 
  /* [22][0][][] */ 34,1,87,-11,-55,15,127,90, 
  /* [23][0][][] */ -69,127,58,45,-111,-102,-125,127, 
  /* [24][0][][] */ -16,-9,103,21,-116,127,-7,-90, 
  /* [25][0][][] */ -40,17,75,21,-127,45,-74,20, 
  /* [26][0][][] */ -49,-127,33,-43,17,41,-13,-14, 
  /* [27][0][][] */ -23,61,27,53,-23,127,-25,-10, 
  /* [28][0][][] */ 10,-127,59,18,62,124,33,44, 
  /* [29][0][][] */ 15,127,-26,31,-65,-58,-14,15, 
  /* [30][0][][] */ -51,74,104,89,-127,-61,-46,-110, 
  /* [31][0][][] */ 13,72,26,57,-50,-13,17,-127, 
  /* [32][0][][] */ -23,-34,-59,65,-127,-39,-54,5, 
  /* [33][0][][] */ 82,22,73,53,-25,57,55,127, 
  /* [34][0][][] */ 126,12,-127,-38,-50,-11,77,35, 
  /* [35][0][][] */ 127,104,112,-119,-52,-100,34,104, 
  /* [36][0][][] */ -48,-106,127,34,60,56,6,-37, 
  /* [37][0][][] */ -4,11,-20,-1,-14,-55,-46,127, 
  /* [38][0][][] */ 127,2,47,9,-1,18,-60,32, 
  /* [39][0][][] */ 60,92,-115,-127,-106,85,46,-64, 
  /* [40][0][][] */ -48,127,-35,66,-51,-31,-56,-19, 
  /* [41][0][][] */ -127,38,-27,-51,60,45,0,-60, 
  /* [42][0][][] */ 46,-32,-5,-23,-27,127,15,86, 
  /* [43][0][][] */ -76,44,127,18,77,21,-37,6, 
  /* [44][0][][] */ 9,127,-4,32,-46,-63,-14,-4, 
  /* [45][0][][] */ -78,83,65,-127,-78,14,-66,-56, 
  /* [46][0][][] */ 38,-40,-19,23,29,7,-127,67, 
  /* [47][0][][] */ -99,-127,28,68,53,-87,18,87, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0031504188664257526, 0.0027341358363628387, 0.0028334306553006172, 0.0039931233040988445, 0.0030858325771987438, 0.0028403785545378923, 0.0012805822771042585, 0.0021320171654224396, 0.0031950280535966158, 0.002046206733211875, 0.0030057094991207123, 0.0033916197717189789, 0.0014190442161634564, 0.0053284373134374619, 0.0045629288069903851, 0.0020467047579586506, 0.0056811431422829628, 0.0016715843230485916, 0.0030227014794945717, 0.0028215812053531408, 0.0029803931247442961, 0.00070341979153454304, 0.002827382879331708, 0.0022746878676116467, 0.0029244169127196074, 0.002101085614413023, 0.0029378603212535381, 0.0033121772576123476, 0.0040327566675841808, 0.0045609301887452602, 0.0022420322056859732, 0.0023562037386000156, 0.0024944476317614317, 0.0043833930976688862, 0.0015965246129781008, 0.00082206429215148091, 0.0024263691157102585, 0.0016609146259725094, 0.0021666917018592358, 0.0022123858798295259, 0.0041163251735270023, 0.0032954334747046232, 0.0029634064994752407, 0.0036683387588709593, 0.0024747089482843876, 0.002454197034239769, 0.0022432419937103987, 0.0021047419868409634, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 7214, -12066, -68, 5382, 1668, -5080, 3099, 8121, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00022445459035225213, 0.00016959932690951973, 9.7711803391575813e-05, 0.0001607500744285062, 0.00026195758255198598, 0.0001265160390175879, 0.00019204511772841215, 9.5541952759958804e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -27,-8,-9,-33,-67,-16,-4,-22,63,6,10,-4,10,15,-21,2,-33,12,-17,-14,-4,10,-23,3,20,-9,81,10,-16,-86,-14,10,-2,32,127,-10,-27,-41,25,-38,24,2,-5,-19,-18,-3,-19,-87, 
  /* [1][0][][] */ 16,-33,-13,58,0,-9,20,36,65,75,41,-49,-51,72,5,0,-6,-31,17,-21,-63,42,-46,29,87,12,-29,35,23,2,127,22,-14,-38,-34,-4,-17,9,-24,-14,0,-20,3,26,-3,35,30,20, 
  /* [2][0][][] */ -65,0,-76,119,-69,-66,26,-65,-76,41,57,-102,-24,-7,-47,8,123,31,-72,-44,-69,-26,-44,19,81,-31,123,-8,83,-18,-68,20,0,-25,55,-3,-50,33,-4,-105,59,-68,-55,-127,-17,-66,-68,107, 
  /* [3][0][][] */ 25,-49,13,-41,36,-20,-10,-70,47,-62,2,-27,-83,-75,-20,10,11,-11,40,-39,-10,34,-80,4,72,-35,52,13,7,0,-1,-23,-37,35,23,-28,-52,25,1,-5,127,15,-47,39,-51,51,-9,-52, 
  /* [4][0][][] */ 24,7,16,16,10,32,-12,-8,46,24,6,-45,-2,4,-65,22,-2,19,25,-22,-23,25,6,41,38,6,-28,5,49,-11,-19,28,-6,-2,32,22,-127,2,53,13,14,-7,2,15,-36,52,-29,-95, 
  /* [5][0][][] */ -39,-96,31,114,-30,-5,-52,98,-95,80,51,29,-77,23,65,-40,-13,30,26,0,-4,29,41,49,-50,11,-27,41,-45,-98,39,22,-105,-48,-31,2,127,-1,-22,15,-36,-16,85,98,22,42,45,44, 
  /* [6][0][][] */ 83,-2,-15,-12,81,-24,-26,-61,39,25,32,-28,-8,7,8,3,-2,-1,-9,-25,-33,16,13,25,55,-54,47,-2,-24,104,-19,8,42,27,-127,-16,-89,-34,25,-64,-13,-6,-7,-93,-4,4,-20,-11, 
  /* [7][0][][] */ -37,-79,56,-51,12,127,51,-57,-1,-99,-51,-5,1,-25,-60,-4,15,-58,110,70,45,-38,5,-6,-21,8,107,-2,49,21,13,-5,-34,-32,-53,108,-125,97,-41,-38,-55,52,4,-70,23,-22,72,-34, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.009539320133626461, 0.007207971066236496, 0.0041527515277266502, 0.0068318783305585384, 0.011133196763694286, 0.0053769317455589771, 0.0081619173288345337, 0.0040605328977108002, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 10012, 4352, -1339, 6721, -245, -1740, 5200, -1034, 1522, 4840, -44, -100, -1671, 12501, 4198, -1304, -6459, -405, -2427, -1125, 10167, 415, -16129, -960, -5390, 2581, 342, 482, -1439, -1296, -7241, 179, 15852, -1597, 1614, 1570, -1384, 333, -985, 2155, 16675, -692, 2206, -379, 561, -391, -4090, 7097, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00024718343047425151, 0.00028869198285974562, 0.00017993533401750028, 0.00035357565502636135, 0.00042352045420557261, 0.00045433198101818562, 0.00011976225505350158, 0.00023685155611019582, 7.9453435319010168e-05, 0.00023281386529561132, 0.00031765885069034994, 0.00050392583943903446, 0.00023766636149957776, 0.00014646553609054536, 0.00021539167209994048, 0.00034365669125691056, 6.0275095165707171e-05, 0.0017122712451964617, 0.00038130112807266414, 0.0001693921658443287, 0.00011598417768254876, 0.00050552020547911525, 0.00011537938553374261, 0.00017804974049795419, 0.00028142117662355304, 0.00021637295139953494, 0.00028471765108406544, 0.00022783168242312968, 0.00050892535364255309, 0.000247542979195714, 0.00016482257342431694, 0.00055070524103939533, 6.7127555666957051e-05, 0.00035845389356836677, 0.00020430618315003812, 0.00072792265564203262, 0.00014284221106208861, 0.00018684031965676695, 0.00078106822911649942, 0.00037981744389981031, 5.3935138566885144e-05, 0.00035359096364118159, 0.00016251417400781065, 0.00014721362094860524, 0.00029167893808335066, 0.0002776627370622009, 0.00013060113997198641, 0.00038371025584638119, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -75,44,-41,-52,-7,-13,21,-11,-5,-18,5,44,-5,-97,-99,27,127,1,61,45,-80,-65,97,-105,-7,-52,-7,94,-13,13,42,127,-27,-7,-19,4,-10,-43,-5,18,124,-84,-48,52,76,-100,-36,-6, -10,-127,36,-127,-2,-20,-76,127,63,-75,21,43,16,-127,-107,17,-39,14,-23,-78,-60,0,77,127,13,-15,11,127,22,-6,15,-101,-102,28,-11,-20,127,-125,55,-10,4,-110,-55,33,97,72,31,-36, -25,-5,17,-25,-3,35,15,66,-2,15,0,29,22,36,-82,30,78,13,-25,19,-127,51,72,26,-4,65,3,-51,-23,-1,17,-36,-48,6,-3,4,-29,127,-14,11,86,-55,17,-28,62,40,-49,-13, 
  /* [0][1][][] */ -35,-23,-126,-13,-29,25,5,5,33,-66,-8,-106,-30,-57,-127,127,104,6,127,92,3,127,117,111,5,-62,-38,-3,45,-37,45,-105,4,-23,-59,5,3,-102,47,19,96,127,-21,-10,-68,127,68,-35, -127,46,127,123,127,-117,-127,-9,-23,-127,-127,-127,127,-27,-8,44,16,-127,-93,-127,116,-13,-70,-90,127,-46,127,-65,127,127,-37,74,-127,-127,127,-127,87,-83,-127,-127,28,114,-98,13,-127,-66,127,127, -12,1,6,24,41,127,-16,53,66,11,52,-52,-16,-18,-77,-13,80,49,-4,57,-63,-118,127,-17,9,127,17,-2,37,30,127,26,16,14,57,6,-32,91,50,-10,1,74,127,-10,-50,-53,58,-9, 
  /* [0][2][][] */ -31,2,-58,-8,-4,-14,19,-10,43,21,3,47,-6,-16,74,5,19,1,60,17,-43,-9,68,35,-1,-59,-12,-76,-2,-13,0,-34,-11,58,-11,-5,-61,5,-5,4,34,-13,-39,-62,-19,15,-68,-39, -12,-47,49,-2,-80,-20,-75,-92,127,70,46,54,-11,-54,18,12,83,99,-30,-12,-74,-1,28,-24,5,-58,-67,-89,-18,-34,95,27,-57,53,-72,-18,28,-111,33,39,-127,-10,-116,127,22,0,49,-51, 21,-14,15,-4,-41,27,20,-92,11,-9,-19,24,5,19,103,-120,54,-24,-22,-9,-60,9,28,5,1,25,-28,4,-10,-25,23,13,-18,51,-47,-5,-116,97,-22,23,7,-24,40,54,-17,-17,-78,-23, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.010505295358598232, 0.012269409373402596, 0.0076472512446343899, 0.01502696517854929, 0.017999619245529175, 0.019309109076857567, 0.0050898957997560501, 0.010066190734505653, 0.0033767709974199533, 0.0098945889621973038, 0.013500501401722431, 0.02141684852540493, 0.010100820101797581, 0.006224785465747118, 0.0091541456058621407, 0.014605408534407616, 0.0025616914499551058, 0.072771526873111725, 0.016205297783017159, 0.0071991668082773685, 0.0049293274059891701, 0.021484607830643654, 0.0049036238342523575, 0.0075671137310564518, 0.011960399337112904, 0.0091958502307534218, 0.012100500054657459, 0.0096828462556004524, 0.021629326045513153, 0.010520576499402523, 0.0070049595087766647, 0.02340497262775898, 0.0028529209084808826, 0.015234289690852165, 0.0086830127984285355, 0.030936712399125099, 0.0060707940720021725, 0.0079407133162021637, 0.03319539874792099, 0.016142241656780243, 0.0022922432981431484, 0.015027616173028946, 0.006906852126121521, 0.0062565789557993412, 0.012396354228258133, 0.011800666339695454, 0.0055505484342575073, 0.016307685524225235, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3769, 1067, 3373, 9177, 288, 5128, 1533, 1536, 1929, 4479, 2777, 4765, 2398, 1445, 3004, -35, 223, -2448, 7227, 2323, 1422, 5697, 8063, 410, 2818, 3355, 1689, -22, -1367, 1206, 6105, 2346, 1169, 947, 724, -423, 863, 1795, 20, 1540, 1229, 5128, 1892, 521, 3157, 1117, -98, 9990, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00024899558047764003, 0.00052343623246997595, 0.00022164855909068137, 0.00012254250759724528, 0.0013637413503602147, 0.00014478329103440046, 0.00042191860848106444, 0.00037616223562508821, 0.00028594656032510102, 0.00017057378136087209, 0.00025102862855419517, 0.00012827497266698629, 0.00031290430342778563, 0.00025095889577642083, 0.00018946209456771612, 0.00030606889049522579, 0.00038344901986420155, 0.00031331556965596974, 0.00014037091750651598, 0.00043075016583316028, 0.00050358125008642673, 0.00014521698176395148, 0.00010774269321700558, 0.00036139888106845319, 0.00021268859563861042, 0.00028374118846841156, 0.00039889191975817084, 0.00025793511304073036, 0.00030641432385891676, 0.00076945254113525152, 0.00015700113726779819, 0.00033642281778156757, 0.00052646093536168337, 0.00029814933077432215, 0.00086252047913148999, 0.00028394642868079245, 0.00021458182891365141, 0.00021705808467231691, 0.00024114822736009955, 0.00043479984742589295, 0.00033838872332125902, 0.00016354121908079833, 0.00020878150826320052, 0.00037076830631121993, 0.00018105443450622261, 0.00045032287016510963, 0.00042486583697609603, 0.00010135389311471954, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -127,-17,29,-114,-121,118,2,-62, 
  /* [1][0][][] */ 87,4,23,-26,1,57,-127,41, 
  /* [2][0][][] */ -42,48,-110,86,-58,127,24,51, 
  /* [3][0][][] */ 91,-28,-30,69,4,-67,10,127, 
  /* [4][0][][] */ -81,-4,-4,13,-20,-35,127,4, 
  /* [5][0][][] */ 50,119,28,53,-127,-53,11,-27, 
  /* [6][0][][] */ -4,-62,32,127,14,-95,-17,34, 
  /* [7][0][][] */ 127,-3,97,-5,-78,27,74,118, 
  /* [8][0][][] */ -34,-127,51,48,78,-35,-28,3, 
  /* [9][0][][] */ -85,-105,19,-26,-19,1,-52,127, 
  /* [10][0][][] */ -29,-127,23,114,62,125,10,-25, 
  /* [11][0][][] */ -125,-111,25,-59,55,58,-37,127, 
  /* [12][0][][] */ 72,-18,80,-77,28,-127,74,3, 
  /* [13][0][][] */ 30,19,25,127,-7,14,31,-58, 
  /* [14][0][][] */ -47,-4,42,6,127,-21,-5,120, 
  /* [15][0][][] */ -68,127,49,84,47,109,-36,83, 
  /* [16][0][][] */ -1,-33,-59,-127,-57,58,16,56, 
  /* [17][0][][] */ 18,127,2,60,-28,-48,-6,12, 
  /* [18][0][][] */ 19,36,-9,-127,-44,-87,26,-18, 
  /* [19][0][][] */ 23,-86,-127,-110,-77,123,25,-10, 
  /* [20][0][][] */ 30,6,17,-5,127,23,36,-37, 
  /* [21][0][][] */ -127,-76,-63,-95,48,33,45,-12, 
  /* [22][0][][] */ -68,-44,77,127,49,-46,-54,125, 
  /* [23][0][][] */ 21,34,-33,127,126,23,28,108, 
  /* [24][0][][] */ 127,-2,-112,-21,-4,-19,45,-42, 
  /* [25][0][][] */ 2,-13,-44,-23,74,-27,-127,-56, 
  /* [26][0][][] */ 127,11,109,-36,-89,41,57,115, 
  /* [27][0][][] */ 29,-64,-44,127,32,4,-16,-123, 
  /* [28][0][][] */ -61,127,79,67,61,-22,-27,7, 
  /* [29][0][][] */ -1,0,55,4,-75,3,127,69, 
  /* [30][0][][] */ -54,-76,53,-72,-83,127,67,41, 
  /* [31][0][][] */ 114,19,95,-25,-99,80,84,127, 
  /* [32][0][][] */ -109,-16,-29,35,-22,23,127,21, 
  /* [33][0][][] */ -127,127,57,82,30,21,-88,7, 
  /* [34][0][][] */ 117,6,21,-14,4,50,-127,17, 
  /* [35][0][][] */ 4,-3,21,31,-45,30,12,-127, 
  /* [36][0][][] */ 27,-3,-70,-125,45,-27,33,127, 
  /* [37][0][][] */ 54,-47,-42,-56,-25,38,58,-127, 
  /* [38][0][][] */ 22,127,17,120,-74,-83,-15,-21, 
  /* [39][0][][] */ 109,-5,112,-10,-92,38,127,116, 
  /* [40][0][][] */ -66,-73,127,104,-14,-23,-86,29, 
  /* [41][0][][] */ 34,-13,15,15,23,-72,-18,127, 
  /* [42][0][][] */ 49,-93,-83,-87,-57,75,39,-127, 
  /* [43][0][][] */ 100,-3,124,-30,-88,-20,118,127, 
  /* [44][0][][] */ -113,-96,-77,127,92,-16,-83,34, 
  /* [45][0][][] */ 127,-12,82,-19,-40,33,-10,85, 
  /* [46][0][][] */ 56,-127,-4,93,127,8,68,5, 
  /* [47][0][][] */ 63,127,-15,109,-29,-77,26,-72, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00277347257360816, 0.0058303684927523136, 0.0024688639678061008, 0.0013649570755660534, 0.015190226957201958, 0.0016126892296597362, 0.0046996003948152065, 0.0041899364441633224, 0.0031850563827902079, 0.0018999602179974318, 0.002796117914840579, 0.0014288090169429779, 0.003485328983515501, 0.0027953411918133497, 0.0021103504113852978, 0.0034091917332261801, 0.0042711012065410614, 0.0034899099264293909, 0.0015635413583368063, 0.0047979718074202538, 0.0056092115119099617, 0.0016175198834389448, 0.0012001072755083442, 0.0040254928171634674, 0.0023690620437264442, 0.0031604913529008627, 0.0044431141577661037, 0.0028730467893183231, 0.0034130394924432039, 0.0085706561803817749, 0.0017487794393673539, 0.0037472932599484921, 0.0058640595525503159, 0.0033209787216037512, 0.009607306681573391, 0.0031627777498215437, 0.0023901502136141062, 0.0024177322629839182, 0.0026860637590289116, 0.0048430799506604671, 0.0037691909819841385, 0.0018216271419078112, 0.0023255425039678812, 0.004129855427891016, 0.0020167005714029074, 0.0050159851089119911, 0.0047324285842478275, 0.0011289446847513318, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 4570, 3003, 3149, 10786, 4670, 5346, 2639, -2928, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00013140162627678365, 0.00012103794870199636, 0.00014973919314797968, 0.00014506200386676937, 0.00012950337259098887, 0.00010392600233899429, 9.9652228527702391e-05, 0.0002688449458219111, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -27,36,-31,-1,-45,-26,-78,23,9,20,37,36,35,4,-46,10,-45,43,12,-60,28,41,-127,3,-9,11,-32,44,-7,-9,22,22,16,-23,35,16,1,105,-67,-16,-10,21,-31,27,4,8,18,-3, 
  /* [1][0][][] */ -80,-98,-61,10,88,-25,-127,61,-23,-35,-13,-84,-20,76,5,-14,116,-120,-7,-23,-60,-1,-1,-19,26,-7,-32,-50,24,-19,-114,-27,22,-62,-80,-97,43,14,-95,-6,4,40,15,80,-10,5,0,44, 
  /* [2][0][][] */ 4,-72,11,53,116,14,97,-6,-36,-30,-7,-50,1,-29,18,30,-35,-93,43,-58,5,-67,-62,10,-72,62,71,-100,-37,0,-59,-45,16,1,-70,-51,-3,127,75,-38,-15,9,-27,-73,42,33,48,-25, 
  /* [3][0][][] */ 10,1,24,-15,33,31,24,-92,26,17,-9,8,1,-117,-13,5,-25,6,-20,0,-7,53,-127,7,18,-101,37,30,47,-12,-32,53,-1,12,-6,-35,-104,-47,12,-16,-6,-1,40,7,-16,4,2,-55, 
  /* [4][0][][] */ 31,-56,8,69,48,13,-31,-2,-36,-14,25,-29,72,37,-17,31,-41,-65,62,38,33,-48,127,26,-30,8,-53,-13,-13,15,-78,-39,82,-26,-44,-64,-48,-49,-22,-2,-61,94,-1,-7,58,82,42,21, 
  /* [5][0][][] */ -61,-21,-39,54,-5,9,-3,-54,-61,-34,-8,-20,18,41,-78,13,127,-15,59,-82,30,-97,-11,0,88,-115,-108,-11,55,-50,36,-80,17,-60,-34,27,-79,-18,18,-33,-43,30,98,46,42,23,25,-37, 
  /* [6][0][][] */ -33,6,-35,35,-23,75,-73,9,-21,-1,-127,7,48,37,118,20,20,8,43,-15,39,-17,-49,-16,11,1,-70,16,4,-52,6,-25,34,-45,6,7,-1,-5,-55,-22,-35,45,-24,28,29,29,33,1, 
  /* [7][0][][] */ 32,-4,39,-18,3,6,13,-12,14,5,-9,-3,-10,-7,-3,-14,11,-3,-24,-20,-20,14,127,13,6,-13,-1,8,6,-10,-21,14,0,21,0,-19,-9,14,7,28,4,-3,9,-2,-17,-1,-24,17, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0055845691822469234, 0.0051441127434372902, 0.006363915279507637, 0.0061651351861655712, 0.0055038933642208576, 0.004416855052113533, 0.0042352196760475636, 0.011425909586250782, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 4298, -263, 540, 236, 7727, 4724, -232, 4214, 3958, -767, -629, 1623, 478, -178, -1076, 373, 12124, 801, 457, 35532, -788, 15876, 893, 882, 100, -8438, 8831, -296, 400, -501, 1242, 7964, 425, -742, 1478, 354, 8453, -1877, 2645, 1160, 116, -340, 19566, -7136, 732, -49, 267, 277, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.1134524003136903e-05, 0.00018075369007419795, 0.0011050369357690215, 0.00069753115531057119, 0.00012597345630638301, 0.00014793996524531394, 8.747393439989537e-05, 0.00032063195249065757, 0.00016219195094890893, 0.00039544122410006821, 5.2959356253268197e-05, 0.00078366347588598728, 0.00082473241491243243, 0.00015849909686949104, 0.00012693640019278973, 0.0076416051015257835, 0.00015132396947592497, 0.00019139402138534933, 0.00034087948733940721, 9.7080643172375858e-05, 0.0005216535646468401, 9.4018032541498542e-05, 0.00028321344871073961, 0.00010336657578591257, 0.00014839928189758211, 0.00071601843228563666, 0.00012246129335835576, 0.00032171484781429172, 0.00089382810983806849, 0.00038095127092674375, 0.00013206472794990987, 0.00010359878797316924, 0.00091758527560159564, 0.00043665451812557876, 0.00017558116815052927, 0.00022730568889528513, 0.00014209352957550436, 7.1825925260782242e-05, 9.2814407253172249e-05, 0.00021594620193354785, 0.00038047402631491423, 0.00035423188819549978, 6.2183942645788193e-05, 0.00016111717559397221, 0.00076866406016051769, 0.00051955308299511671, 0.0051810652948915958, 0.00046594455488957465, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 105,-33,-72,-100,25,-103,59,-38,64,30,91,43,-103,54,57,-119,80,-100,-3,-39,-127,-51,35,107,-1,70,-11,66,-127,-20,92,-80,-50,-59,43,77,-127,44,111,77,-40,-127,-74,45,-67,-34,5,-82, 88,-52,76,127,91,28,127,-115,-70,106,60,63,-3,52,62,116,81,-98,-107,-58,96,-105,50,-4,113,127,-39,83,9,64,81,-45,45,113,127,127,-98,40,84,-35,84,27,-49,100,127,114,-5,-11, 18,-26,-3,-44,39,47,21,-76,-13,46,-83,28,88,-11,-59,-3,34,-35,91,-21,39,4,-84,-100,25,10,-10,24,35,89,36,10,-8,-46,28,40,-22,9,20,-67,-52,111,6,79,-57,-76,-2,74, 
  /* [0][1][][] */ 118,73,-127,22,-79,-127,68,-61,91,-68,127,-96,91,90,127,122,-44,112,-9,-87,121,-72,47,127,-11,-5,-32,20,-57,98,69,-127,-127,-68,-23,32,-14,96,127,127,-48,-82,-127,45,-7,-27,-127,-127, 127,127,114,-16,-127,5,121,-127,-127,-127,94,-127,37,127,100,-127,-35,127,127,-127,-68,-127,72,-42,62,9,-127,72,13,127,127,-95,119,127,-33,10,-23,127,108,-50,127,-6,-48,127,-15,127,120,42, 23,49,-3,14,-28,69,25,-72,-3,-97,-80,-73,-127,0,-68,-1,39,32,-107,-58,-51,-10,-127,-113,-37,4,-70,20,41,105,24,7,8,-61,-9,1,0,38,16,-85,-56,95,-10,96,4,-87,3,93, 
  /* [0][2][][] */ 32,-45,-28,-9,47,-26,7,-12,66,25,33,40,6,57,-9,-17,-127,-33,-9,-22,21,-41,9,45,79,-17,-13,-92,25,56,-7,-83,-26,-40,-76,-3,72,23,33,69,-98,-57,-118,25,-2,-7,89,-65, 20,-66,6,-6,43,-1,28,-52,-81,70,6,53,-19,66,-4,10,-95,-23,-17,-56,-27,-70,28,-11,127,-14,-48,-127,21,87,-1,-60,30,82,-63,16,80,48,29,-34,-58,-1,-49,91,-7,-12,-100,58, -3,-25,20,2,13,15,11,-8,-6,55,-31,25,15,-15,-18,-2,27,-6,16,-41,14,-2,-42,-58,-6,-8,-15,-41,17,90,-7,12,-2,-39,-44,-1,63,23,-5,-51,-97,54,-19,53,3,3,2,12, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0025982172228395939, 0.0076820319518446922, 0.046964067965745926, 0.029645072296261787, 0.0053538717329502106, 0.0062874485738575459, 0.0037176422774791718, 0.013626857660710812, 0.0068931574933230877, 0.016806252300739288, 0.0022507726680487394, 0.03330569714307785, 0.035051126033067703, 0.0067362114787101746, 0.0053947968408465385, 0.32476821541786194, 0.0064312685281038284, 0.0081342458724975586, 0.014487377367913723, 0.0041259271092712879, 0.022170275449752808, 0.0039957663975656033, 0.012036571279168129, 0.0043930793181061745, 0.0063069695606827736, 0.030430782586336136, 0.0052046049386262894, 0.013672880828380585, 0.037987694144248962, 0.016190428286790848, 0.0056127505376935005, 0.0044029485434293747, 0.038997374475002289, 0.018557816743850708, 0.0074621993117034435, 0.0096604917198419571, 0.0060389749705791473, 0.0030526018235832453, 0.0039446121081709862, 0.00917771365493536, 0.016170145943760872, 0.015054855495691299, 0.0026428175624459982, 0.0068474798463284969, 0.032668221741914749, 0.022081004455685616, 0.22019526362419128, 0.019802642986178398, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { -1127, -8365, 10427, 3820, 10558, 3332, 3330, 396, -1248, -7500, 764, 4428, 19808, -12116, 20, 10523, -7374, -641, 2111, 8253, 7885, 3178, 1419, 303, 11579, 25312, 10242, -11219, 1932, -1086, -214, -3459, 18837, 8453, 11562, -1514, -10808, 246, -3918, 518, -12557, -9755, -1532, 2497, 7880, -11501, 13152, -1634, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00030742969829589128, 0.00027138006407767534, 8.5250750998966396e-05, 0.00027618600870482624, 0.0002907036105170846, 0.000666246865876019, 0.00088789255823940039, 0.00059047085233032703, 0.00062037567840889096, 0.00037025325582362711, 0.0015131373656913638, 0.00026748410891741514, 7.1873102569952607e-05, 0.00034226587740704417, 0.00061451707733795047, 3.53992436430417e-05, 0.00025423130136914551, 0.00038457530899904668, 0.00037039932794868946, 0.00018861974240280688, 0.00015492695092689246, 0.0012833622749894857, 0.00037638607318513095, 0.000767971680033952, 0.00021897070109844208, 7.9984863987192512e-05, 0.00039774540346115828, 0.00030213705031201243, 0.00091506692115217447, 0.00044129163143225014, 0.00098512449767440557, 0.001270849141292274, 0.00011944820289500058, 0.0002697763848118484, 0.00029210437787696719, 0.00076224911026656628, 0.00043854175601154566, 0.00037784434971399605, 0.00095745164435356855, 0.00032711832318454981, 0.00032121321419253945, 0.00025190907763317227, 0.00033335408079437912, 0.00038983335252851248, 0.00013389476225711405, 0.00026868056738749146, 2.8044094506185502e-05, 0.00059073203010484576, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 15,48,7,-22,96,-24,127,0, 
  /* [1][0][][] */ 127,79,74,8,-10,-38,0,120, 
  /* [2][0][][] */ -62,17,-5,127,13,-22,-31,55, 
  /* [3][0][][] */ 47,-38,-127,-6,-5,-39,21,123, 
  /* [4][0][][] */ -119,81,-127,-16,15,24,-34,-39, 
  /* [5][0][][] */ 127,-17,-5,-47,-3,-32,7,-127, 
  /* [6][0][][] */ 5,-10,-7,-2,-127,-26,56,4, 
  /* [7][0][][] */ -5,-62,-3,0,-25,1,-127,-1, 
  /* [8][0][][] */ -17,22,30,-9,127,19,-62,-20, 
  /* [9][0][][] */ 127,-42,24,-5,0,-29,50,108, 
  /* [10][0][][] */ 127,8,-6,-39,-1,9,-1,-125, 
  /* [11][0][][] */ -51,-2,-3,127,-3,-41,-37,33, 
  /* [12][0][][] */ -127,5,-68,-25,8,102,-62,-121, 
  /* [13][0][][] */ 121,9,127,16,-9,21,23,45, 
  /* [14][0][][] */ -127,-5,14,16,-1,-14,6,126, 
  /* [15][0][][] */ -127,8,5,120,-2,-2,-20,118, 
  /* [16][0][][] */ 59,-71,127,64,-12,-110,32,71, 
  /* [17][0][][] */ 18,-50,-79,127,4,19,-6,115, 
  /* [18][0][][] */ 19,-31,-118,40,-18,-2,31,127, 
  /* [19][0][][] */ 24,17,-13,127,-7,3,-68,-49, 
  /* [20][0][][] */ 19,50,113,-123,7,-65,9,-127, 
  /* [21][0][][] */ 3,-2,-8,1,-127,-12,55,1, 
  /* [22][0][][] */ 1,57,-4,-12,4,127,-12,0, 
  /* [23][0][][] */ 123,23,-7,95,-5,3,-47,-127, 
  /* [24][0][][] */ -127,19,-89,-37,21,-40,-38,-64, 
  /* [25][0][][] */ -46,-8,-66,-46,2,-127,7,-48, 
  /* [26][0][][] */ -105,-26,-127,11,10,4,-19,-35, 
  /* [27][0][][] */ 96,6,127,18,-7,42,19,42, 
  /* [28][0][][] */ 8,-63,-20,41,27,-127,4,15, 
  /* [29][0][][] */ -4,-9,25,-127,-13,-4,21,-1, 
  /* [30][0][][] */ -40,5,127,-5,3,5,-4,-116, 
  /* [31][0][][] */ -1,12,4,2,127,25,-51,-2, 
  /* [32][0][][] */ -127,-22,-105,-13,-4,-30,-28,-61, 
  /* [33][0][][] */ 8,-51,2,-30,38,-127,15,-22, 
  /* [34][0][][] */ -58,-116,-127,62,7,-56,-10,-27, 
  /* [35][0][][] */ 54,6,-112,-3,-2,-2,8,127, 
  /* [36][0][][] */ 68,38,80,33,3,127,9,29, 
  /* [37][0][][] */ -9,15,-3,127,9,-20,-13,10, 
  /* [38][0][][] */ 2,24,9,-2,127,24,-36,1, 
  /* [39][0][][] */ -8,9,-13,24,-33,127,-108,-10, 
  /* [40][0][][] */ 127,-17,114,17,-23,30,18,64, 
  /* [41][0][][] */ 113,-3,127,20,-13,10,37,50, 
  /* [42][0][][] */ 59,-60,-14,-39,20,127,13,-28, 
  /* [43][0][][] */ -8,-63,-6,3,-44,-18,-127,2, 
  /* [44][0][][] */ -27,-127,36,91,11,43,10,-118, 
  /* [45][0][][] */ 117,14,127,0,-6,29,28,42, 
  /* [46][0][][] */ -82,16,7,127,3,4,-39,75, 
  /* [47][0][][] */ -4,49,-9,-3,-2,127,-18,3, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0032927072606980801, 0.0029065997805446386, 0.00091307307593524456, 0.0029580737464129925, 0.0031135634053498507, 0.0071357968263328075, 0.0095097199082374573, 0.0063242027536034584, 0.0066444966942071915, 0.003965575248003006, 0.016206366941332817, 0.0028648723382502794, 0.00076979253208264709, 0.0036658181343227625, 0.0065817483700811863, 0.00037914147833362222, 0.0027229292318224907, 0.0041189705953001976, 0.00396713986992836, 0.0020202004816383123, 0.0016593358013778925, 0.013745374977588654, 0.0040312604978680611, 0.0082253143191337585, 0.0023452725727111101, 0.0008566731121391058, 0.0042600282467901707, 0.0032360206823796034, 0.0098007693886756897, 0.0047264276072382927, 0.010551117360591888, 0.013611353933811188, 0.0012793428031727672, 0.0028894238639622927, 0.0031285665463656187, 0.0081640230491757393, 0.0046969749964773655, 0.0040468792431056499, 0.010254728607833385, 0.0035035812761634588, 0.003440334927290678, 0.0026980570983141661, 0.0035703687462955713, 0.004175286740064621, 0.0014340718043968081, 0.0028776871040463448, 0.00030036459793336689, 0.006326999980956316, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1519, 748, -472, -9261, -156, -765, -537, 4174, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021452498913276941, 0.00027082258020527661, 0.00034691666951403022, 0.00018623887444846332, 0.00023370949202217162, 0.00012312358012422919, 0.00032669669599272311, 0.00019282898574601859, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -12,-13,-22,14,-9,-127,9,39, 
  /* [1][0][][] */ -62,22,-127,118,8,62,-19,37, 
  /* [2][0][][] */ 6,-6,24,-2,-11,-127,8,26, 
  /* [3][0][][] */ 24,53,55,127,17,-43,-41,-15, 
  /* [4][0][][] */ 16,61,22,-16,-127,-10,23,-3, 
  /* [5][0][][] */ 63,-27,127,-105,18,-60,-5,-47, 
  /* [6][0][][] */ 28,127,45,-39,40,-10,-67,-21, 
  /* [7][0][][] */ -22,-27,-41,-16,-11,-127,22,43, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0091173117980360985, 0.01150995958596468, 0.014743958599865437, 0.0079151522368192673, 0.009932653047144413, 0.0052327518351376057, 0.013884609565138817, 0.008195231668651104, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 6646, 285, 454, 1683, 14126, 225, 583, 1130, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00010009274410549551, 0.00046766220475547016, 0.00017049326561391354, 0.00046575706801377237, 0.00017983383440878242, 0.00027474382659420371, 0.00058416079264134169, 9.2741123808082193e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -19,-6,6,0,-6,27,2,-3, 14,-2,5,-6,6,127,13,127, 6,-2,6,-7,-4,17,2,3, 
  /* [0][1][][] */ 8,-127,-5,4,-19,-6,-105,-1, -127,98,-77,127,-127,-8,127,-34, 13,-2,-5,-63,-8,2,48,-27, 
  /* [0][2][][] */ 19,-4,3,-3,-4,-23,9,-6, 59,-3,127,-20,9,-113,4,6, 10,-2,-9,-7,-4,-20,-3,-5, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0042539415881037712, 0.019875643774867058, 0.0072459639050066471, 0.019794674590229988, 0.0076429378241300583, 0.011676612310111523, 0.024826832115650177, 0.003941497765481472, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 50949, -2732, 44393, 18815, 17212, 550881, 17286, 39304, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 6.191300053615123e-05, 3.9468650356866419e-05, 8.2888458564411849e-05, 2.6122610506718047e-05, 0.00010497491894057021, 6.1915943661006168e-06, 7.280102636286756e-06, 8.0176301707979292e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 9,-3,13, 8,-24,31, 11,-24,21, 
  /* [0][1][][] */ 39,29,27, 65,18,59, 23,-33,38, 
  /* [0][2][][] */ -21,-92,-12, -30,-127,-1, -9,-56,18, 
  /* [1][0][][] */ 32,77,26, 7,10,-1, -31,-69,-26, 
  /* [1][1][][] */ 54,124,41, 3,1,-2, -54,-127,-39, 
  /* [1][2][][] */ 30,46,12, 6,0,1, -32,-52,-2, 
  /* [2][0][][] */ 45,93,11, 55,127,13, 17,42,-2, 
  /* [2][1][][] */ -46,-83,-28, -80,-93,-38, -30,-7,-21, 
  /* [2][2][][] */ 2,11,7, 6,16,0, 1,11,-7, 
  /* [3][0][][] */ 46,-29,-14, 79,-34,-37, 32,-15,-11, 
  /* [3][1][][] */ 81,-52,-34, 127,-52,-71, 61,-25,-26, 
  /* [3][2][][] */ 21,-19,-2, 43,-26,-14, 18,-8,1, 
  /* [4][0][][] */ -12,-23,-4, 28,45,9, -15,-29,-4, 
  /* [4][1][][] */ -28,-59,-9, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-13,3, 22,25,-3, -11,-13,-2, 
  /* [5][0][][] */ -32,-58,-35, -54,-86,-55, -43,-31,-28, 
  /* [5][1][][] */ -60,-109,-50, -82,-127,-63, -50,-41,-35, 
  /* [5][2][][] */ 2,7,-10, 1,2,-5, 2,13,2, 
  /* [6][0][][] */ -98,-2,39, 5,24,-11, 70,21,-18, 
  /* [6][1][][] */ -127,-31,48, 17,25,-24, 113,20,-29, 
  /* [6][2][][] */ -49,-10,20, 18,-4,1, 38,-9,34, 
  /* [7][0][][] */ -6,16,-3, -16,22,-7, -6,21,-8, 
  /* [7][1][][] */ 17,84,-6, 23,127,-23, -2,60,-27, 
  /* [7][2][][] */ -28,-50,-20, -42,-52,-33, -20,4,-19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.015787813812494278, 0.010064505040645599, 0.021136555820703506, 0.0066612651571631432, 0.026768602430820465, 0.0015788564924150705, 0.0018564260099083185, 0.020444955676794052, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.094063811004161835, } };
const TfArray<1, int> quant46_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.093366846442222595, } };
const TfArray<1, int> quant47_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.089777551591396332, } };
const TfArray<1, int> quant51_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.074721366167068481, } };
const TfArray<1, int> quant54_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10175963491201401, } };
const TfArray<1, int> quant55_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.076036937534809113, } };
const TfArray<1, int> quant59_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.030907033011317253, } };
const TfArray<1, int> quant62_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.072064310312271118, } };
const TfArray<1, int> quant63_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.022189158946275711, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.040509652346372604, } };
const TfArray<1, int> quant66_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.090899914503097534, } };
const TfArray<1, int> quant67_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.020499495789408684, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.049266219139099121, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.045881975442171097, } };
const TfArray<1, int> quant70_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 18432, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14976, (TfLiteIntArray*)&tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8064, (TfLiteIntArray*)&tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_33_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_33_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteStatus tflite_learn_33_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_33_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
